// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trading/trader_service.proto

#include "trading/trader_service.pb.h"
#include "trading/trader_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace financio {
namespace trading {

static const char* TradingLink_method_names[] = {
  "/financio.trading.TradingLink/Session",
};

std::unique_ptr< TradingLink::Stub> TradingLink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingLink::Stub> stub(new TradingLink::Stub(channel, options));
  return stub;
}

TradingLink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Session_(TradingLink_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>* TradingLink::Stub::SessionRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>::Create(channel_.get(), rpcmethod_Session_, context);
}

void TradingLink::Stub::async::Session(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::financio::trading::ControlMessage,::financio::trading::StateMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::financio::trading::ControlMessage,::financio::trading::StateMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Session_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>* TradingLink::Stub::AsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>::Create(channel_.get(), cq, rpcmethod_Session_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>* TradingLink::Stub::PrepareAsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::financio::trading::ControlMessage, ::financio::trading::StateMessage>::Create(channel_.get(), cq, rpcmethod_Session_, context, false, nullptr);
}

TradingLink::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingLink_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingLink::Service, ::financio::trading::ControlMessage, ::financio::trading::StateMessage>(
          [](TradingLink::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::financio::trading::StateMessage,
             ::financio::trading::ControlMessage>* stream) {
               return service->Session(ctx, stream);
             }, this)));
}

TradingLink::Service::~Service() {
}

::grpc::Status TradingLink::Service::Session(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::financio::trading::StateMessage, ::financio::trading::ControlMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TraderControl_method_names[] = {
  "/financio.trading.TraderControl/CheckHealth",
};

std::unique_ptr< TraderControl::Stub> TraderControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TraderControl::Stub> stub(new TraderControl::Stub(channel, options));
  return stub;
}

TraderControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckHealth_(TraderControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TraderControl::Stub::CheckHealth(::grpc::ClientContext* context, const ::financio::trading::HealthPing& request, ::financio::trading::HealthPong* response) {
  return ::grpc::internal::BlockingUnaryCall< ::financio::trading::HealthPing, ::financio::trading::HealthPong, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void TraderControl::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::financio::trading::HealthPing* request, ::financio::trading::HealthPong* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::financio::trading::HealthPing, ::financio::trading::HealthPong, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void TraderControl::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::financio::trading::HealthPing* request, ::financio::trading::HealthPong* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::financio::trading::HealthPong>* TraderControl::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::financio::trading::HealthPing& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::financio::trading::HealthPong, ::financio::trading::HealthPing, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::financio::trading::HealthPong>* TraderControl::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::financio::trading::HealthPing& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

TraderControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraderControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraderControl::Service, ::financio::trading::HealthPing, ::financio::trading::HealthPong, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraderControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::financio::trading::HealthPing* req,
             ::financio::trading::HealthPong* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

TraderControl::Service::~Service() {
}

::grpc::Status TraderControl::Service::CheckHealth(::grpc::ServerContext* context, const ::financio::trading::HealthPing* request, ::financio::trading::HealthPong* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace financio
}  // namespace trading
#include <grpcpp/ports_undef.inc>

