// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: trading/trader_service.proto
// Protobuf C++ Version: 6.32.1

#ifndef trading_2ftrader_5fservice_2eproto_2epb_2eh
#define trading_2ftrader_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "trading/lifecycle.pb.h"
#include "trading/control.pb.h"
#include "trading/state.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_trading_2ftrader_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_trading_2ftrader_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_trading_2ftrader_5fservice_2eproto;
}  // extern "C"
namespace financio {
namespace trading {
class BackendToFrontend;
struct BackendToFrontendDefaultTypeInternal;
extern BackendToFrontendDefaultTypeInternal _BackendToFrontend_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull BackendToFrontend_class_data_;
class FrontendToBackend;
struct FrontendToBackendDefaultTypeInternal;
extern FrontendToBackendDefaultTypeInternal _FrontendToBackend_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FrontendToBackend_class_data_;
class HealthPing;
struct HealthPingDefaultTypeInternal;
extern HealthPingDefaultTypeInternal _HealthPing_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HealthPing_class_data_;
class HealthPong;
struct HealthPongDefaultTypeInternal;
extern HealthPongDefaultTypeInternal _HealthPong_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HealthPong_class_data_;
}  // namespace trading
}  // namespace financio
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace financio {
namespace trading {

// ===================================================================


// -------------------------------------------------------------------

class HealthPong final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:financio.trading.HealthPong) */ {
 public:
  inline HealthPong() : HealthPong(nullptr) {}
  ~HealthPong() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HealthPong* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HealthPong));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthPong(::google::protobuf::internal::ConstantInitialized);

  inline HealthPong(const HealthPong& from) : HealthPong(nullptr, from) {}
  inline HealthPong(HealthPong&& from) noexcept
      : HealthPong(nullptr, ::std::move(from)) {}
  inline HealthPong& operator=(const HealthPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthPong& operator=(HealthPong&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthPong& default_instance() {
    return *reinterpret_cast<const HealthPong*>(
        &_HealthPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(HealthPong& a, HealthPong& b) { a.Swap(&b); }
  inline void Swap(HealthPong* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthPong* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthPong* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HealthPong>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthPong& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthPong& from) { HealthPong::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HealthPong* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "financio.trading.HealthPong"; }

 protected:
  explicit HealthPong(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HealthPong(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HealthPong& from);
  HealthPong(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HealthPong&& from) noexcept
      : HealthPong(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNoteFieldNumber = 1,
  };
  // string note = 1;
  void clear_note() ;
  const ::std::string& note() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_note(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_note();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_note();
  void set_allocated_note(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_note() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_note(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_note();

  public:
  // @@protoc_insertion_point(class_scope:financio.trading.HealthPong)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 40,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HealthPong& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr note_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trading_2ftrader_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HealthPong_class_data_;
// -------------------------------------------------------------------

class HealthPing final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:financio.trading.HealthPing) */ {
 public:
  inline HealthPing() : HealthPing(nullptr) {}
  ~HealthPing() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HealthPing* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HealthPing));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthPing(::google::protobuf::internal::ConstantInitialized);

  inline HealthPing(const HealthPing& from) : HealthPing(nullptr, from) {}
  inline HealthPing(HealthPing&& from) noexcept
      : HealthPing(nullptr, ::std::move(from)) {}
  inline HealthPing& operator=(const HealthPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthPing& operator=(HealthPing&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthPing& default_instance() {
    return *reinterpret_cast<const HealthPing*>(
        &_HealthPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(HealthPing& a, HealthPing& b) { a.Swap(&b); }
  inline void Swap(HealthPing* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthPing* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthPing* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HealthPing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthPing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthPing& from) { HealthPing::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HealthPing* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "financio.trading.HealthPing"; }

 protected:
  explicit HealthPing(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HealthPing(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HealthPing& from);
  HealthPing(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HealthPing&& from) noexcept
      : HealthPing(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNoteFieldNumber = 1,
  };
  // string note = 1;
  void clear_note() ;
  const ::std::string& note() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_note(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_note();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_note();
  void set_allocated_note(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_note() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_note(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_note();

  public:
  // @@protoc_insertion_point(class_scope:financio.trading.HealthPing)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 40,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HealthPing& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr note_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trading_2ftrader_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HealthPing_class_data_;
// -------------------------------------------------------------------

class FrontendToBackend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:financio.trading.FrontendToBackend) */ {
 public:
  inline FrontendToBackend() : FrontendToBackend(nullptr) {}
  ~FrontendToBackend() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FrontendToBackend* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FrontendToBackend));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FrontendToBackend(::google::protobuf::internal::ConstantInitialized);

  inline FrontendToBackend(const FrontendToBackend& from) : FrontendToBackend(nullptr, from) {}
  inline FrontendToBackend(FrontendToBackend&& from) noexcept
      : FrontendToBackend(nullptr, ::std::move(from)) {}
  inline FrontendToBackend& operator=(const FrontendToBackend& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontendToBackend& operator=(FrontendToBackend&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrontendToBackend& default_instance() {
    return *reinterpret_cast<const FrontendToBackend*>(
        &_FrontendToBackend_default_instance_);
  }
  enum KindCase {
    kControl = 1,
    kMessage = 2,
    KIND_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FrontendToBackend& a, FrontendToBackend& b) { a.Swap(&b); }
  inline void Swap(FrontendToBackend* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontendToBackend* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrontendToBackend* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FrontendToBackend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FrontendToBackend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FrontendToBackend& from) { FrontendToBackend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FrontendToBackend* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "financio.trading.FrontendToBackend"; }

 protected:
  explicit FrontendToBackend(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FrontendToBackend(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FrontendToBackend& from);
  FrontendToBackend(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FrontendToBackend&& from) noexcept
      : FrontendToBackend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // .financio.trading.FrontendCommand control = 1;
  bool has_control() const;
  private:
  bool _internal_has_control() const;

  public:
  void clear_control() ;
  const ::financio::trading::FrontendCommand& control() const;
  [[nodiscard]] ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE release_control();
  ::financio::trading::FrontendCommand* PROTOBUF_NONNULL mutable_control();
  void set_allocated_control(::financio::trading::FrontendCommand* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_control(::financio::trading::FrontendCommand* PROTOBUF_NULLABLE value);
  ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE unsafe_arena_release_control();

  private:
  const ::financio::trading::FrontendCommand& _internal_control() const;
  ::financio::trading::FrontendCommand* PROTOBUF_NONNULL _internal_mutable_control();

  public:
  // .financio.trading.ControlMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;

  public:
  void clear_message() ;
  const ::financio::trading::ControlMessage& message() const;
  [[nodiscard]] ::financio::trading::ControlMessage* PROTOBUF_NULLABLE release_message();
  ::financio::trading::ControlMessage* PROTOBUF_NONNULL mutable_message();
  void set_allocated_message(::financio::trading::ControlMessage* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_message(::financio::trading::ControlMessage* PROTOBUF_NULLABLE value);
  ::financio::trading::ControlMessage* PROTOBUF_NULLABLE unsafe_arena_release_message();

  private:
  const ::financio::trading::ControlMessage& _internal_message() const;
  ::financio::trading::ControlMessage* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:financio.trading.FrontendToBackend)
 private:
  class _Internal;
  void set_has_control();
  void set_has_message();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FrontendToBackend& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE control_;
      ::financio::trading::ControlMessage* PROTOBUF_NULLABLE message_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trading_2ftrader_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FrontendToBackend_class_data_;
// -------------------------------------------------------------------

class BackendToFrontend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:financio.trading.BackendToFrontend) */ {
 public:
  inline BackendToFrontend() : BackendToFrontend(nullptr) {}
  ~BackendToFrontend() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BackendToFrontend* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BackendToFrontend));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BackendToFrontend(::google::protobuf::internal::ConstantInitialized);

  inline BackendToFrontend(const BackendToFrontend& from) : BackendToFrontend(nullptr, from) {}
  inline BackendToFrontend(BackendToFrontend&& from) noexcept
      : BackendToFrontend(nullptr, ::std::move(from)) {}
  inline BackendToFrontend& operator=(const BackendToFrontend& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackendToFrontend& operator=(BackendToFrontend&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackendToFrontend& default_instance() {
    return *reinterpret_cast<const BackendToFrontend*>(
        &_BackendToFrontend_default_instance_);
  }
  enum KindCase {
    kStatus = 1,
    kState = 2,
    KIND_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BackendToFrontend& a, BackendToFrontend& b) { a.Swap(&b); }
  inline void Swap(BackendToFrontend* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackendToFrontend* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackendToFrontend* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BackendToFrontend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackendToFrontend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BackendToFrontend& from) { BackendToFrontend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BackendToFrontend* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "financio.trading.BackendToFrontend"; }

 protected:
  explicit BackendToFrontend(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  BackendToFrontend(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const BackendToFrontend& from);
  BackendToFrontend(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, BackendToFrontend&& from) noexcept
      : BackendToFrontend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .financio.trading.BackendStatusUpdate status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::financio::trading::BackendStatusUpdate& status() const;
  [[nodiscard]] ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE release_status();
  ::financio::trading::BackendStatusUpdate* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE value);
  ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::financio::trading::BackendStatusUpdate& _internal_status() const;
  ::financio::trading::BackendStatusUpdate* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // .financio.trading.StateMessage state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;

  public:
  void clear_state() ;
  const ::financio::trading::StateMessage& state() const;
  [[nodiscard]] ::financio::trading::StateMessage* PROTOBUF_NULLABLE release_state();
  ::financio::trading::StateMessage* PROTOBUF_NONNULL mutable_state();
  void set_allocated_state(::financio::trading::StateMessage* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_state(::financio::trading::StateMessage* PROTOBUF_NULLABLE value);
  ::financio::trading::StateMessage* PROTOBUF_NULLABLE unsafe_arena_release_state();

  private:
  const ::financio::trading::StateMessage& _internal_state() const;
  ::financio::trading::StateMessage* PROTOBUF_NONNULL _internal_mutable_state();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:financio.trading.BackendToFrontend)
 private:
  class _Internal;
  void set_has_status();
  void set_has_state();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const BackendToFrontend& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE status_;
      ::financio::trading::StateMessage* PROTOBUF_NULLABLE state_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trading_2ftrader_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull BackendToFrontend_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FrontendToBackend

// .financio.trading.FrontendCommand control = 1;
inline bool FrontendToBackend::has_control() const {
  return kind_case() == kControl;
}
inline bool FrontendToBackend::_internal_has_control() const {
  return kind_case() == kControl;
}
inline void FrontendToBackend::set_has_control() {
  _impl_._oneof_case_[0] = kControl;
}
inline ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE FrontendToBackend::release_control() {
  // @@protoc_insertion_point(field_release:financio.trading.FrontendToBackend.control)
  if (kind_case() == kControl) {
    clear_has_kind();
    auto* temp = _impl_.kind_.control_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::financio::trading::FrontendCommand& FrontendToBackend::_internal_control() const {
  return kind_case() == kControl ? *_impl_.kind_.control_ : reinterpret_cast<::financio::trading::FrontendCommand&>(::financio::trading::_FrontendCommand_default_instance_);
}
inline const ::financio::trading::FrontendCommand& FrontendToBackend::control() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.FrontendToBackend.control)
  return _internal_control();
}
inline ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE FrontendToBackend::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:financio.trading.FrontendToBackend.control)
  if (kind_case() == kControl) {
    clear_has_kind();
    auto* temp = _impl_.kind_.control_;
    _impl_.kind_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrontendToBackend::unsafe_arena_set_allocated_control(
    ::financio::trading::FrontendCommand* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_control();
    _impl_.kind_.control_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:financio.trading.FrontendToBackend.control)
}
inline ::financio::trading::FrontendCommand* PROTOBUF_NONNULL FrontendToBackend::_internal_mutable_control() {
  if (kind_case() != kControl) {
    clear_kind();
    set_has_control();
    _impl_.kind_.control_ = 
        ::google::protobuf::Message::DefaultConstruct<::financio::trading::FrontendCommand>(GetArena());
  }
  return _impl_.kind_.control_;
}
inline ::financio::trading::FrontendCommand* PROTOBUF_NONNULL FrontendToBackend::mutable_control()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::financio::trading::FrontendCommand* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:financio.trading.FrontendToBackend.control)
  return _msg;
}

// .financio.trading.ControlMessage message = 2;
inline bool FrontendToBackend::has_message() const {
  return kind_case() == kMessage;
}
inline bool FrontendToBackend::_internal_has_message() const {
  return kind_case() == kMessage;
}
inline void FrontendToBackend::set_has_message() {
  _impl_._oneof_case_[0] = kMessage;
}
inline ::financio::trading::ControlMessage* PROTOBUF_NULLABLE FrontendToBackend::release_message() {
  // @@protoc_insertion_point(field_release:financio.trading.FrontendToBackend.message)
  if (kind_case() == kMessage) {
    clear_has_kind();
    auto* temp = _impl_.kind_.message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::financio::trading::ControlMessage& FrontendToBackend::_internal_message() const {
  return kind_case() == kMessage ? *_impl_.kind_.message_ : reinterpret_cast<::financio::trading::ControlMessage&>(::financio::trading::_ControlMessage_default_instance_);
}
inline const ::financio::trading::ControlMessage& FrontendToBackend::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.FrontendToBackend.message)
  return _internal_message();
}
inline ::financio::trading::ControlMessage* PROTOBUF_NULLABLE FrontendToBackend::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:financio.trading.FrontendToBackend.message)
  if (kind_case() == kMessage) {
    clear_has_kind();
    auto* temp = _impl_.kind_.message_;
    _impl_.kind_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrontendToBackend::unsafe_arena_set_allocated_message(
    ::financio::trading::ControlMessage* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_message();
    _impl_.kind_.message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:financio.trading.FrontendToBackend.message)
}
inline ::financio::trading::ControlMessage* PROTOBUF_NONNULL FrontendToBackend::_internal_mutable_message() {
  if (kind_case() != kMessage) {
    clear_kind();
    set_has_message();
    _impl_.kind_.message_ = 
        ::google::protobuf::Message::DefaultConstruct<::financio::trading::ControlMessage>(GetArena());
  }
  return _impl_.kind_.message_;
}
inline ::financio::trading::ControlMessage* PROTOBUF_NONNULL FrontendToBackend::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::financio::trading::ControlMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:financio.trading.FrontendToBackend.message)
  return _msg;
}

inline bool FrontendToBackend::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void FrontendToBackend::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline FrontendToBackend::KindCase FrontendToBackend::kind_case() const {
  return FrontendToBackend::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BackendToFrontend

// .financio.trading.BackendStatusUpdate status = 1;
inline bool BackendToFrontend::has_status() const {
  return kind_case() == kStatus;
}
inline bool BackendToFrontend::_internal_has_status() const {
  return kind_case() == kStatus;
}
inline void BackendToFrontend::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE BackendToFrontend::release_status() {
  // @@protoc_insertion_point(field_release:financio.trading.BackendToFrontend.status)
  if (kind_case() == kStatus) {
    clear_has_kind();
    auto* temp = _impl_.kind_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::financio::trading::BackendStatusUpdate& BackendToFrontend::_internal_status() const {
  return kind_case() == kStatus ? *_impl_.kind_.status_ : reinterpret_cast<::financio::trading::BackendStatusUpdate&>(::financio::trading::_BackendStatusUpdate_default_instance_);
}
inline const ::financio::trading::BackendStatusUpdate& BackendToFrontend::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.BackendToFrontend.status)
  return _internal_status();
}
inline ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE BackendToFrontend::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:financio.trading.BackendToFrontend.status)
  if (kind_case() == kStatus) {
    clear_has_kind();
    auto* temp = _impl_.kind_.status_;
    _impl_.kind_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BackendToFrontend::unsafe_arena_set_allocated_status(
    ::financio::trading::BackendStatusUpdate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_status();
    _impl_.kind_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:financio.trading.BackendToFrontend.status)
}
inline ::financio::trading::BackendStatusUpdate* PROTOBUF_NONNULL BackendToFrontend::_internal_mutable_status() {
  if (kind_case() != kStatus) {
    clear_kind();
    set_has_status();
    _impl_.kind_.status_ = 
        ::google::protobuf::Message::DefaultConstruct<::financio::trading::BackendStatusUpdate>(GetArena());
  }
  return _impl_.kind_.status_;
}
inline ::financio::trading::BackendStatusUpdate* PROTOBUF_NONNULL BackendToFrontend::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::financio::trading::BackendStatusUpdate* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:financio.trading.BackendToFrontend.status)
  return _msg;
}

// .financio.trading.StateMessage state = 2;
inline bool BackendToFrontend::has_state() const {
  return kind_case() == kState;
}
inline bool BackendToFrontend::_internal_has_state() const {
  return kind_case() == kState;
}
inline void BackendToFrontend::set_has_state() {
  _impl_._oneof_case_[0] = kState;
}
inline ::financio::trading::StateMessage* PROTOBUF_NULLABLE BackendToFrontend::release_state() {
  // @@protoc_insertion_point(field_release:financio.trading.BackendToFrontend.state)
  if (kind_case() == kState) {
    clear_has_kind();
    auto* temp = _impl_.kind_.state_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::financio::trading::StateMessage& BackendToFrontend::_internal_state() const {
  return kind_case() == kState ? *_impl_.kind_.state_ : reinterpret_cast<::financio::trading::StateMessage&>(::financio::trading::_StateMessage_default_instance_);
}
inline const ::financio::trading::StateMessage& BackendToFrontend::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.BackendToFrontend.state)
  return _internal_state();
}
inline ::financio::trading::StateMessage* PROTOBUF_NULLABLE BackendToFrontend::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:financio.trading.BackendToFrontend.state)
  if (kind_case() == kState) {
    clear_has_kind();
    auto* temp = _impl_.kind_.state_;
    _impl_.kind_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BackendToFrontend::unsafe_arena_set_allocated_state(
    ::financio::trading::StateMessage* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_state();
    _impl_.kind_.state_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:financio.trading.BackendToFrontend.state)
}
inline ::financio::trading::StateMessage* PROTOBUF_NONNULL BackendToFrontend::_internal_mutable_state() {
  if (kind_case() != kState) {
    clear_kind();
    set_has_state();
    _impl_.kind_.state_ = 
        ::google::protobuf::Message::DefaultConstruct<::financio::trading::StateMessage>(GetArena());
  }
  return _impl_.kind_.state_;
}
inline ::financio::trading::StateMessage* PROTOBUF_NONNULL BackendToFrontend::mutable_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::financio::trading::StateMessage* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:financio.trading.BackendToFrontend.state)
  return _msg;
}

inline bool BackendToFrontend::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void BackendToFrontend::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline BackendToFrontend::KindCase BackendToFrontend::kind_case() const {
  return BackendToFrontend::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HealthPing

// string note = 1;
inline void HealthPing::clear_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.note_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& HealthPing::note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.HealthPing.note)
  return _internal_note();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HealthPing::set_note(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:financio.trading.HealthPing.note)
}
inline ::std::string* PROTOBUF_NONNULL HealthPing::mutable_note()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:financio.trading.HealthPing.note)
  return _s;
}
inline const ::std::string& HealthPing::_internal_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.note_.Get();
}
inline void HealthPing::_internal_set_note(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.note_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HealthPing::_internal_mutable_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.note_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HealthPing::release_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:financio.trading.HealthPing.note)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.note_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.note_.Set("", GetArena());
  }
  return released;
}
inline void HealthPing::set_allocated_note(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.note_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.note_.IsDefault()) {
    _impl_.note_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:financio.trading.HealthPing.note)
}

// -------------------------------------------------------------------

// HealthPong

// string note = 1;
inline void HealthPong::clear_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.note_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& HealthPong::note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:financio.trading.HealthPong.note)
  return _internal_note();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HealthPong::set_note(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:financio.trading.HealthPong.note)
}
inline ::std::string* PROTOBUF_NONNULL HealthPong::mutable_note()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:financio.trading.HealthPong.note)
  return _s;
}
inline const ::std::string& HealthPong::_internal_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.note_.Get();
}
inline void HealthPong::_internal_set_note(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.note_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HealthPong::_internal_mutable_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.note_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HealthPong::release_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:financio.trading.HealthPong.note)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.note_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.note_.Set("", GetArena());
  }
  return released;
}
inline void HealthPong::set_allocated_note(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.note_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.note_.IsDefault()) {
    _impl_.note_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:financio.trading.HealthPong.note)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace trading
}  // namespace financio


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // trading_2ftrader_5fservice_2eproto_2epb_2eh
