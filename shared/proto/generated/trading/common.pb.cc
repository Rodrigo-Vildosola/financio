// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: trading/common.proto
// Protobuf C++ Version: 6.32.1

#include "trading/common.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace financio {
namespace trading {

inline constexpr TickAttribPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        can_auto_execute_{false},
        past_limit_{false},
        pre_open_{false},
        bid_past_low_{false},
        ask_past_high_{false},
        delayed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TickAttribPB::TickAttribPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TickAttribPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TickAttribPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TickAttribPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TickAttribPBDefaultTypeInternal() {}
  union {
    TickAttribPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TickAttribPBDefaultTypeInternal _TickAttribPB_default_instance_;

inline constexpr ExecutionPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exec_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        acct_number_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        order_ref_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        model_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shares_{0},
        price_{0},
        perm_id_{::int64_t{0}},
        order_id_{::int64_t{0}},
        cum_qty_{0},
        avg_price_{0},
        client_id_{0},
        last_liquidity_{0},
        pending_price_revision_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ExecutionPB::ExecutionPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ExecutionPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExecutionPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionPBDefaultTypeInternal() {}
  union {
    ExecutionPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionPBDefaultTypeInternal _ExecutionPB_default_instance_;

inline constexpr ExecutionFilterPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        acct_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sec_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_id_{0},
        last_n_days_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExecutionFilterPB::ExecutionFilterPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ExecutionFilterPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExecutionFilterPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionFilterPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionFilterPBDefaultTypeInternal() {}
  union {
    ExecutionFilterPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionFilterPBDefaultTypeInternal _ExecutionFilterPB_default_instance_;

inline constexpr DecimalPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mantissa_{::int64_t{0}},
        scale_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DecimalPB::DecimalPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DecimalPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DecimalPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecimalPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecimalPBDefaultTypeInternal() {}
  union {
    DecimalPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecimalPBDefaultTypeInternal _DecimalPB_default_instance_;

inline constexpr ContractPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sec_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        local_symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trading_class_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ContractPB::ContractPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ContractPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContractPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractPBDefaultTypeInternal() {}
  union {
    ContractPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractPBDefaultTypeInternal _ContractPB_default_instance_;

inline constexpr BarPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        open_{0},
        high_{0},
        low_{0},
        close_{0},
        wap_{0},
        volume_{0},
        count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BarPB::BarPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BarPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BarPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarPBDefaultTypeInternal() {}
  union {
    BarPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarPBDefaultTypeInternal _BarPB_default_instance_;
}  // namespace trading
}  // namespace financio
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_trading_2fcommon_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_trading_2fcommon_2eproto = nullptr;
const ::uint32_t
    TableStruct_trading_2fcommon_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::DecimalPB, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::DecimalPB, _impl_.mantissa_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::DecimalPB, _impl_.scale_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.can_auto_execute_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.past_limit_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.pre_open_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.bid_past_low_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.ask_past_high_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::TickAttribPB, _impl_.delayed_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_._has_bits_),
        19, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.exec_id_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.acct_number_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.shares_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.perm_id_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.client_id_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.cum_qty_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.avg_price_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.order_ref_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.model_code_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.last_liquidity_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionPB, _impl_.pending_price_revision_),
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        13,
        10,
        11,
        12,
        5,
        6,
        14,
        15,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.wap_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::BarPB, _impl_.count_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.client_id_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.acct_code_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.sec_type_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ExecutionFilterPB, _impl_.last_n_days_),
        6,
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.sec_type_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.local_symbol_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.trading_class_),
        PROTOBUF_FIELD_OFFSET(::financio::trading::ContractPB, _impl_.primary_exchange_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::financio::trading::DecimalPB)},
        {7, sizeof(::financio::trading::TickAttribPB)},
        {22, sizeof(::financio::trading::ExecutionPB)},
        {57, sizeof(::financio::trading::BarPB)},
        {76, sizeof(::financio::trading::ExecutionFilterPB)},
        {95, sizeof(::financio::trading::ContractPB)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::financio::trading::_DecimalPB_default_instance_._instance,
    &::financio::trading::_TickAttribPB_default_instance_._instance,
    &::financio::trading::_ExecutionPB_default_instance_._instance,
    &::financio::trading::_BarPB_default_instance_._instance,
    &::financio::trading::_ExecutionFilterPB_default_instance_._instance,
    &::financio::trading::_ContractPB_default_instance_._instance,
};
const char descriptor_table_protodef_trading_2fcommon_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024trading/common.proto\022\020financio.trading"
    "\",\n\tDecimalPB\022\020\n\010mantissa\030\001 \001(\003\022\r\n\005scale"
    "\030\002 \001(\005\"\214\001\n\014TickAttribPB\022\030\n\020can_auto_exec"
    "ute\030\001 \001(\010\022\022\n\npast_limit\030\002 \001(\010\022\020\n\010pre_ope"
    "n\030\003 \001(\010\022\024\n\014bid_past_low\030\004 \001(\010\022\025\n\rask_pas"
    "t_high\030\005 \001(\010\022\017\n\007delayed\030\006 \001(\010\"\271\002\n\013Execut"
    "ionPB\022\017\n\007exec_id\030\001 \001(\t\022\014\n\004time\030\002 \001(\t\022\023\n\013"
    "acct_number\030\003 \001(\t\022\020\n\010exchange\030\004 \001(\t\022\014\n\004s"
    "ide\030\005 \001(\t\022\016\n\006shares\030\006 \001(\001\022\r\n\005price\030\007 \001(\001"
    "\022\017\n\007perm_id\030\010 \001(\003\022\021\n\tclient_id\030\t \001(\005\022\020\n\010"
    "order_id\030\n \001(\003\022\017\n\007cum_qty\030\013 \001(\001\022\021\n\tavg_p"
    "rice\030\014 \001(\001\022\021\n\torder_ref\030\r \001(\t\022\022\n\nmodel_c"
    "ode\030\016 \001(\t\022\026\n\016last_liquidity\030\017 \001(\005\022\036\n\026pen"
    "ding_price_revision\030\020 \001(\010\"y\n\005BarPB\022\014\n\004ti"
    "me\030\001 \001(\t\022\014\n\004open\030\002 \001(\001\022\014\n\004high\030\003 \001(\001\022\013\n\003"
    "low\030\004 \001(\001\022\r\n\005close\030\005 \001(\001\022\013\n\003wap\030\006 \001(\001\022\016\n"
    "\006volume\030\007 \001(\001\022\r\n\005count\030\010 \001(\005\"\236\001\n\021Executi"
    "onFilterPB\022\021\n\tclient_id\030\001 \001(\005\022\021\n\tacct_co"
    "de\030\002 \001(\t\022\014\n\004time\030\003 \001(\t\022\016\n\006symbol\030\004 \001(\t\022\020"
    "\n\010sec_type\030\005 \001(\t\022\020\n\010exchange\030\006 \001(\t\022\014\n\004si"
    "de\030\007 \001(\t\022\023\n\013last_n_days\030\010 \001(\005\"\231\001\n\nContra"
    "ctPB\022\016\n\006symbol\030\001 \001(\t\022\020\n\010sec_type\030\002 \001(\t\022\020"
    "\n\010exchange\030\003 \001(\t\022\020\n\010currency\030\004 \001(\t\022\024\n\014lo"
    "cal_symbol\030\005 \001(\t\022\025\n\rtrading_class\030\006 \001(\t\022"
    "\030\n\020primary_exchange\030\007 \001(\t*\351\001\n\rBackendSta"
    "tus\022\032\n\026BACKEND_STATUS_UNKNOWN\020\000\022\033\n\027BACKE"
    "ND_STATUS_STARTING\020\001\022\030\n\024BACKEND_STATUS_R"
    "EADY\020\002\022\"\n\036BACKEND_STATUS_IBKR_CONNECTING"
    "\020\003\022!\n\035BACKEND_STATUS_IBKR_CONNECTED\020\004\022$\n"
    " BACKEND_STATUS_IBKR_DISCONNECTED\020\005\022\030\n\024B"
    "ACKEND_STATUS_ERROR\020\006*\210\002\n\013ControlType\022\027\n"
    "\023CONTROL_UNSPECIFIED\020\000\022\023\n\017CONTROL_CONNEC"
    "T\020\001\022\026\n\022CONTROL_DISCONNECT\020\002\022\023\n\017CONTROL_S"
    "UB_MKT\020\003\022\025\n\021CONTROL_UNSUB_MKT\020\004\022\027\n\023CONTR"
    "OL_PLACE_ORDER\020\005\022\030\n\024CONTROL_CANCEL_ORDER"
    "\020\006\022\026\n\022CONTROL_HISTORICAL\020\007\022\030\n\024CONTROL_AC"
    "COUNT_DATA\020\010\022\020\n\014CONTROL_NEWS\020\t\022\020\n\014CONTRO"
    "L_PING\020\n*\257\002\n\tStateType\022\025\n\021STATE_UNSPECIF"
    "IED\020\000\022\023\n\017STATE_CONNECTED\020\001\022\026\n\022STATE_DISC"
    "ONNECTED\020\002\022\017\n\013STATE_ERROR\020\003\022\016\n\nSTATE_PON"
    "G\020\004\022\024\n\020STATE_TICK_PRICE\020\n\022\023\n\017STATE_TICK_"
    "SIZE\020\013\022\026\n\022STATE_ORDER_STATUS\020\014\022\026\n\022STATE_"
    "ORDER_FILLED\020\r\022\022\n\016STATE_HIST_BAR\020\024\022\022\n\016ST"
    "ATE_HIST_END\020\025\022\025\n\021STATE_ACCOUNT_SUM\020\036\022\023\n"
    "\017STATE_PORTFOLIO\020\037\022\016\n\nSTATE_NEWS\020 b\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_trading_2fcommon_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_trading_2fcommon_2eproto = {
    false,
    false,
    1802,
    descriptor_table_protodef_trading_2fcommon_2eproto,
    "trading/common.proto",
    &descriptor_table_trading_2fcommon_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_trading_2fcommon_2eproto::offsets,
    file_level_enum_descriptors_trading_2fcommon_2eproto,
    file_level_service_descriptors_trading_2fcommon_2eproto,
};
namespace financio {
namespace trading {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL BackendStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2fcommon_2eproto);
  return file_level_enum_descriptors_trading_2fcommon_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t BackendStatus_internal_data_[] = {
    458752u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ControlType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2fcommon_2eproto);
  return file_level_enum_descriptors_trading_2fcommon_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ControlType_internal_data_[] = {
    720896u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL StateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2fcommon_2eproto);
  return file_level_enum_descriptors_trading_2fcommon_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t StateType_internal_data_[] = {
    327680u, 32u, 234979808u, };
// ===================================================================

class DecimalPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DecimalPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_._has_bits_);
};

DecimalPB::DecimalPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DecimalPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.DecimalPB)
}
DecimalPB::DecimalPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DecimalPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DecimalPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE DecimalPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void DecimalPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mantissa_),
           0,
           offsetof(Impl_, scale_) -
               offsetof(Impl_, mantissa_) +
               sizeof(Impl_::scale_));
}
DecimalPB::~DecimalPB() {
  // @@protoc_insertion_point(destructor:financio.trading.DecimalPB)
  SharedDtor(*this);
}
inline void DecimalPB::SharedDtor(MessageLite& self) {
  DecimalPB& this_ = static_cast<DecimalPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DecimalPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DecimalPB(arena);
}
constexpr auto DecimalPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DecimalPB),
                                            alignof(DecimalPB));
}
constexpr auto DecimalPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DecimalPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DecimalPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DecimalPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DecimalPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DecimalPB>(), &DecimalPB::ByteSizeLong,
              &DecimalPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_._cached_size_),
          false,
      },
      &DecimalPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DecimalPB_class_data_ =
        DecimalPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DecimalPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DecimalPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DecimalPB_class_data_.tc_table);
  return DecimalPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
DecimalPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DecimalPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::DecimalPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 scale = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DecimalPB, _impl_.scale_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.scale_)}},
    // int64 mantissa = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DecimalPB, _impl_.mantissa_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.mantissa_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 mantissa = 1;
    {PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.mantissa_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int32 scale = 2;
    {PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.scale_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void DecimalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.DecimalPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    ::memset(&_impl_.mantissa_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scale_) -
        reinterpret_cast<char*>(&_impl_.mantissa_)) + sizeof(_impl_.scale_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DecimalPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DecimalPB& this_ = static_cast<const DecimalPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DecimalPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DecimalPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.DecimalPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 mantissa = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_mantissa() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_mantissa(), target);
    }
  }

  // int32 scale = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_scale() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_scale(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.DecimalPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DecimalPB::ByteSizeLong(const MessageLite& base) {
  const DecimalPB& this_ = static_cast<const DecimalPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DecimalPB::ByteSizeLong() const {
  const DecimalPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.DecimalPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // int64 mantissa = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_mantissa() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_mantissa());
      }
    }
    // int32 scale = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_scale() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_scale());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DecimalPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DecimalPB*>(&to_msg);
  auto& from = static_cast<const DecimalPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.DecimalPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_mantissa() != 0) {
        _this->_impl_.mantissa_ = from._impl_.mantissa_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_scale() != 0) {
        _this->_impl_.scale_ = from._impl_.scale_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DecimalPB::CopyFrom(const DecimalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.DecimalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DecimalPB::InternalSwap(DecimalPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.scale_)
      + sizeof(DecimalPB::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(DecimalPB, _impl_.mantissa_)>(
          reinterpret_cast<char*>(&_impl_.mantissa_),
          reinterpret_cast<char*>(&other->_impl_.mantissa_));
}

::google::protobuf::Metadata DecimalPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TickAttribPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TickAttribPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_._has_bits_);
};

TickAttribPB::TickAttribPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TickAttribPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.TickAttribPB)
}
TickAttribPB::TickAttribPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TickAttribPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TickAttribPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE TickAttribPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TickAttribPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_auto_execute_),
           0,
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, can_auto_execute_) +
               sizeof(Impl_::delayed_));
}
TickAttribPB::~TickAttribPB() {
  // @@protoc_insertion_point(destructor:financio.trading.TickAttribPB)
  SharedDtor(*this);
}
inline void TickAttribPB::SharedDtor(MessageLite& self) {
  TickAttribPB& this_ = static_cast<TickAttribPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TickAttribPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TickAttribPB(arena);
}
constexpr auto TickAttribPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TickAttribPB),
                                            alignof(TickAttribPB));
}
constexpr auto TickAttribPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TickAttribPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TickAttribPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TickAttribPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TickAttribPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TickAttribPB>(), &TickAttribPB::ByteSizeLong,
              &TickAttribPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_._cached_size_),
          false,
      },
      &TickAttribPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TickAttribPB_class_data_ =
        TickAttribPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TickAttribPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TickAttribPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TickAttribPB_class_data_.tc_table);
  return TickAttribPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
TickAttribPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TickAttribPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::TickAttribPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool can_auto_execute = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.can_auto_execute_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.can_auto_execute_)}},
    // bool past_limit = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.past_limit_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.past_limit_)}},
    // bool pre_open = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.pre_open_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.pre_open_)}},
    // bool bid_past_low = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.bid_past_low_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.bid_past_low_)}},
    // bool ask_past_high = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.ask_past_high_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.ask_past_high_)}},
    // bool delayed = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TickAttribPB, _impl_.delayed_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.delayed_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool can_auto_execute = 1;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.can_auto_execute_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool past_limit = 2;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.past_limit_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool pre_open = 3;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.pre_open_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool bid_past_low = 4;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.bid_past_low_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool ask_past_high = 5;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.ask_past_high_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool delayed = 6;
    {PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.delayed_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void TickAttribPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.TickAttribPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    ::memset(&_impl_.can_auto_execute_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.delayed_) -
        reinterpret_cast<char*>(&_impl_.can_auto_execute_)) + sizeof(_impl_.delayed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TickAttribPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TickAttribPB& this_ = static_cast<const TickAttribPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TickAttribPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TickAttribPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.TickAttribPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool can_auto_execute = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_can_auto_execute() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_can_auto_execute(), target);
    }
  }

  // bool past_limit = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_past_limit() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_past_limit(), target);
    }
  }

  // bool pre_open = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_pre_open() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_pre_open(), target);
    }
  }

  // bool bid_past_low = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_bid_past_low() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_bid_past_low(), target);
    }
  }

  // bool ask_past_high = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_ask_past_high() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_ask_past_high(), target);
    }
  }

  // bool delayed = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_delayed() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_delayed(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.TickAttribPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TickAttribPB::ByteSizeLong(const MessageLite& base) {
  const TickAttribPB& this_ = static_cast<const TickAttribPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TickAttribPB::ByteSizeLong() const {
  const TickAttribPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.TickAttribPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // bool can_auto_execute = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_can_auto_execute() != 0) {
        total_size += 2;
      }
    }
    // bool past_limit = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_past_limit() != 0) {
        total_size += 2;
      }
    }
    // bool pre_open = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_pre_open() != 0) {
        total_size += 2;
      }
    }
    // bool bid_past_low = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_bid_past_low() != 0) {
        total_size += 2;
      }
    }
    // bool ask_past_high = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_ask_past_high() != 0) {
        total_size += 2;
      }
    }
    // bool delayed = 6;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_delayed() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TickAttribPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TickAttribPB*>(&to_msg);
  auto& from = static_cast<const TickAttribPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.TickAttribPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_can_auto_execute() != 0) {
        _this->_impl_.can_auto_execute_ = from._impl_.can_auto_execute_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_past_limit() != 0) {
        _this->_impl_.past_limit_ = from._impl_.past_limit_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_pre_open() != 0) {
        _this->_impl_.pre_open_ = from._impl_.pre_open_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_bid_past_low() != 0) {
        _this->_impl_.bid_past_low_ = from._impl_.bid_past_low_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_ask_past_high() != 0) {
        _this->_impl_.ask_past_high_ = from._impl_.ask_past_high_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_delayed() != 0) {
        _this->_impl_.delayed_ = from._impl_.delayed_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TickAttribPB::CopyFrom(const TickAttribPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.TickAttribPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TickAttribPB::InternalSwap(TickAttribPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.delayed_)
      + sizeof(TickAttribPB::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(TickAttribPB, _impl_.can_auto_execute_)>(
          reinterpret_cast<char*>(&_impl_.can_auto_execute_),
          reinterpret_cast<char*>(&other->_impl_.can_auto_execute_));
}

::google::protobuf::Metadata TickAttribPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExecutionPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ExecutionPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_._has_bits_);
};

ExecutionPB::ExecutionPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ExecutionPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.ExecutionPB)
}
PROTOBUF_NDEBUG_INLINE ExecutionPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::financio::trading::ExecutionPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exec_id_(arena, from.exec_id_),
        time_(arena, from.time_),
        acct_number_(arena, from.acct_number_),
        exchange_(arena, from.exchange_),
        side_(arena, from.side_),
        order_ref_(arena, from.order_ref_),
        model_code_(arena, from.model_code_) {}

ExecutionPB::ExecutionPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ExecutionPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ExecutionPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExecutionPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shares_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, shares_),
           offsetof(Impl_, pending_price_revision_) -
               offsetof(Impl_, shares_) +
               sizeof(Impl_::pending_price_revision_));

  // @@protoc_insertion_point(copy_constructor:financio.trading.ExecutionPB)
}
PROTOBUF_NDEBUG_INLINE ExecutionPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        exec_id_(arena),
        time_(arena),
        acct_number_(arena),
        exchange_(arena),
        side_(arena),
        order_ref_(arena),
        model_code_(arena) {}

inline void ExecutionPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shares_),
           0,
           offsetof(Impl_, pending_price_revision_) -
               offsetof(Impl_, shares_) +
               sizeof(Impl_::pending_price_revision_));
}
ExecutionPB::~ExecutionPB() {
  // @@protoc_insertion_point(destructor:financio.trading.ExecutionPB)
  SharedDtor(*this);
}
inline void ExecutionPB::SharedDtor(MessageLite& self) {
  ExecutionPB& this_ = static_cast<ExecutionPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exec_id_.Destroy();
  this_._impl_.time_.Destroy();
  this_._impl_.acct_number_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.side_.Destroy();
  this_._impl_.order_ref_.Destroy();
  this_._impl_.model_code_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ExecutionPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ExecutionPB(arena);
}
constexpr auto ExecutionPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ExecutionPB),
                                            alignof(ExecutionPB));
}
constexpr auto ExecutionPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ExecutionPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ExecutionPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ExecutionPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ExecutionPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ExecutionPB>(), &ExecutionPB::ByteSizeLong,
              &ExecutionPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_._cached_size_),
          false,
      },
      &ExecutionPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ExecutionPB_class_data_ =
        ExecutionPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ExecutionPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ExecutionPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ExecutionPB_class_data_.tc_table);
  return ExecutionPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 106, 2>
ExecutionPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ExecutionPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::ExecutionPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool pending_price_revision = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.pending_price_revision_)}},
    // string exec_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.exec_id_)}},
    // string time = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.time_)}},
    // string acct_number = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.acct_number_)}},
    // string exchange = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.exchange_)}},
    // string side = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.side_)}},
    // double shares = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 7, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.shares_)}},
    // double price = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 8, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.price_)}},
    // int64 perm_id = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExecutionPB, _impl_.perm_id_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.perm_id_)}},
    // int32 client_id = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionPB, _impl_.client_id_), 13>(),
     {72, 13, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.client_id_)}},
    // int64 order_id = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExecutionPB, _impl_.order_id_), 10>(),
     {80, 10, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.order_id_)}},
    // double cum_qty = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 11, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.cum_qty_)}},
    // double avg_price = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 12, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.avg_price_)}},
    // string order_ref = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 5, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.order_ref_)}},
    // string model_code = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 6, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.model_code_)}},
    // int32 last_liquidity = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionPB, _impl_.last_liquidity_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.last_liquidity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string exec_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.exec_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string time = 2;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.time_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string acct_number = 3;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.acct_number_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 4;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.exchange_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string side = 5;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.side_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double shares = 6;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.shares_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double price = 7;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.price_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int64 perm_id = 8;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.perm_id_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int32 client_id = 9;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.client_id_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int64 order_id = 10;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.order_id_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double cum_qty = 11;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.cum_qty_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double avg_price = 12;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.avg_price_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // string order_ref = 13;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.order_ref_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string model_code = 14;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.model_code_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 last_liquidity = 15;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.last_liquidity_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool pending_price_revision = 16;
    {PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.pending_price_revision_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\34\7\4\13\10\4\0\0\0\0\0\0\0\11\12\0\0\0\0\0\0\0\0\0"
    "financio.trading.ExecutionPB"
    "exec_id"
    "time"
    "acct_number"
    "exchange"
    "side"
    "order_ref"
    "model_code"
  }},
};
PROTOBUF_NOINLINE void ExecutionPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.ExecutionPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.exec_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.time_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.acct_number_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _impl_.side_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _impl_.order_ref_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _impl_.model_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.shares_ = 0;
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.price_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pending_price_revision_) -
        reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.pending_price_revision_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ExecutionPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ExecutionPB& this_ = static_cast<const ExecutionPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ExecutionPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ExecutionPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.ExecutionPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string exec_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_exec_id().empty()) {
      const ::std::string& _s = this_._internal_exec_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.exec_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string time = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_time().empty()) {
      const ::std::string& _s = this_._internal_time();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.time");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string acct_number = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_acct_number().empty()) {
      const ::std::string& _s = this_._internal_acct_number();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.acct_number");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string exchange = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (!this_._internal_exchange().empty()) {
      const ::std::string& _s = this_._internal_exchange();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.exchange");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string side = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (!this_._internal_side().empty()) {
      const ::std::string& _s = this_._internal_side();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.side");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // double shares = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_shares()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_shares(), target);
    }
  }

  // double price = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_price(), target);
    }
  }

  // int64 perm_id = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_perm_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<8>(
              stream, this_._internal_perm_id(), target);
    }
  }

  // int32 client_id = 9;
  if ((this_._impl_._has_bits_[0] & 0x00002000U) != 0) {
    if (this_._internal_client_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
              stream, this_._internal_client_id(), target);
    }
  }

  // int64 order_id = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_order_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<10>(
              stream, this_._internal_order_id(), target);
    }
  }

  // double cum_qty = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_cum_qty()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this_._internal_cum_qty(), target);
    }
  }

  // double avg_price = 12;
  if ((this_._impl_._has_bits_[0] & 0x00001000U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_avg_price()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          12, this_._internal_avg_price(), target);
    }
  }

  // string order_ref = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (!this_._internal_order_ref().empty()) {
      const ::std::string& _s = this_._internal_order_ref();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.order_ref");
      target = stream->WriteStringMaybeAliased(13, _s, target);
    }
  }

  // string model_code = 14;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (!this_._internal_model_code().empty()) {
      const ::std::string& _s = this_._internal_model_code();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionPB.model_code");
      target = stream->WriteStringMaybeAliased(14, _s, target);
    }
  }

  // int32 last_liquidity = 15;
  if ((this_._impl_._has_bits_[0] & 0x00004000U) != 0) {
    if (this_._internal_last_liquidity() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<15>(
              stream, this_._internal_last_liquidity(), target);
    }
  }

  // bool pending_price_revision = 16;
  if ((this_._impl_._has_bits_[0] & 0x00008000U) != 0) {
    if (this_._internal_pending_price_revision() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          16, this_._internal_pending_price_revision(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.ExecutionPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ExecutionPB::ByteSizeLong(const MessageLite& base) {
  const ExecutionPB& this_ = static_cast<const ExecutionPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ExecutionPB::ByteSizeLong() const {
  const ExecutionPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.ExecutionPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string exec_id = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_exec_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exec_id());
      }
    }
    // string time = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_time().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_time());
      }
    }
    // string acct_number = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_acct_number().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_acct_number());
      }
    }
    // string exchange = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_exchange().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exchange());
      }
    }
    // string side = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!this_._internal_side().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_side());
      }
    }
    // string order_ref = 13;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!this_._internal_order_ref().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_order_ref());
      }
    }
    // string model_code = 14;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (!this_._internal_model_code().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_model_code());
      }
    }
    // double shares = 6;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_shares()) != 0) {
        total_size += 9;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    // double price = 7;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
        total_size += 9;
      }
    }
    // int64 perm_id = 8;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_perm_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_perm_id());
      }
    }
    // int64 order_id = 10;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_order_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_order_id());
      }
    }
    // double cum_qty = 11;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_cum_qty()) != 0) {
        total_size += 9;
      }
    }
    // double avg_price = 12;
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_avg_price()) != 0) {
        total_size += 9;
      }
    }
    // int32 client_id = 9;
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (this_._internal_client_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_client_id());
      }
    }
    // int32 last_liquidity = 15;
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (this_._internal_last_liquidity() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_last_liquidity());
      }
    }
    // bool pending_price_revision = 16;
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (this_._internal_pending_price_revision() != 0) {
        total_size += 3;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ExecutionPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExecutionPB*>(&to_msg);
  auto& from = static_cast<const ExecutionPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.ExecutionPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_exec_id().empty()) {
        _this->_internal_set_exec_id(from._internal_exec_id());
      } else {
        if (_this->_impl_.exec_id_.IsDefault()) {
          _this->_internal_set_exec_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_time().empty()) {
        _this->_internal_set_time(from._internal_time());
      } else {
        if (_this->_impl_.time_.IsDefault()) {
          _this->_internal_set_time("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_acct_number().empty()) {
        _this->_internal_set_acct_number(from._internal_acct_number());
      } else {
        if (_this->_impl_.acct_number_.IsDefault()) {
          _this->_internal_set_acct_number("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_exchange().empty()) {
        _this->_internal_set_exchange(from._internal_exchange());
      } else {
        if (_this->_impl_.exchange_.IsDefault()) {
          _this->_internal_set_exchange("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!from._internal_side().empty()) {
        _this->_internal_set_side(from._internal_side());
      } else {
        if (_this->_impl_.side_.IsDefault()) {
          _this->_internal_set_side("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!from._internal_order_ref().empty()) {
        _this->_internal_set_order_ref(from._internal_order_ref());
      } else {
        if (_this->_impl_.order_ref_.IsDefault()) {
          _this->_internal_set_order_ref("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (!from._internal_model_code().empty()) {
        _this->_internal_set_model_code(from._internal_model_code());
      } else {
        if (_this->_impl_.model_code_.IsDefault()) {
          _this->_internal_set_model_code("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_shares()) != 0) {
        _this->_impl_.shares_ = from._impl_.shares_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
        _this->_impl_.price_ = from._impl_.price_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_perm_id() != 0) {
        _this->_impl_.perm_id_ = from._impl_.perm_id_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_order_id() != 0) {
        _this->_impl_.order_id_ = from._impl_.order_id_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_cum_qty()) != 0) {
        _this->_impl_.cum_qty_ = from._impl_.cum_qty_;
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_avg_price()) != 0) {
        _this->_impl_.avg_price_ = from._impl_.avg_price_;
      }
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (from._internal_client_id() != 0) {
        _this->_impl_.client_id_ = from._impl_.client_id_;
      }
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (from._internal_last_liquidity() != 0) {
        _this->_impl_.last_liquidity_ = from._impl_.last_liquidity_;
      }
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (from._internal_pending_price_revision() != 0) {
        _this->_impl_.pending_price_revision_ = from._impl_.pending_price_revision_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionPB::CopyFrom(const ExecutionPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.ExecutionPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExecutionPB::InternalSwap(ExecutionPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exec_id_, &other->_impl_.exec_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acct_number_, &other->_impl_.acct_number_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.side_, &other->_impl_.side_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_ref_, &other->_impl_.order_ref_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_code_, &other->_impl_.model_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.pending_price_revision_)
      + sizeof(ExecutionPB::_impl_.pending_price_revision_)
      - PROTOBUF_FIELD_OFFSET(ExecutionPB, _impl_.shares_)>(
          reinterpret_cast<char*>(&_impl_.shares_),
          reinterpret_cast<char*>(&other->_impl_.shares_));
}

::google::protobuf::Metadata ExecutionPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BarPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BarPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BarPB, _impl_._has_bits_);
};

BarPB::BarPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BarPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.BarPB)
}
PROTOBUF_NDEBUG_INLINE BarPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::financio::trading::BarPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        time_(arena, from.time_) {}

BarPB::BarPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BarPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BarPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BarPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, open_),
           offsetof(Impl_, count_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::count_));

  // @@protoc_insertion_point(copy_constructor:financio.trading.BarPB)
}
PROTOBUF_NDEBUG_INLINE BarPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        time_(arena) {}

inline void BarPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::count_));
}
BarPB::~BarPB() {
  // @@protoc_insertion_point(destructor:financio.trading.BarPB)
  SharedDtor(*this);
}
inline void BarPB::SharedDtor(MessageLite& self) {
  BarPB& this_ = static_cast<BarPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.time_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BarPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BarPB(arena);
}
constexpr auto BarPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(BarPB),
                                            alignof(BarPB));
}
constexpr auto BarPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BarPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BarPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BarPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BarPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BarPB>(), &BarPB::ByteSizeLong,
              &BarPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BarPB, _impl_._cached_size_),
          false,
      },
      &BarPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BarPB_class_data_ =
        BarPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BarPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BarPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BarPB_class_data_.tc_table);
  return BarPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 43, 2>
BarPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BarPB, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    BarPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::BarPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BarPB, _impl_.count_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.count_)}},
    // string time = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.time_)}},
    // double open = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.open_)}},
    // double high = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.high_)}},
    // double low = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.low_)}},
    // double close = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.close_)}},
    // double wap = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.wap_)}},
    // double volume = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(BarPB, _impl_.volume_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string time = 1;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.time_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double open = 2;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.open_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double high = 3;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.high_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double low = 4;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.low_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double close = 5;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.close_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double wap = 6;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.wap_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double volume = 7;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.volume_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 count = 8;
    {PROTOBUF_FIELD_OFFSET(BarPB, _impl_.count_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\26\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "financio.trading.BarPB"
    "time"
  }},
};
PROTOBUF_NOINLINE void BarPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.BarPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.time_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feU) != 0) {
    ::memset(&_impl_.open_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BarPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BarPB& this_ = static_cast<const BarPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BarPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BarPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.BarPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string time = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_time().empty()) {
      const ::std::string& _s = this_._internal_time();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.BarPB.time");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // double open = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_open(), target);
    }
  }

  // double high = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_high(), target);
    }
  }

  // double low = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_low(), target);
    }
  }

  // double close = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_close(), target);
    }
  }

  // double wap = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_wap()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_wap(), target);
    }
  }

  // double volume = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_volume(), target);
    }
  }

  // int32 count = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_count(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.BarPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BarPB::ByteSizeLong(const MessageLite& base) {
  const BarPB& this_ = static_cast<const BarPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BarPB::ByteSizeLong() const {
  const BarPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.BarPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string time = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_time().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_time());
      }
    }
    // double open = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
        total_size += 9;
      }
    }
    // double high = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
        total_size += 9;
      }
    }
    // double low = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
        total_size += 9;
      }
    }
    // double close = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
        total_size += 9;
      }
    }
    // double wap = 6;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_wap()) != 0) {
        total_size += 9;
      }
    }
    // double volume = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
        total_size += 9;
      }
    }
    // int32 count = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BarPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BarPB*>(&to_msg);
  auto& from = static_cast<const BarPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.BarPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_time().empty()) {
        _this->_internal_set_time(from._internal_time());
      } else {
        if (_this->_impl_.time_.IsDefault()) {
          _this->_internal_set_time("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_open()) != 0) {
        _this->_impl_.open_ = from._impl_.open_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
        _this->_impl_.high_ = from._impl_.high_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
        _this->_impl_.low_ = from._impl_.low_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
        _this->_impl_.close_ = from._impl_.close_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_wap()) != 0) {
        _this->_impl_.wap_ = from._impl_.wap_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
        _this->_impl_.volume_ = from._impl_.volume_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BarPB::CopyFrom(const BarPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.BarPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BarPB::InternalSwap(BarPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarPB, _impl_.count_)
      + sizeof(BarPB::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(BarPB, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::google::protobuf::Metadata BarPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExecutionFilterPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ExecutionFilterPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_._has_bits_);
};

ExecutionFilterPB::ExecutionFilterPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ExecutionFilterPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.ExecutionFilterPB)
}
PROTOBUF_NDEBUG_INLINE ExecutionFilterPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::financio::trading::ExecutionFilterPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        acct_code_(arena, from.acct_code_),
        time_(arena, from.time_),
        symbol_(arena, from.symbol_),
        sec_type_(arena, from.sec_type_),
        exchange_(arena, from.exchange_),
        side_(arena, from.side_) {}

ExecutionFilterPB::ExecutionFilterPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ExecutionFilterPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ExecutionFilterPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExecutionFilterPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_id_),
           offsetof(Impl_, last_n_days_) -
               offsetof(Impl_, client_id_) +
               sizeof(Impl_::last_n_days_));

  // @@protoc_insertion_point(copy_constructor:financio.trading.ExecutionFilterPB)
}
PROTOBUF_NDEBUG_INLINE ExecutionFilterPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        acct_code_(arena),
        time_(arena),
        symbol_(arena),
        sec_type_(arena),
        exchange_(arena),
        side_(arena) {}

inline void ExecutionFilterPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_id_),
           0,
           offsetof(Impl_, last_n_days_) -
               offsetof(Impl_, client_id_) +
               sizeof(Impl_::last_n_days_));
}
ExecutionFilterPB::~ExecutionFilterPB() {
  // @@protoc_insertion_point(destructor:financio.trading.ExecutionFilterPB)
  SharedDtor(*this);
}
inline void ExecutionFilterPB::SharedDtor(MessageLite& self) {
  ExecutionFilterPB& this_ = static_cast<ExecutionFilterPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.acct_code_.Destroy();
  this_._impl_.time_.Destroy();
  this_._impl_.symbol_.Destroy();
  this_._impl_.sec_type_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.side_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ExecutionFilterPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ExecutionFilterPB(arena);
}
constexpr auto ExecutionFilterPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ExecutionFilterPB),
                                            alignof(ExecutionFilterPB));
}
constexpr auto ExecutionFilterPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ExecutionFilterPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ExecutionFilterPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ExecutionFilterPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ExecutionFilterPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ExecutionFilterPB>(), &ExecutionFilterPB::ByteSizeLong,
              &ExecutionFilterPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_._cached_size_),
          false,
      },
      &ExecutionFilterPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ExecutionFilterPB_class_data_ =
        ExecutionFilterPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ExecutionFilterPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ExecutionFilterPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ExecutionFilterPB_class_data_.tc_table);
  return ExecutionFilterPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 90, 2>
ExecutionFilterPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ExecutionFilterPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::ExecutionFilterPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 last_n_days = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionFilterPB, _impl_.last_n_days_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.last_n_days_)}},
    // int32 client_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionFilterPB, _impl_.client_id_), 6>(),
     {8, 6, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.client_id_)}},
    // string acct_code = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.acct_code_)}},
    // string time = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.time_)}},
    // string symbol = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.symbol_)}},
    // string sec_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.sec_type_)}},
    // string exchange = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 4, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.exchange_)}},
    // string side = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 5, 0, PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.side_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 client_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.client_id_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string acct_code = 2;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.acct_code_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string time = 3;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.time_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string symbol = 4;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.symbol_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sec_type = 5;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.sec_type_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 6;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.exchange_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string side = 7;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.side_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 last_n_days = 8;
    {PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.last_n_days_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\42\0\11\4\6\10\10\4\0\0\0\0\0\0\0\0"
    "financio.trading.ExecutionFilterPB"
    "acct_code"
    "time"
    "symbol"
    "sec_type"
    "exchange"
    "side"
  }},
};
PROTOBUF_NOINLINE void ExecutionFilterPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.ExecutionFilterPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.acct_code_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.time_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.sec_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _impl_.side_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000c0U) != 0) {
    ::memset(&_impl_.client_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_n_days_) -
        reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.last_n_days_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ExecutionFilterPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ExecutionFilterPB& this_ = static_cast<const ExecutionFilterPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ExecutionFilterPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ExecutionFilterPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.ExecutionFilterPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 client_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_client_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_client_id(), target);
    }
  }

  // string acct_code = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_acct_code().empty()) {
      const ::std::string& _s = this_._internal_acct_code();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.acct_code");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string time = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_time().empty()) {
      const ::std::string& _s = this_._internal_time();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.time");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string symbol = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_symbol().empty()) {
      const ::std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.symbol");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string sec_type = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (!this_._internal_sec_type().empty()) {
      const ::std::string& _s = this_._internal_sec_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.sec_type");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string exchange = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (!this_._internal_exchange().empty()) {
      const ::std::string& _s = this_._internal_exchange();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.exchange");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // string side = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (!this_._internal_side().empty()) {
      const ::std::string& _s = this_._internal_side();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ExecutionFilterPB.side");
      target = stream->WriteStringMaybeAliased(7, _s, target);
    }
  }

  // int32 last_n_days = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_last_n_days() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_last_n_days(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.ExecutionFilterPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ExecutionFilterPB::ByteSizeLong(const MessageLite& base) {
  const ExecutionFilterPB& this_ = static_cast<const ExecutionFilterPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ExecutionFilterPB::ByteSizeLong() const {
  const ExecutionFilterPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.ExecutionFilterPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string acct_code = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_acct_code().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_acct_code());
      }
    }
    // string time = 3;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_time().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_time());
      }
    }
    // string symbol = 4;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string sec_type = 5;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_sec_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sec_type());
      }
    }
    // string exchange = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!this_._internal_exchange().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exchange());
      }
    }
    // string side = 7;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!this_._internal_side().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_side());
      }
    }
    // int32 client_id = 1;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_client_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_client_id());
      }
    }
    // int32 last_n_days = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_last_n_days() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_last_n_days());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ExecutionFilterPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExecutionFilterPB*>(&to_msg);
  auto& from = static_cast<const ExecutionFilterPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.ExecutionFilterPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_acct_code().empty()) {
        _this->_internal_set_acct_code(from._internal_acct_code());
      } else {
        if (_this->_impl_.acct_code_.IsDefault()) {
          _this->_internal_set_acct_code("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_time().empty()) {
        _this->_internal_set_time(from._internal_time());
      } else {
        if (_this->_impl_.time_.IsDefault()) {
          _this->_internal_set_time("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_sec_type().empty()) {
        _this->_internal_set_sec_type(from._internal_sec_type());
      } else {
        if (_this->_impl_.sec_type_.IsDefault()) {
          _this->_internal_set_sec_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!from._internal_exchange().empty()) {
        _this->_internal_set_exchange(from._internal_exchange());
      } else {
        if (_this->_impl_.exchange_.IsDefault()) {
          _this->_internal_set_exchange("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!from._internal_side().empty()) {
        _this->_internal_set_side(from._internal_side());
      } else {
        if (_this->_impl_.side_.IsDefault()) {
          _this->_internal_set_side("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_client_id() != 0) {
        _this->_impl_.client_id_ = from._impl_.client_id_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_last_n_days() != 0) {
        _this->_impl_.last_n_days_ = from._impl_.last_n_days_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionFilterPB::CopyFrom(const ExecutionFilterPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.ExecutionFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExecutionFilterPB::InternalSwap(ExecutionFilterPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acct_code_, &other->_impl_.acct_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sec_type_, &other->_impl_.sec_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.side_, &other->_impl_.side_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.last_n_days_)
      + sizeof(ExecutionFilterPB::_impl_.last_n_days_)
      - PROTOBUF_FIELD_OFFSET(ExecutionFilterPB, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::google::protobuf::Metadata ExecutionFilterPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ContractPB::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ContractPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ContractPB, _impl_._has_bits_);
};

ContractPB::ContractPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ContractPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:financio.trading.ContractPB)
}
PROTOBUF_NDEBUG_INLINE ContractPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::financio::trading::ContractPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_),
        sec_type_(arena, from.sec_type_),
        exchange_(arena, from.exchange_),
        currency_(arena, from.currency_),
        local_symbol_(arena, from.local_symbol_),
        trading_class_(arena, from.trading_class_),
        primary_exchange_(arena, from.primary_exchange_) {}

ContractPB::ContractPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ContractPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ContractPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ContractPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:financio.trading.ContractPB)
}
PROTOBUF_NDEBUG_INLINE ContractPB::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena),
        sec_type_(arena),
        exchange_(arena),
        currency_(arena),
        local_symbol_(arena),
        trading_class_(arena),
        primary_exchange_(arena) {}

inline void ContractPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ContractPB::~ContractPB() {
  // @@protoc_insertion_point(destructor:financio.trading.ContractPB)
  SharedDtor(*this);
}
inline void ContractPB::SharedDtor(MessageLite& self) {
  ContractPB& this_ = static_cast<ContractPB&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.sec_type_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.local_symbol_.Destroy();
  this_._impl_.trading_class_.Destroy();
  this_._impl_.primary_exchange_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ContractPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ContractPB(arena);
}
constexpr auto ContractPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ContractPB),
                                            alignof(ContractPB));
}
constexpr auto ContractPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ContractPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ContractPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ContractPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ContractPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ContractPB>(), &ContractPB::ByteSizeLong,
              &ContractPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ContractPB, _impl_._cached_size_),
          false,
      },
      &ContractPB::kDescriptorMethods,
      &descriptor_table_trading_2fcommon_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ContractPB_class_data_ =
        ContractPB::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ContractPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ContractPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ContractPB_class_data_.tc_table);
  return ContractPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 107, 2>
ContractPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContractPB, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ContractPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::financio::trading::ContractPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.symbol_)}},
    // string sec_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.sec_type_)}},
    // string exchange = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.exchange_)}},
    // string currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.currency_)}},
    // string local_symbol = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.local_symbol_)}},
    // string trading_class = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 5, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.trading_class_)}},
    // string primary_exchange = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 6, 0, PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.primary_exchange_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sec_type = 2;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.sec_type_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 3;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.exchange_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 4;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.currency_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string local_symbol = 5;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.local_symbol_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string trading_class = 6;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.trading_class_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_exchange = 7;
    {PROTOBUF_FIELD_OFFSET(ContractPB, _impl_.primary_exchange_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\6\10\10\10\14\15\20"
    "financio.trading.ContractPB"
    "symbol"
    "sec_type"
    "exchange"
    "currency"
    "local_symbol"
    "trading_class"
    "primary_exchange"
  }},
};
PROTOBUF_NOINLINE void ContractPB::Clear() {
// @@protoc_insertion_point(message_clear_start:financio.trading.ContractPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.sec_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _impl_.local_symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _impl_.trading_class_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _impl_.primary_exchange_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ContractPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ContractPB& this_ = static_cast<const ContractPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ContractPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ContractPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:financio.trading.ContractPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_symbol().empty()) {
      const ::std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string sec_type = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_sec_type().empty()) {
      const ::std::string& _s = this_._internal_sec_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.sec_type");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string exchange = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_exchange().empty()) {
      const ::std::string& _s = this_._internal_exchange();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.exchange");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string currency = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (!this_._internal_currency().empty()) {
      const ::std::string& _s = this_._internal_currency();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.currency");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string local_symbol = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (!this_._internal_local_symbol().empty()) {
      const ::std::string& _s = this_._internal_local_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.local_symbol");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string trading_class = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (!this_._internal_trading_class().empty()) {
      const ::std::string& _s = this_._internal_trading_class();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.trading_class");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // string primary_exchange = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (!this_._internal_primary_exchange().empty()) {
      const ::std::string& _s = this_._internal_primary_exchange();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "financio.trading.ContractPB.primary_exchange");
      target = stream->WriteStringMaybeAliased(7, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:financio.trading.ContractPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ContractPB::ByteSizeLong(const MessageLite& base) {
  const ContractPB& this_ = static_cast<const ContractPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ContractPB::ByteSizeLong() const {
  const ContractPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:financio.trading.ContractPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string sec_type = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_sec_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sec_type());
      }
    }
    // string exchange = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_exchange().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exchange());
      }
    }
    // string currency = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_currency().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_currency());
      }
    }
    // string local_symbol = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!this_._internal_local_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_local_symbol());
      }
    }
    // string trading_class = 6;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!this_._internal_trading_class().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_trading_class());
      }
    }
    // string primary_exchange = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (!this_._internal_primary_exchange().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_primary_exchange());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ContractPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ContractPB*>(&to_msg);
  auto& from = static_cast<const ContractPB&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:financio.trading.ContractPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_sec_type().empty()) {
        _this->_internal_set_sec_type(from._internal_sec_type());
      } else {
        if (_this->_impl_.sec_type_.IsDefault()) {
          _this->_internal_set_sec_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_exchange().empty()) {
        _this->_internal_set_exchange(from._internal_exchange());
      } else {
        if (_this->_impl_.exchange_.IsDefault()) {
          _this->_internal_set_exchange("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_currency().empty()) {
        _this->_internal_set_currency(from._internal_currency());
      } else {
        if (_this->_impl_.currency_.IsDefault()) {
          _this->_internal_set_currency("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!from._internal_local_symbol().empty()) {
        _this->_internal_set_local_symbol(from._internal_local_symbol());
      } else {
        if (_this->_impl_.local_symbol_.IsDefault()) {
          _this->_internal_set_local_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (!from._internal_trading_class().empty()) {
        _this->_internal_set_trading_class(from._internal_trading_class());
      } else {
        if (_this->_impl_.trading_class_.IsDefault()) {
          _this->_internal_set_trading_class("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (!from._internal_primary_exchange().empty()) {
        _this->_internal_set_primary_exchange(from._internal_primary_exchange());
      } else {
        if (_this->_impl_.primary_exchange_.IsDefault()) {
          _this->_internal_set_primary_exchange("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ContractPB::CopyFrom(const ContractPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:financio.trading.ContractPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ContractPB::InternalSwap(ContractPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sec_type_, &other->_impl_.sec_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.local_symbol_, &other->_impl_.local_symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trading_class_, &other->_impl_.trading_class_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_exchange_, &other->_impl_.primary_exchange_, arena);
}

::google::protobuf::Metadata ContractPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trading
}  // namespace financio
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_trading_2fcommon_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
