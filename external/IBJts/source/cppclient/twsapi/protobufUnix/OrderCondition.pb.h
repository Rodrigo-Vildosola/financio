// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: OrderCondition.proto
// Protobuf C++ Version: 5.29.3

#ifndef OrderCondition_2eproto_2epb_2eh
#define OrderCondition_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_OrderCondition_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_OrderCondition_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_OrderCondition_2eproto;
namespace protobuf {
class OrderCondition;
struct OrderConditionDefaultTypeInternal;
extern OrderConditionDefaultTypeInternal _OrderCondition_default_instance_;
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class OrderCondition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.OrderCondition) */ {
 public:
  inline OrderCondition() : OrderCondition(nullptr) {}
  ~OrderCondition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderCondition* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderCondition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderCondition(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderCondition(const OrderCondition& from) : OrderCondition(nullptr, from) {}
  inline OrderCondition(OrderCondition&& from) noexcept
      : OrderCondition(nullptr, std::move(from)) {}
  inline OrderCondition& operator=(const OrderCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCondition& operator=(OrderCondition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderCondition* internal_default_instance() {
    return reinterpret_cast<const OrderCondition*>(
        &_OrderCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OrderCondition& a, OrderCondition& b) { a.Swap(&b); }
  inline void Swap(OrderCondition* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderCondition* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderCondition& from) { OrderCondition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderCondition* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.OrderCondition"; }

 protected:
  explicit OrderCondition(::google::protobuf::Arena* arena);
  OrderCondition(::google::protobuf::Arena* arena, const OrderCondition& from);
  OrderCondition(::google::protobuf::Arena* arena, OrderCondition&& from) noexcept
      : OrderCondition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExchangeFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kSecTypeFieldNumber = 7,
    kTimeFieldNumber = 12,
    kTypeFieldNumber = 1,
    kIsConjunctionConnectionFieldNumber = 2,
    kIsMoreFieldNumber = 3,
    kConIdFieldNumber = 4,
    kPercentFieldNumber = 8,
    kChangePercentFieldNumber = 9,
    kPriceFieldNumber = 10,
    kTriggerMethodFieldNumber = 11,
    kVolumeFieldNumber = 13,
  };
  // optional string exchange = 5;
  bool has_exchange() const;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // optional string symbol = 6;
  bool has_symbol() const;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // optional string secType = 7;
  bool has_sectype() const;
  void clear_sectype() ;
  const std::string& sectype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sectype(Arg_&& arg, Args_... args);
  std::string* mutable_sectype();
  PROTOBUF_NODISCARD std::string* release_sectype();
  void set_allocated_sectype(std::string* value);

  private:
  const std::string& _internal_sectype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sectype(
      const std::string& value);
  std::string* _internal_mutable_sectype();

  public:
  // optional string time = 12;
  bool has_time() const;
  void clear_time() ;
  const std::string& time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* value);

  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(
      const std::string& value);
  std::string* _internal_mutable_time();

  public:
  // optional int32 type = 1;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional bool isConjunctionConnection = 2;
  bool has_isconjunctionconnection() const;
  void clear_isconjunctionconnection() ;
  bool isconjunctionconnection() const;
  void set_isconjunctionconnection(bool value);

  private:
  bool _internal_isconjunctionconnection() const;
  void _internal_set_isconjunctionconnection(bool value);

  public:
  // optional bool isMore = 3;
  bool has_ismore() const;
  void clear_ismore() ;
  bool ismore() const;
  void set_ismore(bool value);

  private:
  bool _internal_ismore() const;
  void _internal_set_ismore(bool value);

  public:
  // optional int32 conId = 4;
  bool has_conid() const;
  void clear_conid() ;
  ::int32_t conid() const;
  void set_conid(::int32_t value);

  private:
  ::int32_t _internal_conid() const;
  void _internal_set_conid(::int32_t value);

  public:
  // optional int32 percent = 8;
  bool has_percent() const;
  void clear_percent() ;
  ::int32_t percent() const;
  void set_percent(::int32_t value);

  private:
  ::int32_t _internal_percent() const;
  void _internal_set_percent(::int32_t value);

  public:
  // optional double changePercent = 9;
  bool has_changepercent() const;
  void clear_changepercent() ;
  double changepercent() const;
  void set_changepercent(double value);

  private:
  double _internal_changepercent() const;
  void _internal_set_changepercent(double value);

  public:
  // optional double price = 10;
  bool has_price() const;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // optional int32 triggerMethod = 11;
  bool has_triggermethod() const;
  void clear_triggermethod() ;
  ::int32_t triggermethod() const;
  void set_triggermethod(::int32_t value);

  private:
  ::int32_t _internal_triggermethod() const;
  void _internal_set_triggermethod(::int32_t value);

  public:
  // optional int32 volume = 13;
  bool has_volume() const;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.OrderCondition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderCondition& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr sectype_;
    ::google::protobuf::internal::ArenaStringPtr time_;
    ::int32_t type_;
    bool isconjunctionconnection_;
    bool ismore_;
    ::int32_t conid_;
    ::int32_t percent_;
    double changepercent_;
    double price_;
    ::int32_t triggermethod_;
    ::int32_t volume_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OrderCondition_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderCondition

// optional int32 type = 1;
inline bool OrderCondition::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void OrderCondition::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t OrderCondition::type() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.type)
  return _internal_type();
}
inline void OrderCondition::set_type(::int32_t value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.type)
}
inline ::int32_t OrderCondition::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_;
}
inline void OrderCondition::_internal_set_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// optional bool isConjunctionConnection = 2;
inline bool OrderCondition::has_isconjunctionconnection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void OrderCondition::clear_isconjunctionconnection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isconjunctionconnection_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool OrderCondition::isconjunctionconnection() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.isConjunctionConnection)
  return _internal_isconjunctionconnection();
}
inline void OrderCondition::set_isconjunctionconnection(bool value) {
  _internal_set_isconjunctionconnection(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.isConjunctionConnection)
}
inline bool OrderCondition::_internal_isconjunctionconnection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isconjunctionconnection_;
}
inline void OrderCondition::_internal_set_isconjunctionconnection(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isconjunctionconnection_ = value;
}

// optional bool isMore = 3;
inline bool OrderCondition::has_ismore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OrderCondition::clear_ismore() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ismore_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool OrderCondition::ismore() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.isMore)
  return _internal_ismore();
}
inline void OrderCondition::set_ismore(bool value) {
  _internal_set_ismore(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.isMore)
}
inline bool OrderCondition::_internal_ismore() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ismore_;
}
inline void OrderCondition::_internal_set_ismore(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ismore_ = value;
}

// optional int32 conId = 4;
inline bool OrderCondition::has_conid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void OrderCondition::clear_conid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t OrderCondition::conid() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.conId)
  return _internal_conid();
}
inline void OrderCondition::set_conid(::int32_t value) {
  _internal_set_conid(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.conId)
}
inline ::int32_t OrderCondition::_internal_conid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conid_;
}
inline void OrderCondition::_internal_set_conid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conid_ = value;
}

// optional string exchange = 5;
inline bool OrderCondition::has_exchange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderCondition::clear_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderCondition::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderCondition::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.exchange)
}
inline std::string* OrderCondition::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.exchange)
  return _s;
}
inline const std::string& OrderCondition::_internal_exchange() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_.Get();
}
inline void OrderCondition::_internal_set_exchange(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* OrderCondition::_internal_mutable_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* OrderCondition::release_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.exchange)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.exchange_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.exchange_.Set("", GetArena());
  }
  return released;
}
inline void OrderCondition::set_allocated_exchange(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.exchange_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.exchange)
}

// optional string symbol = 6;
inline bool OrderCondition::has_symbol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OrderCondition::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderCondition::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderCondition::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.symbol)
}
inline std::string* OrderCondition::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.symbol)
  return _s;
}
inline const std::string& OrderCondition::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void OrderCondition::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* OrderCondition::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* OrderCondition::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.symbol)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.symbol_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.symbol_.Set("", GetArena());
  }
  return released;
}
inline void OrderCondition::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.symbol)
}

// optional string secType = 7;
inline bool OrderCondition::has_sectype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OrderCondition::clear_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sectype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderCondition::sectype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.secType)
  return _internal_sectype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderCondition::set_sectype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sectype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.secType)
}
inline std::string* OrderCondition::mutable_sectype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sectype();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.secType)
  return _s;
}
inline const std::string& OrderCondition::_internal_sectype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sectype_.Get();
}
inline void OrderCondition::_internal_set_sectype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sectype_.Set(value, GetArena());
}
inline std::string* OrderCondition::_internal_mutable_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sectype_.Mutable( GetArena());
}
inline std::string* OrderCondition::release_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.secType)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.sectype_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sectype_.Set("", GetArena());
  }
  return released;
}
inline void OrderCondition::set_allocated_sectype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sectype_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sectype_.IsDefault()) {
    _impl_.sectype_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.secType)
}

// optional int32 percent = 8;
inline bool OrderCondition::has_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void OrderCondition::clear_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t OrderCondition::percent() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.percent)
  return _internal_percent();
}
inline void OrderCondition::set_percent(::int32_t value) {
  _internal_set_percent(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.percent)
}
inline ::int32_t OrderCondition::_internal_percent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percent_;
}
inline void OrderCondition::_internal_set_percent(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percent_ = value;
}

// optional double changePercent = 9;
inline bool OrderCondition::has_changepercent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void OrderCondition::clear_changepercent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.changepercent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double OrderCondition::changepercent() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.changePercent)
  return _internal_changepercent();
}
inline void OrderCondition::set_changepercent(double value) {
  _internal_set_changepercent(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.changePercent)
}
inline double OrderCondition::_internal_changepercent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.changepercent_;
}
inline void OrderCondition::_internal_set_changepercent(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.changepercent_ = value;
}

// optional double price = 10;
inline bool OrderCondition::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void OrderCondition::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double OrderCondition::price() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.price)
  return _internal_price();
}
inline void OrderCondition::set_price(double value) {
  _internal_set_price(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.price)
}
inline double OrderCondition::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void OrderCondition::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// optional int32 triggerMethod = 11;
inline bool OrderCondition::has_triggermethod() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void OrderCondition::clear_triggermethod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggermethod_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t OrderCondition::triggermethod() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.triggerMethod)
  return _internal_triggermethod();
}
inline void OrderCondition::set_triggermethod(::int32_t value) {
  _internal_set_triggermethod(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.triggerMethod)
}
inline ::int32_t OrderCondition::_internal_triggermethod() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.triggermethod_;
}
inline void OrderCondition::_internal_set_triggermethod(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggermethod_ = value;
}

// optional string time = 12;
inline bool OrderCondition::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void OrderCondition::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderCondition::time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderCondition::set_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.time)
}
inline std::string* OrderCondition::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.time)
  return _s;
}
inline const std::string& OrderCondition::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_.Get();
}
inline void OrderCondition::_internal_set_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_.Set(value, GetArena());
}
inline std::string* OrderCondition::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.time_.Mutable( GetArena());
}
inline std::string* OrderCondition::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.time)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.time_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.time_.Set("", GetArena());
  }
  return released;
}
inline void OrderCondition::set_allocated_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.time)
}

// optional int32 volume = 13;
inline bool OrderCondition::has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void OrderCondition::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t OrderCondition::volume() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.volume)
  return _internal_volume();
}
inline void OrderCondition::set_volume(::int32_t value) {
  _internal_set_volume(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.volume)
}
inline ::int32_t OrderCondition::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void OrderCondition::_internal_set_volume(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // OrderCondition_2eproto_2epb_2eh
