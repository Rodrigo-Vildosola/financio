// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Order.proto
// Protobuf C++ Version: 5.29.3

#include "Order.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {
              template <typename>
PROTOBUF_CONSTEXPR Order_SmartComboRoutingParamsEntry_DoNotUse::Order_SmartComboRoutingParamsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Order_SmartComboRoutingParamsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Order_SmartComboRoutingParamsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Order_SmartComboRoutingParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Order_SmartComboRoutingParamsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Order_SmartComboRoutingParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Order_SmartComboRoutingParamsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Order_SmartComboRoutingParamsEntry_DoNotUseDefaultTypeInternal _Order_SmartComboRoutingParamsEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Order_OrderMiscOptionsEntry_DoNotUse::Order_OrderMiscOptionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Order_OrderMiscOptionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Order_OrderMiscOptionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Order_OrderMiscOptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Order_OrderMiscOptionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Order_OrderMiscOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Order_OrderMiscOptionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Order_OrderMiscOptionsEntry_DoNotUseDefaultTypeInternal _Order_OrderMiscOptionsEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Order_AlgoParamsEntry_DoNotUse::Order_AlgoParamsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Order_AlgoParamsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Order_AlgoParamsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Order_AlgoParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Order_AlgoParamsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Order_AlgoParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Order_AlgoParamsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Order_AlgoParamsEntry_DoNotUseDefaultTypeInternal _Order_AlgoParamsEntry_DoNotUse_default_instance_;

inline constexpr Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        algoparams_{},
        smartcomboroutingparams_{},
        ordermiscoptions_{},
        conditions_{},
        action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        totalquantity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ordertype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tif_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settlingfirm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        clearingaccount_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        clearingintent_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        goodaftertime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        goodtilldate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ocagroup_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        orderref_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rule80a_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        activestarttime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        activestoptime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fagroup_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        famethod_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fapercentage_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralordertype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralopenclose_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutraldesignatedlocation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scaletable_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hedgetype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hedgeparam_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        algostrategy_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        algoid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openclose_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        designatedlocation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralsettlingfirm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralclearingaccount_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralclearingintent_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        referenceexchangeid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        adjustedordertype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        modelcode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extoperator_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mifid2decisionmaker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mifid2decisionalgo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mifid2executiontrader_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mifid2executionalgo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        autocanceldate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filledquantity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shareholder_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        advancederroroverride_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        manualordertime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        customeraccount_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bondaccruedinterest_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        submitter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        softdollartier_{nullptr},
        clientid_{0},
        orderid_{0},
        permid_{::int64_t{0}},
        parentid_{0},
        displaysize_{0},
        lmtprice_{0},
        auxprice_{0},
        allornone_{false},
        blockorder_{false},
        hidden_{false},
        outsiderth_{false},
        minqty_{0},
        percentoffset_{0},
        trailingpercent_{0},
        trailstopprice_{0},
        ocatype_{0},
        triggermethod_{0},
        volatility_{0},
        volatilitytype_{0},
        sweeptofill_{false},
        continuousupdate_{false},
        deltaneutralshortsale_{false},
        scaleautoreset_{false},
        referencepricetype_{0},
        deltaneutralconid_{0},
        deltaneutralauxprice_{0},
        deltaneutralshortsaleslot_{0},
        scaleinitlevelsize_{0},
        scalepriceincrement_{0},
        scalesubslevelsize_{0},
        scalepriceadjustinterval_{0},
        scalepriceadjustvalue_{0},
        scaleprofitoffset_{0},
        scaleinitposition_{0},
        scaleinitfillqty_{0},
        scalerandompercent_{false},
        whatif_{false},
        transmit_{false},
        overridepercentageconstraints_{false},
        origin_{0},
        shortsaleslot_{0},
        exemptcode_{0},
        discretionaryamt_{0},
        startingprice_{0},
        stockrefprice_{0},
        delta_{0},
        stockrangelower_{0},
        stockrangeupper_{0},
        optoutsmartrouting_{false},
        notheld_{false},
        solicited_{false},
        randomizesize_{false},
        referencecontractid_{0},
        peggedchangeamount_{0},
        referencechangeamount_{0},
        triggerprice_{0},
        adjustedstopprice_{0},
        randomizeprice_{false},
        ispeggedchangeamountdecrease_{false},
        conditionscancelorder_{false},
        conditionsignorerth_{false},
        adjustabletrailingunit_{0},
        adjustedstoplimitprice_{0},
        adjustedtrailingamount_{0},
        lmtpriceoffset_{0},
        cashqty_{0},
        dontuseautopriceforhedge_{false},
        isomscontainer_{false},
        discretionaryuptolimitprice_{false},
        autocancelparent_{false},
        reffuturesconid_{0},
        parentpermid_{::int64_t{0}},
        usepricemgmtalgo_{0},
        duration_{0},
        posttoats_{0},
        imbalanceonly_{false},
        routemarketabletobbo_{false},
        professionalcustomer_{false},
        includeovernight_{false},
        mintradeqty_{0},
        mincompetesize_{0},
        competeagainstbestoffset_{0},
        midoffsetatwhole_{0},
        midoffsetathalf_{0},
        manualorderindicator_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Order::Order(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace protobuf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Order_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Order_2eproto = nullptr;
const ::uint32_t
    TableStruct_Order_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_AlgoParamsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_AlgoParamsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_AlgoParamsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_AlgoParamsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_OrderMiscOptionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_OrderMiscOptionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_OrderMiscOptionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order_OrderMiscOptionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.clientid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.orderid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.permid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.parentid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.totalquantity_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.displaysize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.ordertype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.lmtprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.auxprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.tif_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.account_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.settlingfirm_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.clearingaccount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.clearingintent_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.allornone_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.blockorder_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.hidden_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.outsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.sweeptofill_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.percentoffset_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.trailingpercent_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.trailstopprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.minqty_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.goodaftertime_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.goodtilldate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.ocagroup_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.orderref_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.rule80a_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.ocatype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.triggermethod_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.activestarttime_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.activestoptime_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.fagroup_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.famethod_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.fapercentage_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.volatility_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.volatilitytype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.continuousupdate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.referencepricetype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralordertype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralauxprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralconid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralopenclose_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralshortsale_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralshortsaleslot_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutraldesignatedlocation_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaleinitlevelsize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scalesubslevelsize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scalepriceincrement_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scalepriceadjustvalue_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scalepriceadjustinterval_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaleprofitoffset_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaleautoreset_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaleinitposition_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaleinitfillqty_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scalerandompercent_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.scaletable_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.hedgetype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.hedgeparam_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.algostrategy_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.algoparams_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.algoid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.smartcomboroutingparams_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.whatif_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.transmit_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.overridepercentageconstraints_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.openclose_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.origin_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.shortsaleslot_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.designatedlocation_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.exemptcode_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralsettlingfirm_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralclearingaccount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.deltaneutralclearingintent_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.discretionaryamt_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.optoutsmartrouting_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.startingprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.stockrefprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.delta_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.stockrangelower_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.stockrangeupper_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.notheld_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.ordermiscoptions_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.solicited_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.randomizesize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.randomizeprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.referencecontractid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.peggedchangeamount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.ispeggedchangeamountdecrease_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.referencechangeamount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.referenceexchangeid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.adjustedordertype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.triggerprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.adjustedstopprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.adjustedstoplimitprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.adjustedtrailingamount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.adjustabletrailingunit_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.lmtpriceoffset_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.conditions_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.conditionscancelorder_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.conditionsignorerth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.modelcode_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.extoperator_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.softdollartier_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.cashqty_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mifid2decisionmaker_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mifid2decisionalgo_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mifid2executiontrader_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mifid2executionalgo_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.dontuseautopriceforhedge_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.isomscontainer_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.discretionaryuptolimitprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.autocanceldate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.filledquantity_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.reffuturesconid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.autocancelparent_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.shareholder_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.imbalanceonly_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.routemarketabletobbo_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.parentpermid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.usepricemgmtalgo_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.posttoats_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.advancederroroverride_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.manualordertime_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mintradeqty_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.mincompetesize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.competeagainstbestoffset_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.midoffsetatwhole_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.midoffsetathalf_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.customeraccount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.professionalcustomer_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.bondaccruedinterest_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.includeovernight_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.manualorderindicator_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Order, _impl_.submitter_),
        48,
        49,
        50,
        51,
        0,
        1,
        52,
        2,
        53,
        54,
        3,
        4,
        5,
        6,
        7,
        55,
        56,
        57,
        58,
        67,
        60,
        61,
        62,
        59,
        8,
        9,
        10,
        11,
        12,
        63,
        64,
        13,
        14,
        15,
        16,
        17,
        65,
        66,
        68,
        71,
        18,
        73,
        72,
        19,
        69,
        74,
        20,
        75,
        77,
        76,
        79,
        78,
        80,
        70,
        81,
        82,
        83,
        21,
        22,
        23,
        24,
        ~0u,
        25,
        ~0u,
        84,
        85,
        86,
        26,
        87,
        88,
        27,
        89,
        28,
        29,
        30,
        90,
        96,
        91,
        92,
        93,
        94,
        95,
        97,
        ~0u,
        98,
        99,
        105,
        100,
        101,
        106,
        102,
        31,
        32,
        103,
        104,
        110,
        111,
        109,
        112,
        ~0u,
        107,
        108,
        33,
        34,
        47,
        113,
        35,
        36,
        37,
        38,
        114,
        115,
        116,
        39,
        40,
        118,
        117,
        41,
        123,
        124,
        119,
        120,
        121,
        122,
        42,
        43,
        127,
        128,
        129,
        130,
        131,
        44,
        125,
        45,
        126,
        132,
        46,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::protobuf::Order_AlgoParamsEntry_DoNotUse)},
        {12, 22, -1, sizeof(::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse)},
        {24, 34, -1, sizeof(::protobuf::Order_OrderMiscOptionsEntry_DoNotUse)},
        {36, 181, -1, sizeof(::protobuf::Order)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_Order_AlgoParamsEntry_DoNotUse_default_instance_._instance,
    &::protobuf::_Order_SmartComboRoutingParamsEntry_DoNotUse_default_instance_._instance,
    &::protobuf::_Order_OrderMiscOptionsEntry_DoNotUse_default_instance_._instance,
    &::protobuf::_Order_default_instance_._instance,
};
const char descriptor_table_protodef_Order_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013Order.proto\022\010protobuf\032\024OrderCondition."
    "proto\032\024SoftDollarTier.proto\"\2776\n\005Order\022\025\n"
    "\010clientId\030\001 \001(\005H\000\210\001\001\022\024\n\007orderId\030\002 \001(\005H\001\210"
    "\001\001\022\023\n\006permId\030\003 \001(\003H\002\210\001\001\022\025\n\010parentId\030\004 \001("
    "\005H\003\210\001\001\022\023\n\006action\030\005 \001(\tH\004\210\001\001\022\032\n\rtotalQuan"
    "tity\030\006 \001(\tH\005\210\001\001\022\030\n\013displaySize\030\007 \001(\005H\006\210\001"
    "\001\022\026\n\torderType\030\010 \001(\tH\007\210\001\001\022\025\n\010lmtPrice\030\t "
    "\001(\001H\010\210\001\001\022\025\n\010auxPrice\030\n \001(\001H\t\210\001\001\022\020\n\003tif\030\013"
    " \001(\tH\n\210\001\001\022\024\n\007account\030\014 \001(\tH\013\210\001\001\022\031\n\014settl"
    "ingFirm\030\r \001(\tH\014\210\001\001\022\034\n\017clearingAccount\030\016 "
    "\001(\tH\r\210\001\001\022\033\n\016clearingIntent\030\017 \001(\tH\016\210\001\001\022\026\n"
    "\tallOrNone\030\020 \001(\010H\017\210\001\001\022\027\n\nblockOrder\030\021 \001("
    "\010H\020\210\001\001\022\023\n\006hidden\030\022 \001(\010H\021\210\001\001\022\027\n\noutsideRt"
    "h\030\023 \001(\010H\022\210\001\001\022\030\n\013sweepToFill\030\024 \001(\010H\023\210\001\001\022\032"
    "\n\rpercentOffset\030\025 \001(\001H\024\210\001\001\022\034\n\017trailingPe"
    "rcent\030\026 \001(\001H\025\210\001\001\022\033\n\016trailStopPrice\030\027 \001(\001"
    "H\026\210\001\001\022\023\n\006minQty\030\030 \001(\005H\027\210\001\001\022\032\n\rgoodAfterT"
    "ime\030\031 \001(\tH\030\210\001\001\022\031\n\014goodTillDate\030\032 \001(\tH\031\210\001"
    "\001\022\025\n\010ocaGroup\030\033 \001(\tH\032\210\001\001\022\025\n\010orderRef\030\034 \001"
    "(\tH\033\210\001\001\022\024\n\007rule80A\030\035 \001(\tH\034\210\001\001\022\024\n\007ocaType"
    "\030\036 \001(\005H\035\210\001\001\022\032\n\rtriggerMethod\030\037 \001(\005H\036\210\001\001\022"
    "\034\n\017activeStartTime\030  \001(\tH\037\210\001\001\022\033\n\016activeS"
    "topTime\030! \001(\tH \210\001\001\022\024\n\007faGroup\030\" \001(\tH!\210\001\001"
    "\022\025\n\010faMethod\030# \001(\tH\"\210\001\001\022\031\n\014faPercentage\030"
    "$ \001(\tH#\210\001\001\022\027\n\nvolatility\030% \001(\001H$\210\001\001\022\033\n\016v"
    "olatilityType\030& \001(\005H%\210\001\001\022\035\n\020continuousUp"
    "date\030\' \001(\010H&\210\001\001\022\037\n\022referencePriceType\030( "
    "\001(\005H\'\210\001\001\022\"\n\025deltaNeutralOrderType\030) \001(\tH"
    "(\210\001\001\022!\n\024deltaNeutralAuxPrice\030* \001(\001H)\210\001\001\022"
    "\036\n\021deltaNeutralConId\030+ \001(\005H*\210\001\001\022\"\n\025delta"
    "NeutralOpenClose\030, \001(\tH+\210\001\001\022\"\n\025deltaNeut"
    "ralShortSale\030- \001(\010H,\210\001\001\022&\n\031deltaNeutralS"
    "hortSaleSlot\030. \001(\005H-\210\001\001\022+\n\036deltaNeutralD"
    "esignatedLocation\030/ \001(\tH.\210\001\001\022\037\n\022scaleIni"
    "tLevelSize\0300 \001(\005H/\210\001\001\022\037\n\022scaleSubsLevelS"
    "ize\0301 \001(\005H0\210\001\001\022 \n\023scalePriceIncrement\0302 "
    "\001(\001H1\210\001\001\022\"\n\025scalePriceAdjustValue\0303 \001(\001H"
    "2\210\001\001\022%\n\030scalePriceAdjustInterval\0304 \001(\005H3"
    "\210\001\001\022\036\n\021scaleProfitOffset\0305 \001(\001H4\210\001\001\022\033\n\016s"
    "caleAutoReset\0306 \001(\010H5\210\001\001\022\036\n\021scaleInitPos"
    "ition\0307 \001(\005H6\210\001\001\022\035\n\020scaleInitFillQty\0308 \001"
    "(\005H7\210\001\001\022\037\n\022scaleRandomPercent\0309 \001(\010H8\210\001\001"
    "\022\027\n\nscaleTable\030: \001(\tH9\210\001\001\022\026\n\thedgeType\030;"
    " \001(\tH:\210\001\001\022\027\n\nhedgeParam\030< \001(\tH;\210\001\001\022\031\n\014al"
    "goStrategy\030= \001(\tH<\210\001\001\0223\n\nalgoParams\030> \003("
    "\0132\037.protobuf.Order.AlgoParamsEntry\022\023\n\006al"
    "goId\030\? \001(\tH=\210\001\001\022M\n\027smartComboRoutingPara"
    "ms\030@ \003(\0132,.protobuf.Order.SmartComboRout"
    "ingParamsEntry\022\023\n\006whatIf\030A \001(\010H>\210\001\001\022\025\n\010t"
    "ransmit\030B \001(\010H\?\210\001\001\022*\n\035overridePercentage"
    "Constraints\030C \001(\010H@\210\001\001\022\026\n\topenClose\030D \001("
    "\tHA\210\001\001\022\023\n\006origin\030E \001(\005HB\210\001\001\022\032\n\rshortSale"
    "Slot\030F \001(\005HC\210\001\001\022\037\n\022designatedLocation\030G "
    "\001(\tHD\210\001\001\022\027\n\nexemptCode\030H \001(\005HE\210\001\001\022%\n\030del"
    "taNeutralSettlingFirm\030I \001(\tHF\210\001\001\022(\n\033delt"
    "aNeutralClearingAccount\030J \001(\tHG\210\001\001\022\'\n\032de"
    "ltaNeutralClearingIntent\030K \001(\tHH\210\001\001\022\035\n\020d"
    "iscretionaryAmt\030L \001(\001HI\210\001\001\022\037\n\022optOutSmar"
    "tRouting\030M \001(\010HJ\210\001\001\022\032\n\rstartingPrice\030N \001"
    "(\001HK\210\001\001\022\032\n\rstockRefPrice\030O \001(\001HL\210\001\001\022\022\n\005d"
    "elta\030P \001(\001HM\210\001\001\022\034\n\017stockRangeLower\030Q \001(\001"
    "HN\210\001\001\022\034\n\017stockRangeUpper\030R \001(\001HO\210\001\001\022\024\n\007n"
    "otHeld\030S \001(\010HP\210\001\001\022\?\n\020orderMiscOptions\030T "
    "\003(\0132%.protobuf.Order.OrderMiscOptionsEnt"
    "ry\022\026\n\tsolicited\030U \001(\010HQ\210\001\001\022\032\n\rrandomizeS"
    "ize\030V \001(\010HR\210\001\001\022\033\n\016randomizePrice\030W \001(\010HS"
    "\210\001\001\022 \n\023referenceContractId\030X \001(\005HT\210\001\001\022\037\n"
    "\022peggedChangeAmount\030Y \001(\001HU\210\001\001\022)\n\034isPegg"
    "edChangeAmountDecrease\030Z \001(\010HV\210\001\001\022\"\n\025ref"
    "erenceChangeAmount\030[ \001(\001HW\210\001\001\022 \n\023referen"
    "ceExchangeId\030\\ \001(\tHX\210\001\001\022\036\n\021adjustedOrder"
    "Type\030] \001(\tHY\210\001\001\022\031\n\014triggerPrice\030^ \001(\001HZ\210"
    "\001\001\022\036\n\021adjustedStopPrice\030_ \001(\001H[\210\001\001\022#\n\026ad"
    "justedStopLimitPrice\030` \001(\001H\\\210\001\001\022#\n\026adjus"
    "tedTrailingAmount\030a \001(\001H]\210\001\001\022#\n\026adjustab"
    "leTrailingUnit\030b \001(\005H^\210\001\001\022\033\n\016lmtPriceOff"
    "set\030c \001(\001H_\210\001\001\022,\n\nconditions\030d \003(\0132\030.pro"
    "tobuf.OrderCondition\022\"\n\025conditionsCancel"
    "Order\030e \001(\010H`\210\001\001\022 \n\023conditionsIgnoreRth\030"
    "f \001(\010Ha\210\001\001\022\026\n\tmodelCode\030g \001(\tHb\210\001\001\022\030\n\013ex"
    "tOperator\030h \001(\tHc\210\001\001\0225\n\016softDollarTier\030i"
    " \001(\0132\030.protobuf.SoftDollarTierHd\210\001\001\022\024\n\007c"
    "ashQty\030j \001(\001He\210\001\001\022 \n\023mifid2DecisionMaker"
    "\030k \001(\tHf\210\001\001\022\037\n\022mifid2DecisionAlgo\030l \001(\tH"
    "g\210\001\001\022\"\n\025mifid2ExecutionTrader\030m \001(\tHh\210\001\001"
    "\022 \n\023mifid2ExecutionAlgo\030n \001(\tHi\210\001\001\022%\n\030do"
    "ntUseAutoPriceForHedge\030o \001(\010Hj\210\001\001\022\033\n\016isO"
    "msContainer\030p \001(\010Hk\210\001\001\022(\n\033discretionaryU"
    "pToLimitPrice\030q \001(\010Hl\210\001\001\022\033\n\016autoCancelDa"
    "te\030r \001(\tHm\210\001\001\022\033\n\016filledQuantity\030s \001(\tHn\210"
    "\001\001\022\034\n\017refFuturesConId\030t \001(\005Ho\210\001\001\022\035\n\020auto"
    "CancelParent\030u \001(\010Hp\210\001\001\022\030\n\013shareholder\030v"
    " \001(\tHq\210\001\001\022\032\n\rimbalanceOnly\030w \001(\010Hr\210\001\001\022!\n"
    "\024routeMarketableToBbo\030x \001(\010Hs\210\001\001\022\031\n\014pare"
    "ntPermId\030y \001(\003Ht\210\001\001\022\035\n\020usePriceMgmtAlgo\030"
    "z \001(\005Hu\210\001\001\022\025\n\010duration\030{ \001(\005Hv\210\001\001\022\026\n\tpos"
    "tToAts\030| \001(\005Hw\210\001\001\022\"\n\025advancedErrorOverri"
    "de\030} \001(\tHx\210\001\001\022\034\n\017manualOrderTime\030~ \001(\tHy"
    "\210\001\001\022\030\n\013minTradeQty\030\177 \001(\005Hz\210\001\001\022\034\n\016minComp"
    "eteSize\030\200\001 \001(\005H{\210\001\001\022&\n\030competeAgainstBes"
    "tOffset\030\201\001 \001(\001H|\210\001\001\022\036\n\020midOffsetAtWhole\030"
    "\202\001 \001(\001H}\210\001\001\022\035\n\017midOffsetAtHalf\030\203\001 \001(\001H~\210"
    "\001\001\022\035\n\017customerAccount\030\204\001 \001(\tH\177\210\001\001\022#\n\024pro"
    "fessionalCustomer\030\205\001 \001(\010H\200\001\210\001\001\022\"\n\023bondAc"
    "cruedInterest\030\206\001 \001(\tH\201\001\210\001\001\022\037\n\020includeOve"
    "rnight\030\207\001 \001(\010H\202\001\210\001\001\022#\n\024manualOrderIndica"
    "tor\030\210\001 \001(\005H\203\001\210\001\001\022\030\n\tsubmitter\030\211\001 \001(\tH\204\001\210"
    "\001\001\0321\n\017AlgoParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\t:\0028\001\032>\n\034SmartComboRoutingParams"
    "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0327\n"
    "\025OrderMiscOptionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
    "alue\030\002 \001(\t:\0028\001B\013\n\t_clientIdB\n\n\010_orderIdB"
    "\t\n\007_permIdB\013\n\t_parentIdB\t\n\007_actionB\020\n\016_t"
    "otalQuantityB\016\n\014_displaySizeB\014\n\n_orderTy"
    "peB\013\n\t_lmtPriceB\013\n\t_auxPriceB\006\n\004_tifB\n\n\010"
    "_accountB\017\n\r_settlingFirmB\022\n\020_clearingAc"
    "countB\021\n\017_clearingIntentB\014\n\n_allOrNoneB\r"
    "\n\013_blockOrderB\t\n\007_hiddenB\r\n\013_outsideRthB"
    "\016\n\014_sweepToFillB\020\n\016_percentOffsetB\022\n\020_tr"
    "ailingPercentB\021\n\017_trailStopPriceB\t\n\007_min"
    "QtyB\020\n\016_goodAfterTimeB\017\n\r_goodTillDateB\013"
    "\n\t_ocaGroupB\013\n\t_orderRefB\n\n\010_rule80AB\n\n\010"
    "_ocaTypeB\020\n\016_triggerMethodB\022\n\020_activeSta"
    "rtTimeB\021\n\017_activeStopTimeB\n\n\010_faGroupB\013\n"
    "\t_faMethodB\017\n\r_faPercentageB\r\n\013_volatili"
    "tyB\021\n\017_volatilityTypeB\023\n\021_continuousUpda"
    "teB\025\n\023_referencePriceTypeB\030\n\026_deltaNeutr"
    "alOrderTypeB\027\n\025_deltaNeutralAuxPriceB\024\n\022"
    "_deltaNeutralConIdB\030\n\026_deltaNeutralOpenC"
    "loseB\030\n\026_deltaNeutralShortSaleB\034\n\032_delta"
    "NeutralShortSaleSlotB!\n\037_deltaNeutralDes"
    "ignatedLocationB\025\n\023_scaleInitLevelSizeB\025"
    "\n\023_scaleSubsLevelSizeB\026\n\024_scalePriceIncr"
    "ementB\030\n\026_scalePriceAdjustValueB\033\n\031_scal"
    "ePriceAdjustIntervalB\024\n\022_scaleProfitOffs"
    "etB\021\n\017_scaleAutoResetB\024\n\022_scaleInitPosit"
    "ionB\023\n\021_scaleInitFillQtyB\025\n\023_scaleRandom"
    "PercentB\r\n\013_scaleTableB\014\n\n_hedgeTypeB\r\n\013"
    "_hedgeParamB\017\n\r_algoStrategyB\t\n\007_algoIdB"
    "\t\n\007_whatIfB\013\n\t_transmitB \n\036_overridePerc"
    "entageConstraintsB\014\n\n_openCloseB\t\n\007_orig"
    "inB\020\n\016_shortSaleSlotB\025\n\023_designatedLocat"
    "ionB\r\n\013_exemptCodeB\033\n\031_deltaNeutralSettl"
    "ingFirmB\036\n\034_deltaNeutralClearingAccountB"
    "\035\n\033_deltaNeutralClearingIntentB\023\n\021_discr"
    "etionaryAmtB\025\n\023_optOutSmartRoutingB\020\n\016_s"
    "tartingPriceB\020\n\016_stockRefPriceB\010\n\006_delta"
    "B\022\n\020_stockRangeLowerB\022\n\020_stockRangeUpper"
    "B\n\n\010_notHeldB\014\n\n_solicitedB\020\n\016_randomize"
    "SizeB\021\n\017_randomizePriceB\026\n\024_referenceCon"
    "tractIdB\025\n\023_peggedChangeAmountB\037\n\035_isPeg"
    "gedChangeAmountDecreaseB\030\n\026_referenceCha"
    "ngeAmountB\026\n\024_referenceExchangeIdB\024\n\022_ad"
    "justedOrderTypeB\017\n\r_triggerPriceB\024\n\022_adj"
    "ustedStopPriceB\031\n\027_adjustedStopLimitPric"
    "eB\031\n\027_adjustedTrailingAmountB\031\n\027_adjusta"
    "bleTrailingUnitB\021\n\017_lmtPriceOffsetB\030\n\026_c"
    "onditionsCancelOrderB\026\n\024_conditionsIgnor"
    "eRthB\014\n\n_modelCodeB\016\n\014_extOperatorB\021\n\017_s"
    "oftDollarTierB\n\n\010_cashQtyB\026\n\024_mifid2Deci"
    "sionMakerB\025\n\023_mifid2DecisionAlgoB\030\n\026_mif"
    "id2ExecutionTraderB\026\n\024_mifid2ExecutionAl"
    "goB\033\n\031_dontUseAutoPriceForHedgeB\021\n\017_isOm"
    "sContainerB\036\n\034_discretionaryUpToLimitPri"
    "ceB\021\n\017_autoCancelDateB\021\n\017_filledQuantity"
    "B\022\n\020_refFuturesConIdB\023\n\021_autoCancelParen"
    "tB\016\n\014_shareholderB\020\n\016_imbalanceOnlyB\027\n\025_"
    "routeMarketableToBboB\017\n\r_parentPermIdB\023\n"
    "\021_usePriceMgmtAlgoB\013\n\t_durationB\014\n\n_post"
    "ToAtsB\030\n\026_advancedErrorOverrideB\022\n\020_manu"
    "alOrderTimeB\016\n\014_minTradeQtyB\021\n\017_minCompe"
    "teSizeB\033\n\031_competeAgainstBestOffsetB\023\n\021_"
    "midOffsetAtWholeB\022\n\020_midOffsetAtHalfB\022\n\020"
    "_customerAccountB\027\n\025_professionalCustome"
    "rB\026\n\024_bondAccruedInterestB\023\n\021_includeOve"
    "rnightB\027\n\025_manualOrderIndicatorB\014\n\n_subm"
    "itterB5\n\026com.ib.client.protobufB\nOrderPr"
    "oto\252\002\016IBApi.protobufb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Order_2eproto_deps[2] =
    {
        &::descriptor_table_OrderCondition_2eproto,
        &::descriptor_table_SoftDollarTier_2eproto,
};
static ::absl::once_flag descriptor_table_Order_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Order_2eproto = {
    false,
    false,
    7108,
    descriptor_table_protodef_Order_2eproto,
    "Order.proto",
    &descriptor_table_Order_2eproto_once,
    descriptor_table_Order_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_Order_2eproto::offsets,
    file_level_enum_descriptors_Order_2eproto,
    file_level_service_descriptors_Order_2eproto,
};
namespace protobuf {
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Order_AlgoParamsEntry_DoNotUse::Order_AlgoParamsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Order_AlgoParamsEntry_DoNotUse::Order_AlgoParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Order_AlgoParamsEntry_DoNotUse::Order_AlgoParamsEntry_DoNotUse() : SuperType() {}
              Order_AlgoParamsEntry_DoNotUse::Order_AlgoParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Order_AlgoParamsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Order_AlgoParamsEntry_DoNotUse(arena);
              }
              constexpr auto Order_AlgoParamsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Order_AlgoParamsEntry_DoNotUse),
                                                          alignof(Order_AlgoParamsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Order_AlgoParamsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Order_AlgoParamsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Order_AlgoParamsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Order_AlgoParamsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Order_AlgoParamsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Order_AlgoParamsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Order_AlgoParamsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_Order_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Order_AlgoParamsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> Order_AlgoParamsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Order_AlgoParamsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(Order_AlgoParamsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\3\5\0\0\0\0\0"
    "protobuf.Order.AlgoParamsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Order_SmartComboRoutingParamsEntry_DoNotUse::Order_SmartComboRoutingParamsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Order_SmartComboRoutingParamsEntry_DoNotUse::Order_SmartComboRoutingParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Order_SmartComboRoutingParamsEntry_DoNotUse::Order_SmartComboRoutingParamsEntry_DoNotUse() : SuperType() {}
              Order_SmartComboRoutingParamsEntry_DoNotUse::Order_SmartComboRoutingParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Order_SmartComboRoutingParamsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Order_SmartComboRoutingParamsEntry_DoNotUse(arena);
              }
              constexpr auto Order_SmartComboRoutingParamsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Order_SmartComboRoutingParamsEntry_DoNotUse),
                                                          alignof(Order_SmartComboRoutingParamsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Order_SmartComboRoutingParamsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Order_SmartComboRoutingParamsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Order_SmartComboRoutingParamsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Order_SmartComboRoutingParamsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Order_SmartComboRoutingParamsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Order_SmartComboRoutingParamsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Order_SmartComboRoutingParamsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_Order_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Order_SmartComboRoutingParamsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> Order_SmartComboRoutingParamsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Order_SmartComboRoutingParamsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(Order_SmartComboRoutingParamsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\3\5\0\0\0\0\0"
    "protobuf.Order.SmartComboRoutingParamsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Order_OrderMiscOptionsEntry_DoNotUse::Order_OrderMiscOptionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Order_OrderMiscOptionsEntry_DoNotUse::Order_OrderMiscOptionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Order_OrderMiscOptionsEntry_DoNotUse::Order_OrderMiscOptionsEntry_DoNotUse() : SuperType() {}
              Order_OrderMiscOptionsEntry_DoNotUse::Order_OrderMiscOptionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Order_OrderMiscOptionsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Order_OrderMiscOptionsEntry_DoNotUse(arena);
              }
              constexpr auto Order_OrderMiscOptionsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Order_OrderMiscOptionsEntry_DoNotUse),
                                                          alignof(Order_OrderMiscOptionsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Order_OrderMiscOptionsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Order_OrderMiscOptionsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Order_OrderMiscOptionsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Order_OrderMiscOptionsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Order_OrderMiscOptionsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Order_OrderMiscOptionsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Order_OrderMiscOptionsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_Order_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Order_OrderMiscOptionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> Order_OrderMiscOptionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Order_OrderMiscOptionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(Order_OrderMiscOptionsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\3\5\0\0\0\0\0"
    "protobuf.Order.OrderMiscOptionsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class Order::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Order>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_);
};

void Order::clear_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Clear();
}
void Order::clear_softdollartier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.softdollartier_ != nullptr) _impl_.softdollartier_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
Order::Order(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf::Order& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        algoparams_{visibility, arena, from.algoparams_},
        smartcomboroutingparams_{visibility, arena, from.smartcomboroutingparams_},
        ordermiscoptions_{visibility, arena, from.ordermiscoptions_},
        conditions_{visibility, arena, from.conditions_},
        action_(arena, from.action_),
        totalquantity_(arena, from.totalquantity_),
        ordertype_(arena, from.ordertype_),
        tif_(arena, from.tif_),
        account_(arena, from.account_),
        settlingfirm_(arena, from.settlingfirm_),
        clearingaccount_(arena, from.clearingaccount_),
        clearingintent_(arena, from.clearingintent_),
        goodaftertime_(arena, from.goodaftertime_),
        goodtilldate_(arena, from.goodtilldate_),
        ocagroup_(arena, from.ocagroup_),
        orderref_(arena, from.orderref_),
        rule80a_(arena, from.rule80a_),
        activestarttime_(arena, from.activestarttime_),
        activestoptime_(arena, from.activestoptime_),
        fagroup_(arena, from.fagroup_),
        famethod_(arena, from.famethod_),
        fapercentage_(arena, from.fapercentage_),
        deltaneutralordertype_(arena, from.deltaneutralordertype_),
        deltaneutralopenclose_(arena, from.deltaneutralopenclose_),
        deltaneutraldesignatedlocation_(arena, from.deltaneutraldesignatedlocation_),
        scaletable_(arena, from.scaletable_),
        hedgetype_(arena, from.hedgetype_),
        hedgeparam_(arena, from.hedgeparam_),
        algostrategy_(arena, from.algostrategy_),
        algoid_(arena, from.algoid_),
        openclose_(arena, from.openclose_),
        designatedlocation_(arena, from.designatedlocation_),
        deltaneutralsettlingfirm_(arena, from.deltaneutralsettlingfirm_),
        deltaneutralclearingaccount_(arena, from.deltaneutralclearingaccount_),
        deltaneutralclearingintent_(arena, from.deltaneutralclearingintent_),
        referenceexchangeid_(arena, from.referenceexchangeid_),
        adjustedordertype_(arena, from.adjustedordertype_),
        modelcode_(arena, from.modelcode_),
        extoperator_(arena, from.extoperator_),
        mifid2decisionmaker_(arena, from.mifid2decisionmaker_),
        mifid2decisionalgo_(arena, from.mifid2decisionalgo_),
        mifid2executiontrader_(arena, from.mifid2executiontrader_),
        mifid2executionalgo_(arena, from.mifid2executionalgo_),
        autocanceldate_(arena, from.autocanceldate_),
        filledquantity_(arena, from.filledquantity_),
        shareholder_(arena, from.shareholder_),
        advancederroroverride_(arena, from.advancederroroverride_),
        manualordertime_(arena, from.manualordertime_),
        customeraccount_(arena, from.customeraccount_),
        bondaccruedinterest_(arena, from.bondaccruedinterest_),
        submitter_(arena, from.submitter_) {}

Order::Order(
    ::google::protobuf::Arena* arena,
    const Order& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[1];
  _impl_.softdollartier_ = (cached_has_bits & 0x00008000u) ? ::google::protobuf::Message::CopyConstruct<::protobuf::SoftDollarTier>(
                              arena, *from._impl_.softdollartier_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, clientid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, clientid_),
           offsetof(Impl_, manualorderindicator_) -
               offsetof(Impl_, clientid_) +
               sizeof(Impl_::manualorderindicator_));

  // @@protoc_insertion_point(copy_constructor:protobuf.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        algoparams_{visibility, arena},
        smartcomboroutingparams_{visibility, arena},
        ordermiscoptions_{visibility, arena},
        conditions_{visibility, arena},
        action_(arena),
        totalquantity_(arena),
        ordertype_(arena),
        tif_(arena),
        account_(arena),
        settlingfirm_(arena),
        clearingaccount_(arena),
        clearingintent_(arena),
        goodaftertime_(arena),
        goodtilldate_(arena),
        ocagroup_(arena),
        orderref_(arena),
        rule80a_(arena),
        activestarttime_(arena),
        activestoptime_(arena),
        fagroup_(arena),
        famethod_(arena),
        fapercentage_(arena),
        deltaneutralordertype_(arena),
        deltaneutralopenclose_(arena),
        deltaneutraldesignatedlocation_(arena),
        scaletable_(arena),
        hedgetype_(arena),
        hedgeparam_(arena),
        algostrategy_(arena),
        algoid_(arena),
        openclose_(arena),
        designatedlocation_(arena),
        deltaneutralsettlingfirm_(arena),
        deltaneutralclearingaccount_(arena),
        deltaneutralclearingintent_(arena),
        referenceexchangeid_(arena),
        adjustedordertype_(arena),
        modelcode_(arena),
        extoperator_(arena),
        mifid2decisionmaker_(arena),
        mifid2decisionalgo_(arena),
        mifid2executiontrader_(arena),
        mifid2executionalgo_(arena),
        autocanceldate_(arena),
        filledquantity_(arena),
        shareholder_(arena),
        advancederroroverride_(arena),
        manualordertime_(arena),
        customeraccount_(arena),
        bondaccruedinterest_(arena),
        submitter_(arena) {}

inline void Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, softdollartier_),
           0,
           offsetof(Impl_, manualorderindicator_) -
               offsetof(Impl_, softdollartier_) +
               sizeof(Impl_::manualorderindicator_));
}
Order::~Order() {
  // @@protoc_insertion_point(destructor:protobuf.Order)
  SharedDtor(*this);
}
inline void Order::SharedDtor(MessageLite& self) {
  Order& this_ = static_cast<Order&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.action_.Destroy();
  this_._impl_.totalquantity_.Destroy();
  this_._impl_.ordertype_.Destroy();
  this_._impl_.tif_.Destroy();
  this_._impl_.account_.Destroy();
  this_._impl_.settlingfirm_.Destroy();
  this_._impl_.clearingaccount_.Destroy();
  this_._impl_.clearingintent_.Destroy();
  this_._impl_.goodaftertime_.Destroy();
  this_._impl_.goodtilldate_.Destroy();
  this_._impl_.ocagroup_.Destroy();
  this_._impl_.orderref_.Destroy();
  this_._impl_.rule80a_.Destroy();
  this_._impl_.activestarttime_.Destroy();
  this_._impl_.activestoptime_.Destroy();
  this_._impl_.fagroup_.Destroy();
  this_._impl_.famethod_.Destroy();
  this_._impl_.fapercentage_.Destroy();
  this_._impl_.deltaneutralordertype_.Destroy();
  this_._impl_.deltaneutralopenclose_.Destroy();
  this_._impl_.deltaneutraldesignatedlocation_.Destroy();
  this_._impl_.scaletable_.Destroy();
  this_._impl_.hedgetype_.Destroy();
  this_._impl_.hedgeparam_.Destroy();
  this_._impl_.algostrategy_.Destroy();
  this_._impl_.algoid_.Destroy();
  this_._impl_.openclose_.Destroy();
  this_._impl_.designatedlocation_.Destroy();
  this_._impl_.deltaneutralsettlingfirm_.Destroy();
  this_._impl_.deltaneutralclearingaccount_.Destroy();
  this_._impl_.deltaneutralclearingintent_.Destroy();
  this_._impl_.referenceexchangeid_.Destroy();
  this_._impl_.adjustedordertype_.Destroy();
  this_._impl_.modelcode_.Destroy();
  this_._impl_.extoperator_.Destroy();
  this_._impl_.mifid2decisionmaker_.Destroy();
  this_._impl_.mifid2decisionalgo_.Destroy();
  this_._impl_.mifid2executiontrader_.Destroy();
  this_._impl_.mifid2executionalgo_.Destroy();
  this_._impl_.autocanceldate_.Destroy();
  this_._impl_.filledquantity_.Destroy();
  this_._impl_.shareholder_.Destroy();
  this_._impl_.advancederroroverride_.Destroy();
  this_._impl_.manualordertime_.Destroy();
  this_._impl_.customeraccount_.Destroy();
  this_._impl_.bondaccruedinterest_.Destroy();
  this_._impl_.submitter_.Destroy();
  delete this_._impl_.softdollartier_;
  this_._impl_.~Impl_();
}

inline void* Order::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Order(arena);
}
constexpr auto Order::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Order, _impl_.algoparams_) +
          decltype(Order::_impl_.algoparams_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.algoparams_) +
          decltype(Order::_impl_.algoparams_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.smartcomboroutingparams_) +
          decltype(Order::_impl_.smartcomboroutingparams_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.smartcomboroutingparams_) +
          decltype(Order::_impl_.smartcomboroutingparams_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.ordermiscoptions_) +
          decltype(Order::_impl_.ordermiscoptions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.ordermiscoptions_) +
          decltype(Order::_impl_.ordermiscoptions_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Order, _impl_.conditions_) +
          decltype(Order::_impl_.conditions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Order), alignof(Order), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Order::PlacementNew_,
                                 sizeof(Order),
                                 alignof(Order));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Order::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Order_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Order::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Order>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Order::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Order>(), &Order::ByteSizeLong,
            &Order::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Order, _impl_._cached_size_),
        false,
    },
    &Order::kDescriptorMethods,
    &descriptor_table_Order_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Order::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 137, 5, 865, 19> Order::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_),
    0, // no _extensions_
    137, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    137,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Order>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string action = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.action_)}},
    // optional string totalQuantity = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.totalquantity_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string orderType = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.ordertype_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string tif = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 3, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.tif_)}},
    // optional string account = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 4, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.account_)}},
    // optional string settlingFirm = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 5, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.settlingfirm_)}},
    // optional string clearingAccount = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 6, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.clearingaccount_)}},
    // optional string clearingIntent = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 7, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.clearingintent_)}},
    // optional string activeStartTime = 32;
    {::_pbi::TcParser::FastUS2,
     {642, 13, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.activestarttime_)}},
    // optional string activeStopTime = 33;
    {::_pbi::TcParser::FastUS2,
     {650, 14, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.activestoptime_)}},
    // optional string faGroup = 34;
    {::_pbi::TcParser::FastUS2,
     {658, 15, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.fagroup_)}},
    // optional string faMethod = 35;
    {::_pbi::TcParser::FastUS2,
     {666, 16, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.famethod_)}},
    // optional string faPercentage = 36;
    {::_pbi::TcParser::FastUS2,
     {674, 17, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.fapercentage_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string designatedLocation = 71;
    {::_pbi::TcParser::FastUS2,
     {1210, 27, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.designatedlocation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string goodAfterTime = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 8, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.goodaftertime_)}},
    // optional string goodTillDate = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 9, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.goodtilldate_)}},
    // optional string ocaGroup = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 10, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.ocagroup_)}},
    // optional string orderRef = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 11, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.orderref_)}},
    // optional string rule80A = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 12, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.rule80a_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string deltaNeutralDesignatedLocation = 47;
    {::_pbi::TcParser::FastUS2,
     {762, 20, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutraldesignatedlocation_)}},
  }}, {{
    33, 0, 7,
    0, 32, 0, 48, 0, 64, 0, 80, 0, 96, 0, 112,
    65024, 128,
    65535, 65535
  }}, {{
    // optional int32 clientId = 1;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.clientid_), _Internal::kHasBitsOffset + 48, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 orderId = 2;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.orderid_), _Internal::kHasBitsOffset + 49, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 permId = 3;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.permid_), _Internal::kHasBitsOffset + 50, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 parentId = 4;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.parentid_), _Internal::kHasBitsOffset + 51, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string action = 5;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.action_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string totalQuantity = 6;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.totalquantity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 displaySize = 7;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.displaysize_), _Internal::kHasBitsOffset + 52, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string orderType = 8;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.ordertype_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double lmtPrice = 9;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.lmtprice_), _Internal::kHasBitsOffset + 53, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double auxPrice = 10;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.auxprice_), _Internal::kHasBitsOffset + 54, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string tif = 11;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.tif_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string account = 12;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.account_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string settlingFirm = 13;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.settlingfirm_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string clearingAccount = 14;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.clearingaccount_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string clearingIntent = 15;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.clearingintent_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool allOrNone = 16;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.allornone_), _Internal::kHasBitsOffset + 55, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool blockOrder = 17;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.blockorder_), _Internal::kHasBitsOffset + 56, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool hidden = 18;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.hidden_), _Internal::kHasBitsOffset + 57, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool outsideRth = 19;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.outsiderth_), _Internal::kHasBitsOffset + 58, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool sweepToFill = 20;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.sweeptofill_), _Internal::kHasBitsOffset + 67, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double percentOffset = 21;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.percentoffset_), _Internal::kHasBitsOffset + 60, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double trailingPercent = 22;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.trailingpercent_), _Internal::kHasBitsOffset + 61, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double trailStopPrice = 23;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.trailstopprice_), _Internal::kHasBitsOffset + 62, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 minQty = 24;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.minqty_), _Internal::kHasBitsOffset + 59, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string goodAfterTime = 25;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.goodaftertime_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string goodTillDate = 26;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.goodtilldate_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string ocaGroup = 27;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.ocagroup_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string orderRef = 28;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.orderref_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string rule80A = 29;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.rule80a_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 ocaType = 30;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.ocatype_), _Internal::kHasBitsOffset + 63, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 triggerMethod = 31;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.triggermethod_), _Internal::kHasBitsOffset + 64, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string activeStartTime = 32;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.activestarttime_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string activeStopTime = 33;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.activestoptime_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string faGroup = 34;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.fagroup_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string faMethod = 35;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.famethod_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string faPercentage = 36;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.fapercentage_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double volatility = 37;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.volatility_), _Internal::kHasBitsOffset + 65, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 volatilityType = 38;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.volatilitytype_), _Internal::kHasBitsOffset + 66, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool continuousUpdate = 39;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.continuousupdate_), _Internal::kHasBitsOffset + 68, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 referencePriceType = 40;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.referencepricetype_), _Internal::kHasBitsOffset + 71, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string deltaNeutralOrderType = 41;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralordertype_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double deltaNeutralAuxPrice = 42;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralauxprice_), _Internal::kHasBitsOffset + 73, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 deltaNeutralConId = 43;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralconid_), _Internal::kHasBitsOffset + 72, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string deltaNeutralOpenClose = 44;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralopenclose_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool deltaNeutralShortSale = 45;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralshortsale_), _Internal::kHasBitsOffset + 69, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 deltaNeutralShortSaleSlot = 46;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralshortsaleslot_), _Internal::kHasBitsOffset + 74, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string deltaNeutralDesignatedLocation = 47;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutraldesignatedlocation_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 scaleInitLevelSize = 48;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaleinitlevelsize_), _Internal::kHasBitsOffset + 75, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 scaleSubsLevelSize = 49;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scalesubslevelsize_), _Internal::kHasBitsOffset + 77, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double scalePriceIncrement = 50;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scalepriceincrement_), _Internal::kHasBitsOffset + 76, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double scalePriceAdjustValue = 51;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scalepriceadjustvalue_), _Internal::kHasBitsOffset + 79, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 scalePriceAdjustInterval = 52;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scalepriceadjustinterval_), _Internal::kHasBitsOffset + 78, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double scaleProfitOffset = 53;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaleprofitoffset_), _Internal::kHasBitsOffset + 80, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool scaleAutoReset = 54;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaleautoreset_), _Internal::kHasBitsOffset + 70, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 scaleInitPosition = 55;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaleinitposition_), _Internal::kHasBitsOffset + 81, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 scaleInitFillQty = 56;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaleinitfillqty_), _Internal::kHasBitsOffset + 82, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool scaleRandomPercent = 57;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scalerandompercent_), _Internal::kHasBitsOffset + 83, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string scaleTable = 58;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.scaletable_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string hedgeType = 59;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.hedgetype_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string hedgeParam = 60;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.hedgeparam_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string algoStrategy = 61;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.algostrategy_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> algoParams = 62;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.algoparams_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional string algoId = 63;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.algoid_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> smartComboRoutingParams = 64;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.smartcomboroutingparams_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional bool whatIf = 65;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.whatif_), _Internal::kHasBitsOffset + 84, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool transmit = 66;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.transmit_), _Internal::kHasBitsOffset + 85, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool overridePercentageConstraints = 67;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.overridepercentageconstraints_), _Internal::kHasBitsOffset + 86, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string openClose = 68;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.openclose_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 origin = 69;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.origin_), _Internal::kHasBitsOffset + 87, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 shortSaleSlot = 70;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.shortsaleslot_), _Internal::kHasBitsOffset + 88, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string designatedLocation = 71;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.designatedlocation_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 exemptCode = 72;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.exemptcode_), _Internal::kHasBitsOffset + 89, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string deltaNeutralSettlingFirm = 73;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralsettlingfirm_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string deltaNeutralClearingAccount = 74;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralclearingaccount_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string deltaNeutralClearingIntent = 75;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.deltaneutralclearingintent_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double discretionaryAmt = 76;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.discretionaryamt_), _Internal::kHasBitsOffset + 90, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool optOutSmartRouting = 77;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.optoutsmartrouting_), _Internal::kHasBitsOffset + 96, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double startingPrice = 78;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.startingprice_), _Internal::kHasBitsOffset + 91, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double stockRefPrice = 79;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.stockrefprice_), _Internal::kHasBitsOffset + 92, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double delta = 80;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.delta_), _Internal::kHasBitsOffset + 93, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double stockRangeLower = 81;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.stockrangelower_), _Internal::kHasBitsOffset + 94, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double stockRangeUpper = 82;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.stockrangeupper_), _Internal::kHasBitsOffset + 95, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool notHeld = 83;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.notheld_), _Internal::kHasBitsOffset + 97, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // map<string, string> orderMiscOptions = 84;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.ordermiscoptions_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional bool solicited = 85;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.solicited_), _Internal::kHasBitsOffset + 98, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool randomizeSize = 86;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.randomizesize_), _Internal::kHasBitsOffset + 99, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool randomizePrice = 87;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.randomizeprice_), _Internal::kHasBitsOffset + 105, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 referenceContractId = 88;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.referencecontractid_), _Internal::kHasBitsOffset + 100, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double peggedChangeAmount = 89;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.peggedchangeamount_), _Internal::kHasBitsOffset + 101, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool isPeggedChangeAmountDecrease = 90;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.ispeggedchangeamountdecrease_), _Internal::kHasBitsOffset + 106, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double referenceChangeAmount = 91;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.referencechangeamount_), _Internal::kHasBitsOffset + 102, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string referenceExchangeId = 92;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.referenceexchangeid_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string adjustedOrderType = 93;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.adjustedordertype_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double triggerPrice = 94;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.triggerprice_), _Internal::kHasBitsOffset + 103, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double adjustedStopPrice = 95;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.adjustedstopprice_), _Internal::kHasBitsOffset + 104, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double adjustedStopLimitPrice = 96;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.adjustedstoplimitprice_), _Internal::kHasBitsOffset + 110, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double adjustedTrailingAmount = 97;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.adjustedtrailingamount_), _Internal::kHasBitsOffset + 111, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 adjustableTrailingUnit = 98;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.adjustabletrailingunit_), _Internal::kHasBitsOffset + 109, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double lmtPriceOffset = 99;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.lmtpriceoffset_), _Internal::kHasBitsOffset + 112, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated .protobuf.OrderCondition conditions = 100;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.conditions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool conditionsCancelOrder = 101;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.conditionscancelorder_), _Internal::kHasBitsOffset + 107, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool conditionsIgnoreRth = 102;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.conditionsignorerth_), _Internal::kHasBitsOffset + 108, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string modelCode = 103;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.modelcode_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string extOperator = 104;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.extoperator_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .protobuf.SoftDollarTier softDollarTier = 105;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.softdollartier_), _Internal::kHasBitsOffset + 47, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double cashQty = 106;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.cashqty_), _Internal::kHasBitsOffset + 113, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string mifid2DecisionMaker = 107;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mifid2decisionmaker_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string mifid2DecisionAlgo = 108;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mifid2decisionalgo_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string mifid2ExecutionTrader = 109;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mifid2executiontrader_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string mifid2ExecutionAlgo = 110;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mifid2executionalgo_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool dontUseAutoPriceForHedge = 111;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.dontuseautopriceforhedge_), _Internal::kHasBitsOffset + 114, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool isOmsContainer = 112;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.isomscontainer_), _Internal::kHasBitsOffset + 115, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool discretionaryUpToLimitPrice = 113;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.discretionaryuptolimitprice_), _Internal::kHasBitsOffset + 116, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string autoCancelDate = 114;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.autocanceldate_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string filledQuantity = 115;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.filledquantity_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 refFuturesConId = 116;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.reffuturesconid_), _Internal::kHasBitsOffset + 118, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool autoCancelParent = 117;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.autocancelparent_), _Internal::kHasBitsOffset + 117, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string shareholder = 118;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.shareholder_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool imbalanceOnly = 119;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.imbalanceonly_), _Internal::kHasBitsOffset + 123, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool routeMarketableToBbo = 120;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.routemarketabletobbo_), _Internal::kHasBitsOffset + 124, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int64 parentPermId = 121;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.parentpermid_), _Internal::kHasBitsOffset + 119, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 usePriceMgmtAlgo = 122;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.usepricemgmtalgo_), _Internal::kHasBitsOffset + 120, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 duration = 123;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.duration_), _Internal::kHasBitsOffset + 121, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 postToAts = 124;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.posttoats_), _Internal::kHasBitsOffset + 122, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string advancedErrorOverride = 125;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.advancederroroverride_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string manualOrderTime = 126;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.manualordertime_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 minTradeQty = 127;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mintradeqty_), _Internal::kHasBitsOffset + 127, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 minCompeteSize = 128;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.mincompetesize_), _Internal::kHasBitsOffset + 128, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double competeAgainstBestOffset = 129;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.competeagainstbestoffset_), _Internal::kHasBitsOffset + 129, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double midOffsetAtWhole = 130;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.midoffsetatwhole_), _Internal::kHasBitsOffset + 130, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double midOffsetAtHalf = 131;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.midoffsetathalf_), _Internal::kHasBitsOffset + 131, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string customerAccount = 132;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.customeraccount_), _Internal::kHasBitsOffset + 44, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool professionalCustomer = 133;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.professionalcustomer_), _Internal::kHasBitsOffset + 125, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string bondAccruedInterest = 134;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.bondaccruedinterest_), _Internal::kHasBitsOffset + 45, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool includeOvernight = 135;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.includeovernight_), _Internal::kHasBitsOffset + 126, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 manualOrderIndicator = 136;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.manualorderindicator_), _Internal::kHasBitsOffset + 132, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string submitter = 137;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.submitter_), _Internal::kHasBitsOffset + 46, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::OrderCondition>()},
    {::_pbi::TcParser::GetTable<::protobuf::SoftDollarTier>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Order()._impl_.algoparams_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Order()._impl_.smartcomboroutingparams_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Order()._impl_.ordermiscoptions_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\16\0\0\0\0\6\15\0\11\0\0\3\7\14\17\16\0\0\0\0\0\0\0\0\0\15\14\10\10\7\0\0\17\16\7\10\14\0\0\0\0\25\0\0\25\0\0\36\0\0\0\0\0\0\0\0\0\0\12\11\12\14\12\6\27\0\0\0\11\0\0\22\0\30\33\32\0\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\23\21\0\0\0\0\0\0\0\0\0\11\13\0\0\23\22\25\23\0\0\0\16\16\0\0\13\0\0\0\0\0\0\25\17\0\0\0\0\0\17\0\23\0\0\11\0\0\0\0\0\0"
    "protobuf.Order"
    "action"
    "totalQuantity"
    "orderType"
    "tif"
    "account"
    "settlingFirm"
    "clearingAccount"
    "clearingIntent"
    "goodAfterTime"
    "goodTillDate"
    "ocaGroup"
    "orderRef"
    "rule80A"
    "activeStartTime"
    "activeStopTime"
    "faGroup"
    "faMethod"
    "faPercentage"
    "deltaNeutralOrderType"
    "deltaNeutralOpenClose"
    "deltaNeutralDesignatedLocation"
    "scaleTable"
    "hedgeType"
    "hedgeParam"
    "algoStrategy"
    "algoParams"
    "algoId"
    "smartComboRoutingParams"
    "openClose"
    "designatedLocation"
    "deltaNeutralSettlingFirm"
    "deltaNeutralClearingAccount"
    "deltaNeutralClearingIntent"
    "orderMiscOptions"
    "referenceExchangeId"
    "adjustedOrderType"
    "modelCode"
    "extOperator"
    "mifid2DecisionMaker"
    "mifid2DecisionAlgo"
    "mifid2ExecutionTrader"
    "mifid2ExecutionAlgo"
    "autoCancelDate"
    "filledQuantity"
    "shareholder"
    "advancedErrorOverride"
    "manualOrderTime"
    "customerAccount"
    "bondAccruedInterest"
    "submitter"
  }},
};

PROTOBUF_NOINLINE void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Order)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algoparams_.Clear();
  _impl_.smartcomboroutingparams_.Clear();
  _impl_.ordermiscoptions_.Clear();
  _impl_.conditions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.totalquantity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ordertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tif_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.settlingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.clearingaccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.clearingintent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.goodaftertime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.goodtilldate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.ocagroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.orderref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.rule80a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.activestarttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.activestoptime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.fagroup_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.famethod_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.fapercentage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.deltaneutralordertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.deltaneutralopenclose_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.deltaneutraldesignatedlocation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.scaletable_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.hedgetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.hedgeparam_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.algostrategy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.algoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.openclose_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.designatedlocation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.deltaneutralsettlingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.deltaneutralclearingaccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.deltaneutralclearingintent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.referenceexchangeid_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.adjustedordertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.modelcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.extoperator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mifid2decisionmaker_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mifid2decisionalgo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mifid2executiontrader_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.mifid2executionalgo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.autocanceldate_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.filledquantity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.shareholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.advancederroroverride_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.manualordertime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.customeraccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.bondaccruedinterest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.submitter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.softdollartier_ != nullptr);
      _impl_.softdollartier_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.clientid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allornone_) -
        reinterpret_cast<char*>(&_impl_.clientid_)) + sizeof(_impl_.allornone_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.blockorder_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ocatype_) -
        reinterpret_cast<char*>(&_impl_.blockorder_)) + sizeof(_impl_.ocatype_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.triggermethod_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.referencepricetype_) -
        reinterpret_cast<char*>(&_impl_.triggermethod_)) + sizeof(_impl_.referencepricetype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.deltaneutralconid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scalepriceadjustvalue_) -
        reinterpret_cast<char*>(&_impl_.deltaneutralconid_)) + sizeof(_impl_.scalepriceadjustvalue_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.scaleprofitoffset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.origin_) -
        reinterpret_cast<char*>(&_impl_.scaleprofitoffset_)) + sizeof(_impl_.origin_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.shortsaleslot_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.stockrangeupper_) -
        reinterpret_cast<char*>(&_impl_.shortsaleslot_)) + sizeof(_impl_.stockrangeupper_));
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.optoutsmartrouting_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.triggerprice_) -
        reinterpret_cast<char*>(&_impl_.optoutsmartrouting_)) + sizeof(_impl_.triggerprice_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.adjustedstopprice_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.adjustedtrailingamount_) -
        reinterpret_cast<char*>(&_impl_.adjustedstopprice_)) + sizeof(_impl_.adjustedtrailingamount_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.lmtpriceoffset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.parentpermid_) -
        reinterpret_cast<char*>(&_impl_.lmtpriceoffset_)) + sizeof(_impl_.parentpermid_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.usepricemgmtalgo_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mintradeqty_) -
        reinterpret_cast<char*>(&_impl_.usepricemgmtalgo_)) + sizeof(_impl_.mintradeqty_));
  }
  cached_has_bits = _impl_._has_bits_[4];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.mincompetesize_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.manualorderindicator_) -
        reinterpret_cast<char*>(&_impl_.mincompetesize_)) + sizeof(_impl_.manualorderindicator_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Order::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Order::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf.Order)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional int32 clientId = 1;
          if (cached_has_bits & 0x00010000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_clientid(), target);
          }

          // optional int32 orderId = 2;
          if (cached_has_bits & 0x00020000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_orderid(), target);
          }

          // optional int64 permId = 3;
          if (cached_has_bits & 0x00040000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_permid(), target);
          }

          // optional int32 parentId = 4;
          if (cached_has_bits & 0x00080000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_parentid(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string action = 5;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.action");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional string totalQuantity = 6;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_totalquantity();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.totalQuantity");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional int32 displaySize = 7;
          if (cached_has_bits & 0x00100000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_displaysize(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string orderType = 8;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_ordertype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderType");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional double lmtPrice = 9;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_lmtprice(), target);
          }

          // optional double auxPrice = 10;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_auxprice(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string tif = 11;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_tif();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.tif");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // optional string account = 12;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_account();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.account");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // optional string settlingFirm = 13;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_settlingfirm();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.settlingFirm");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // optional string clearingAccount = 14;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_clearingaccount();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.clearingAccount");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // optional string clearingIntent = 15;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_clearingintent();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.clearingIntent");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional bool allOrNone = 16;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                16, this_._internal_allornone(), target);
          }

          // optional bool blockOrder = 17;
          if (cached_has_bits & 0x01000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_blockorder(), target);
          }

          // optional bool hidden = 18;
          if (cached_has_bits & 0x02000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_hidden(), target);
          }

          // optional bool outsideRth = 19;
          if (cached_has_bits & 0x04000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                19, this_._internal_outsiderth(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional bool sweepToFill = 20;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                20, this_._internal_sweeptofill(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional double percentOffset = 21;
          if (cached_has_bits & 0x10000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                21, this_._internal_percentoffset(), target);
          }

          // optional double trailingPercent = 22;
          if (cached_has_bits & 0x20000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                22, this_._internal_trailingpercent(), target);
          }

          // optional double trailStopPrice = 23;
          if (cached_has_bits & 0x40000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                23, this_._internal_trailstopprice(), target);
          }

          // optional int32 minQty = 24;
          if (cached_has_bits & 0x08000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                24, this_._internal_minqty(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string goodAfterTime = 25;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_goodaftertime();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.goodAfterTime");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // optional string goodTillDate = 26;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_goodtilldate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.goodTillDate");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // optional string ocaGroup = 27;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_ocagroup();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.ocaGroup");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // optional string orderRef = 28;
          if (cached_has_bits & 0x00000800u) {
            const std::string& _s = this_._internal_orderref();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderRef");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // optional string rule80A = 29;
          if (cached_has_bits & 0x00001000u) {
            const std::string& _s = this_._internal_rule80a();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.rule80A");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional int32 ocaType = 30;
          if (cached_has_bits & 0x80000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                30, this_._internal_ocatype(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional int32 triggerMethod = 31;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                31, this_._internal_triggermethod(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string activeStartTime = 32;
          if (cached_has_bits & 0x00002000u) {
            const std::string& _s = this_._internal_activestarttime();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.activeStartTime");
            target = stream->WriteStringMaybeAliased(32, _s, target);
          }

          // optional string activeStopTime = 33;
          if (cached_has_bits & 0x00004000u) {
            const std::string& _s = this_._internal_activestoptime();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.activeStopTime");
            target = stream->WriteStringMaybeAliased(33, _s, target);
          }

          // optional string faGroup = 34;
          if (cached_has_bits & 0x00008000u) {
            const std::string& _s = this_._internal_fagroup();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.faGroup");
            target = stream->WriteStringMaybeAliased(34, _s, target);
          }

          // optional string faMethod = 35;
          if (cached_has_bits & 0x00010000u) {
            const std::string& _s = this_._internal_famethod();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.faMethod");
            target = stream->WriteStringMaybeAliased(35, _s, target);
          }

          // optional string faPercentage = 36;
          if (cached_has_bits & 0x00020000u) {
            const std::string& _s = this_._internal_fapercentage();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.faPercentage");
            target = stream->WriteStringMaybeAliased(36, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional double volatility = 37;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                37, this_._internal_volatility(), target);
          }

          // optional int32 volatilityType = 38;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                38, this_._internal_volatilitytype(), target);
          }

          // optional bool continuousUpdate = 39;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                39, this_._internal_continuousupdate(), target);
          }

          // optional int32 referencePriceType = 40;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                40, this_._internal_referencepricetype(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string deltaNeutralOrderType = 41;
          if (cached_has_bits & 0x00040000u) {
            const std::string& _s = this_._internal_deltaneutralordertype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralOrderType");
            target = stream->WriteStringMaybeAliased(41, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional double deltaNeutralAuxPrice = 42;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                42, this_._internal_deltaneutralauxprice(), target);
          }

          // optional int32 deltaNeutralConId = 43;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                43, this_._internal_deltaneutralconid(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string deltaNeutralOpenClose = 44;
          if (cached_has_bits & 0x00080000u) {
            const std::string& _s = this_._internal_deltaneutralopenclose();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralOpenClose");
            target = stream->WriteStringMaybeAliased(44, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional bool deltaNeutralShortSale = 45;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                45, this_._internal_deltaneutralshortsale(), target);
          }

          // optional int32 deltaNeutralShortSaleSlot = 46;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                46, this_._internal_deltaneutralshortsaleslot(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string deltaNeutralDesignatedLocation = 47;
          if (cached_has_bits & 0x00100000u) {
            const std::string& _s = this_._internal_deltaneutraldesignatedlocation();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralDesignatedLocation");
            target = stream->WriteStringMaybeAliased(47, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional int32 scaleInitLevelSize = 48;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                48, this_._internal_scaleinitlevelsize(), target);
          }

          // optional int32 scaleSubsLevelSize = 49;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                49, this_._internal_scalesubslevelsize(), target);
          }

          // optional double scalePriceIncrement = 50;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                50, this_._internal_scalepriceincrement(), target);
          }

          // optional double scalePriceAdjustValue = 51;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                51, this_._internal_scalepriceadjustvalue(), target);
          }

          // optional int32 scalePriceAdjustInterval = 52;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                52, this_._internal_scalepriceadjustinterval(), target);
          }

          // optional double scaleProfitOffset = 53;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                53, this_._internal_scaleprofitoffset(), target);
          }

          // optional bool scaleAutoReset = 54;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                54, this_._internal_scaleautoreset(), target);
          }

          // optional int32 scaleInitPosition = 55;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                55, this_._internal_scaleinitposition(), target);
          }

          // optional int32 scaleInitFillQty = 56;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                56, this_._internal_scaleinitfillqty(), target);
          }

          // optional bool scaleRandomPercent = 57;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                57, this_._internal_scalerandompercent(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string scaleTable = 58;
          if (cached_has_bits & 0x00200000u) {
            const std::string& _s = this_._internal_scaletable();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.scaleTable");
            target = stream->WriteStringMaybeAliased(58, _s, target);
          }

          // optional string hedgeType = 59;
          if (cached_has_bits & 0x00400000u) {
            const std::string& _s = this_._internal_hedgetype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.hedgeType");
            target = stream->WriteStringMaybeAliased(59, _s, target);
          }

          // optional string hedgeParam = 60;
          if (cached_has_bits & 0x00800000u) {
            const std::string& _s = this_._internal_hedgeparam();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.hedgeParam");
            target = stream->WriteStringMaybeAliased(60, _s, target);
          }

          // optional string algoStrategy = 61;
          if (cached_has_bits & 0x01000000u) {
            const std::string& _s = this_._internal_algostrategy();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoStrategy");
            target = stream->WriteStringMaybeAliased(61, _s, target);
          }

          // map<string, string> algoParams = 62;
          if (!this_._internal_algoparams().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_algoparams();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    62, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoParams");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoParams");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    62, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoParams");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoParams");
              }
            }
          }

          // optional string algoId = 63;
          if (cached_has_bits & 0x02000000u) {
            const std::string& _s = this_._internal_algoid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.algoId");
            target = stream->WriteStringMaybeAliased(63, _s, target);
          }

          // map<string, string> smartComboRoutingParams = 64;
          if (!this_._internal_smartcomboroutingparams().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_smartcomboroutingparams();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    64, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.smartComboRoutingParams");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.smartComboRoutingParams");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    64, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.smartComboRoutingParams");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.smartComboRoutingParams");
              }
            }
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional bool whatIf = 65;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                65, this_._internal_whatif(), target);
          }

          // optional bool transmit = 66;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                66, this_._internal_transmit(), target);
          }

          // optional bool overridePercentageConstraints = 67;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                67, this_._internal_overridepercentageconstraints(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string openClose = 68;
          if (cached_has_bits & 0x04000000u) {
            const std::string& _s = this_._internal_openclose();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.openClose");
            target = stream->WriteStringMaybeAliased(68, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional int32 origin = 69;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                69, this_._internal_origin(), target);
          }

          // optional int32 shortSaleSlot = 70;
          if (cached_has_bits & 0x01000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                70, this_._internal_shortsaleslot(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string designatedLocation = 71;
          if (cached_has_bits & 0x08000000u) {
            const std::string& _s = this_._internal_designatedlocation();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.designatedLocation");
            target = stream->WriteStringMaybeAliased(71, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional int32 exemptCode = 72;
          if (cached_has_bits & 0x02000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                72, this_._internal_exemptcode(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string deltaNeutralSettlingFirm = 73;
          if (cached_has_bits & 0x10000000u) {
            const std::string& _s = this_._internal_deltaneutralsettlingfirm();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralSettlingFirm");
            target = stream->WriteStringMaybeAliased(73, _s, target);
          }

          // optional string deltaNeutralClearingAccount = 74;
          if (cached_has_bits & 0x20000000u) {
            const std::string& _s = this_._internal_deltaneutralclearingaccount();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralClearingAccount");
            target = stream->WriteStringMaybeAliased(74, _s, target);
          }

          // optional string deltaNeutralClearingIntent = 75;
          if (cached_has_bits & 0x40000000u) {
            const std::string& _s = this_._internal_deltaneutralclearingintent();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.deltaNeutralClearingIntent");
            target = stream->WriteStringMaybeAliased(75, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional double discretionaryAmt = 76;
          if (cached_has_bits & 0x04000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                76, this_._internal_discretionaryamt(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool optOutSmartRouting = 77;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                77, this_._internal_optoutsmartrouting(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[2];
          // optional double startingPrice = 78;
          if (cached_has_bits & 0x08000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                78, this_._internal_startingprice(), target);
          }

          // optional double stockRefPrice = 79;
          if (cached_has_bits & 0x10000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                79, this_._internal_stockrefprice(), target);
          }

          // optional double delta = 80;
          if (cached_has_bits & 0x20000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                80, this_._internal_delta(), target);
          }

          // optional double stockRangeLower = 81;
          if (cached_has_bits & 0x40000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                81, this_._internal_stockrangelower(), target);
          }

          // optional double stockRangeUpper = 82;
          if (cached_has_bits & 0x80000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                82, this_._internal_stockrangeupper(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool notHeld = 83;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                83, this_._internal_notheld(), target);
          }

          // map<string, string> orderMiscOptions = 84;
          if (!this_._internal_ordermiscoptions().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_ordermiscoptions();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    84, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderMiscOptions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderMiscOptions");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    84, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderMiscOptions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.orderMiscOptions");
              }
            }
          }

          // optional bool solicited = 85;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                85, this_._internal_solicited(), target);
          }

          // optional bool randomizeSize = 86;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                86, this_._internal_randomizesize(), target);
          }

          // optional bool randomizePrice = 87;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                87, this_._internal_randomizeprice(), target);
          }

          // optional int32 referenceContractId = 88;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                88, this_._internal_referencecontractid(), target);
          }

          // optional double peggedChangeAmount = 89;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                89, this_._internal_peggedchangeamount(), target);
          }

          // optional bool isPeggedChangeAmountDecrease = 90;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                90, this_._internal_ispeggedchangeamountdecrease(), target);
          }

          // optional double referenceChangeAmount = 91;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                91, this_._internal_referencechangeamount(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string referenceExchangeId = 92;
          if (cached_has_bits & 0x80000000u) {
            const std::string& _s = this_._internal_referenceexchangeid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.referenceExchangeId");
            target = stream->WriteStringMaybeAliased(92, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string adjustedOrderType = 93;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_adjustedordertype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.adjustedOrderType");
            target = stream->WriteStringMaybeAliased(93, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional double triggerPrice = 94;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                94, this_._internal_triggerprice(), target);
          }

          // optional double adjustedStopPrice = 95;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                95, this_._internal_adjustedstopprice(), target);
          }

          // optional double adjustedStopLimitPrice = 96;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                96, this_._internal_adjustedstoplimitprice(), target);
          }

          // optional double adjustedTrailingAmount = 97;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                97, this_._internal_adjustedtrailingamount(), target);
          }

          // optional int32 adjustableTrailingUnit = 98;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                98, this_._internal_adjustabletrailingunit(), target);
          }

          // optional double lmtPriceOffset = 99;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                99, this_._internal_lmtpriceoffset(), target);
          }

          // repeated .protobuf.OrderCondition conditions = 100;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_conditions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_conditions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    100, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // optional bool conditionsCancelOrder = 101;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                101, this_._internal_conditionscancelorder(), target);
          }

          // optional bool conditionsIgnoreRth = 102;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                102, this_._internal_conditionsignorerth(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string modelCode = 103;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_modelcode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.modelCode");
            target = stream->WriteStringMaybeAliased(103, _s, target);
          }

          // optional string extOperator = 104;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_extoperator();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.extOperator");
            target = stream->WriteStringMaybeAliased(104, _s, target);
          }

          // optional .protobuf.SoftDollarTier softDollarTier = 105;
          if (cached_has_bits & 0x00008000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                105, *this_._impl_.softdollartier_, this_._impl_.softdollartier_->GetCachedSize(), target,
                stream);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional double cashQty = 106;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                106, this_._internal_cashqty(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string mifid2DecisionMaker = 107;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_mifid2decisionmaker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.mifid2DecisionMaker");
            target = stream->WriteStringMaybeAliased(107, _s, target);
          }

          // optional string mifid2DecisionAlgo = 108;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_mifid2decisionalgo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.mifid2DecisionAlgo");
            target = stream->WriteStringMaybeAliased(108, _s, target);
          }

          // optional string mifid2ExecutionTrader = 109;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_mifid2executiontrader();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.mifid2ExecutionTrader");
            target = stream->WriteStringMaybeAliased(109, _s, target);
          }

          // optional string mifid2ExecutionAlgo = 110;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_mifid2executionalgo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.mifid2ExecutionAlgo");
            target = stream->WriteStringMaybeAliased(110, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool dontUseAutoPriceForHedge = 111;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                111, this_._internal_dontuseautopriceforhedge(), target);
          }

          // optional bool isOmsContainer = 112;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                112, this_._internal_isomscontainer(), target);
          }

          // optional bool discretionaryUpToLimitPrice = 113;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                113, this_._internal_discretionaryuptolimitprice(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string autoCancelDate = 114;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_autocanceldate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.autoCancelDate");
            target = stream->WriteStringMaybeAliased(114, _s, target);
          }

          // optional string filledQuantity = 115;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_filledquantity();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.filledQuantity");
            target = stream->WriteStringMaybeAliased(115, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional int32 refFuturesConId = 116;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                116, this_._internal_reffuturesconid(), target);
          }

          // optional bool autoCancelParent = 117;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                117, this_._internal_autocancelparent(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string shareholder = 118;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_shareholder();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.shareholder");
            target = stream->WriteStringMaybeAliased(118, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool imbalanceOnly = 119;
          if (cached_has_bits & 0x08000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                119, this_._internal_imbalanceonly(), target);
          }

          // optional bool routeMarketableToBbo = 120;
          if (cached_has_bits & 0x10000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                120, this_._internal_routemarketabletobbo(), target);
          }

          // optional int64 parentPermId = 121;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                121, this_._internal_parentpermid(), target);
          }

          // optional int32 usePriceMgmtAlgo = 122;
          if (cached_has_bits & 0x01000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                122, this_._internal_usepricemgmtalgo(), target);
          }

          // optional int32 duration = 123;
          if (cached_has_bits & 0x02000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                123, this_._internal_duration(), target);
          }

          // optional int32 postToAts = 124;
          if (cached_has_bits & 0x04000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                124, this_._internal_posttoats(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string advancedErrorOverride = 125;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_advancederroroverride();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.advancedErrorOverride");
            target = stream->WriteStringMaybeAliased(125, _s, target);
          }

          // optional string manualOrderTime = 126;
          if (cached_has_bits & 0x00000800u) {
            const std::string& _s = this_._internal_manualordertime();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.manualOrderTime");
            target = stream->WriteStringMaybeAliased(126, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional int32 minTradeQty = 127;
          if (cached_has_bits & 0x80000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                127, this_._internal_mintradeqty(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[4];
          // optional int32 minCompeteSize = 128;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                128, this_._internal_mincompetesize(), target);
          }

          // optional double competeAgainstBestOffset = 129;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                129, this_._internal_competeagainstbestoffset(), target);
          }

          // optional double midOffsetAtWhole = 130;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                130, this_._internal_midoffsetatwhole(), target);
          }

          // optional double midOffsetAtHalf = 131;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                131, this_._internal_midoffsetathalf(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string customerAccount = 132;
          if (cached_has_bits & 0x00001000u) {
            const std::string& _s = this_._internal_customeraccount();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.customerAccount");
            target = stream->WriteStringMaybeAliased(132, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool professionalCustomer = 133;
          if (cached_has_bits & 0x20000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                133, this_._internal_professionalcustomer(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string bondAccruedInterest = 134;
          if (cached_has_bits & 0x00002000u) {
            const std::string& _s = this_._internal_bondaccruedinterest();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.bondAccruedInterest");
            target = stream->WriteStringMaybeAliased(134, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[3];
          // optional bool includeOvernight = 135;
          if (cached_has_bits & 0x40000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                135, this_._internal_includeovernight(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[4];
          // optional int32 manualOrderIndicator = 136;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                136, this_._internal_manualorderindicator(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string submitter = 137;
          if (cached_has_bits & 0x00004000u) {
            const std::string& _s = this_._internal_submitter();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Order.submitter");
            target = stream->WriteStringMaybeAliased(137, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf.Order)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Order::ByteSizeLong(const MessageLite& base) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Order::ByteSizeLong() const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf.Order)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> algoParams = 62;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_algoparams_size());
              for (const auto& entry : this_._internal_algoparams()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> smartComboRoutingParams = 64;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_smartcomboroutingparams_size());
              for (const auto& entry : this_._internal_smartcomboroutingparams()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> orderMiscOptions = 84;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_ordermiscoptions_size());
              for (const auto& entry : this_._internal_ordermiscoptions()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .protobuf.OrderCondition conditions = 100;
            {
              total_size += 2UL * this_._internal_conditions_size();
              for (const auto& msg : this_._internal_conditions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string action = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action());
            }
            // optional string totalQuantity = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_totalquantity());
            }
            // optional string orderType = 8;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ordertype());
            }
            // optional string tif = 11;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tif());
            }
            // optional string account = 12;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_account());
            }
            // optional string settlingFirm = 13;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_settlingfirm());
            }
            // optional string clearingAccount = 14;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_clearingaccount());
            }
            // optional string clearingIntent = 15;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_clearingintent());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string goodAfterTime = 25;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_goodaftertime());
            }
            // optional string goodTillDate = 26;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_goodtilldate());
            }
            // optional string ocaGroup = 27;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ocagroup());
            }
            // optional string orderRef = 28;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_orderref());
            }
            // optional string rule80A = 29;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rule80a());
            }
            // optional string activeStartTime = 32;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activestarttime());
            }
            // optional string activeStopTime = 33;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activestoptime());
            }
            // optional string faGroup = 34;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fagroup());
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional string faMethod = 35;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_famethod());
            }
            // optional string faPercentage = 36;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fapercentage());
            }
            // optional string deltaNeutralOrderType = 41;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutralordertype());
            }
            // optional string deltaNeutralOpenClose = 44;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutralopenclose());
            }
            // optional string deltaNeutralDesignatedLocation = 47;
            if (cached_has_bits & 0x00100000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutraldesignatedlocation());
            }
            // optional string scaleTable = 58;
            if (cached_has_bits & 0x00200000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_scaletable());
            }
            // optional string hedgeType = 59;
            if (cached_has_bits & 0x00400000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hedgetype());
            }
            // optional string hedgeParam = 60;
            if (cached_has_bits & 0x00800000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hedgeparam());
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional string algoStrategy = 61;
            if (cached_has_bits & 0x01000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_algostrategy());
            }
            // optional string algoId = 63;
            if (cached_has_bits & 0x02000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_algoid());
            }
            // optional string openClose = 68;
            if (cached_has_bits & 0x04000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_openclose());
            }
            // optional string designatedLocation = 71;
            if (cached_has_bits & 0x08000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_designatedlocation());
            }
            // optional string deltaNeutralSettlingFirm = 73;
            if (cached_has_bits & 0x10000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutralsettlingfirm());
            }
            // optional string deltaNeutralClearingAccount = 74;
            if (cached_has_bits & 0x20000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutralclearingaccount());
            }
            // optional string deltaNeutralClearingIntent = 75;
            if (cached_has_bits & 0x40000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_deltaneutralclearingintent());
            }
            // optional string referenceExchangeId = 92;
            if (cached_has_bits & 0x80000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_referenceexchangeid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[1];
          if (cached_has_bits & 0x000000ffu) {
            // optional string adjustedOrderType = 93;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_adjustedordertype());
            }
            // optional string modelCode = 103;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_modelcode());
            }
            // optional string extOperator = 104;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_extoperator());
            }
            // optional string mifid2DecisionMaker = 107;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mifid2decisionmaker());
            }
            // optional string mifid2DecisionAlgo = 108;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mifid2decisionalgo());
            }
            // optional string mifid2ExecutionTrader = 109;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mifid2executiontrader());
            }
            // optional string mifid2ExecutionAlgo = 110;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mifid2executionalgo());
            }
            // optional string autoCancelDate = 114;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_autocanceldate());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string filledQuantity = 115;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_filledquantity());
            }
            // optional string shareholder = 118;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_shareholder());
            }
            // optional string advancedErrorOverride = 125;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_advancederroroverride());
            }
            // optional string manualOrderTime = 126;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_manualordertime());
            }
            // optional string customerAccount = 132;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_customeraccount());
            }
            // optional string bondAccruedInterest = 134;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bondaccruedinterest());
            }
            // optional string submitter = 137;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_submitter());
            }
            // optional .protobuf.SoftDollarTier softDollarTier = 105;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.softdollartier_);
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional int32 clientId = 1;
            if (cached_has_bits & 0x00010000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_clientid());
            }
            // optional int32 orderId = 2;
            if (cached_has_bits & 0x00020000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_orderid());
            }
            // optional int64 permId = 3;
            if (cached_has_bits & 0x00040000u) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_permid());
            }
            // optional int32 parentId = 4;
            if (cached_has_bits & 0x00080000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_parentid());
            }
            // optional int32 displaySize = 7;
            if (cached_has_bits & 0x00100000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_displaysize());
            }
            // optional double lmtPrice = 9;
            if (cached_has_bits & 0x00200000u) {
              total_size += 9;
            }
            // optional double auxPrice = 10;
            if (cached_has_bits & 0x00400000u) {
              total_size += 9;
            }
            // optional bool allOrNone = 16;
            if (cached_has_bits & 0x00800000u) {
              total_size += 3;
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional bool blockOrder = 17;
            if (cached_has_bits & 0x01000000u) {
              total_size += 3;
            }
            // optional bool hidden = 18;
            if (cached_has_bits & 0x02000000u) {
              total_size += 3;
            }
            // optional bool outsideRth = 19;
            if (cached_has_bits & 0x04000000u) {
              total_size += 3;
            }
            // optional int32 minQty = 24;
            if (cached_has_bits & 0x08000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_minqty());
            }
            // optional double percentOffset = 21;
            if (cached_has_bits & 0x10000000u) {
              total_size += 10;
            }
            // optional double trailingPercent = 22;
            if (cached_has_bits & 0x20000000u) {
              total_size += 10;
            }
            // optional double trailStopPrice = 23;
            if (cached_has_bits & 0x40000000u) {
              total_size += 10;
            }
            // optional int32 ocaType = 30;
            if (cached_has_bits & 0x80000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_ocatype());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[2];
          if (cached_has_bits & 0x000000ffu) {
            // optional int32 triggerMethod = 31;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_triggermethod());
            }
            // optional double volatility = 37;
            if (cached_has_bits & 0x00000002u) {
              total_size += 10;
            }
            // optional int32 volatilityType = 38;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_volatilitytype());
            }
            // optional bool sweepToFill = 20;
            if (cached_has_bits & 0x00000008u) {
              total_size += 3;
            }
            // optional bool continuousUpdate = 39;
            if (cached_has_bits & 0x00000010u) {
              total_size += 3;
            }
            // optional bool deltaNeutralShortSale = 45;
            if (cached_has_bits & 0x00000020u) {
              total_size += 3;
            }
            // optional bool scaleAutoReset = 54;
            if (cached_has_bits & 0x00000040u) {
              total_size += 3;
            }
            // optional int32 referencePriceType = 40;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_referencepricetype());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional int32 deltaNeutralConId = 43;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_deltaneutralconid());
            }
            // optional double deltaNeutralAuxPrice = 42;
            if (cached_has_bits & 0x00000200u) {
              total_size += 10;
            }
            // optional int32 deltaNeutralShortSaleSlot = 46;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_deltaneutralshortsaleslot());
            }
            // optional int32 scaleInitLevelSize = 48;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_scaleinitlevelsize());
            }
            // optional double scalePriceIncrement = 50;
            if (cached_has_bits & 0x00001000u) {
              total_size += 10;
            }
            // optional int32 scaleSubsLevelSize = 49;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_scalesubslevelsize());
            }
            // optional int32 scalePriceAdjustInterval = 52;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_scalepriceadjustinterval());
            }
            // optional double scalePriceAdjustValue = 51;
            if (cached_has_bits & 0x00008000u) {
              total_size += 10;
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional double scaleProfitOffset = 53;
            if (cached_has_bits & 0x00010000u) {
              total_size += 10;
            }
            // optional int32 scaleInitPosition = 55;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_scaleinitposition());
            }
            // optional int32 scaleInitFillQty = 56;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_scaleinitfillqty());
            }
            // optional bool scaleRandomPercent = 57;
            if (cached_has_bits & 0x00080000u) {
              total_size += 3;
            }
            // optional bool whatIf = 65;
            if (cached_has_bits & 0x00100000u) {
              total_size += 3;
            }
            // optional bool transmit = 66;
            if (cached_has_bits & 0x00200000u) {
              total_size += 3;
            }
            // optional bool overridePercentageConstraints = 67;
            if (cached_has_bits & 0x00400000u) {
              total_size += 3;
            }
            // optional int32 origin = 69;
            if (cached_has_bits & 0x00800000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_origin());
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional int32 shortSaleSlot = 70;
            if (cached_has_bits & 0x01000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_shortsaleslot());
            }
            // optional int32 exemptCode = 72;
            if (cached_has_bits & 0x02000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_exemptcode());
            }
            // optional double discretionaryAmt = 76;
            if (cached_has_bits & 0x04000000u) {
              total_size += 10;
            }
            // optional double startingPrice = 78;
            if (cached_has_bits & 0x08000000u) {
              total_size += 10;
            }
            // optional double stockRefPrice = 79;
            if (cached_has_bits & 0x10000000u) {
              total_size += 10;
            }
            // optional double delta = 80;
            if (cached_has_bits & 0x20000000u) {
              total_size += 10;
            }
            // optional double stockRangeLower = 81;
            if (cached_has_bits & 0x40000000u) {
              total_size += 10;
            }
            // optional double stockRangeUpper = 82;
            if (cached_has_bits & 0x80000000u) {
              total_size += 10;
            }
          }
          cached_has_bits = this_._impl_._has_bits_[3];
          if (cached_has_bits & 0x000000ffu) {
            // optional bool optOutSmartRouting = 77;
            if (cached_has_bits & 0x00000001u) {
              total_size += 3;
            }
            // optional bool notHeld = 83;
            if (cached_has_bits & 0x00000002u) {
              total_size += 3;
            }
            // optional bool solicited = 85;
            if (cached_has_bits & 0x00000004u) {
              total_size += 3;
            }
            // optional bool randomizeSize = 86;
            if (cached_has_bits & 0x00000008u) {
              total_size += 3;
            }
            // optional int32 referenceContractId = 88;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_referencecontractid());
            }
            // optional double peggedChangeAmount = 89;
            if (cached_has_bits & 0x00000020u) {
              total_size += 10;
            }
            // optional double referenceChangeAmount = 91;
            if (cached_has_bits & 0x00000040u) {
              total_size += 10;
            }
            // optional double triggerPrice = 94;
            if (cached_has_bits & 0x00000080u) {
              total_size += 10;
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional double adjustedStopPrice = 95;
            if (cached_has_bits & 0x00000100u) {
              total_size += 10;
            }
            // optional bool randomizePrice = 87;
            if (cached_has_bits & 0x00000200u) {
              total_size += 3;
            }
            // optional bool isPeggedChangeAmountDecrease = 90;
            if (cached_has_bits & 0x00000400u) {
              total_size += 3;
            }
            // optional bool conditionsCancelOrder = 101;
            if (cached_has_bits & 0x00000800u) {
              total_size += 3;
            }
            // optional bool conditionsIgnoreRth = 102;
            if (cached_has_bits & 0x00001000u) {
              total_size += 3;
            }
            // optional int32 adjustableTrailingUnit = 98;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_adjustabletrailingunit());
            }
            // optional double adjustedStopLimitPrice = 96;
            if (cached_has_bits & 0x00004000u) {
              total_size += 10;
            }
            // optional double adjustedTrailingAmount = 97;
            if (cached_has_bits & 0x00008000u) {
              total_size += 10;
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional double lmtPriceOffset = 99;
            if (cached_has_bits & 0x00010000u) {
              total_size += 10;
            }
            // optional double cashQty = 106;
            if (cached_has_bits & 0x00020000u) {
              total_size += 10;
            }
            // optional bool dontUseAutoPriceForHedge = 111;
            if (cached_has_bits & 0x00040000u) {
              total_size += 3;
            }
            // optional bool isOmsContainer = 112;
            if (cached_has_bits & 0x00080000u) {
              total_size += 3;
            }
            // optional bool discretionaryUpToLimitPrice = 113;
            if (cached_has_bits & 0x00100000u) {
              total_size += 3;
            }
            // optional bool autoCancelParent = 117;
            if (cached_has_bits & 0x00200000u) {
              total_size += 3;
            }
            // optional int32 refFuturesConId = 116;
            if (cached_has_bits & 0x00400000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_reffuturesconid());
            }
            // optional int64 parentPermId = 121;
            if (cached_has_bits & 0x00800000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_parentpermid());
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional int32 usePriceMgmtAlgo = 122;
            if (cached_has_bits & 0x01000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_usepricemgmtalgo());
            }
            // optional int32 duration = 123;
            if (cached_has_bits & 0x02000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_duration());
            }
            // optional int32 postToAts = 124;
            if (cached_has_bits & 0x04000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_posttoats());
            }
            // optional bool imbalanceOnly = 119;
            if (cached_has_bits & 0x08000000u) {
              total_size += 3;
            }
            // optional bool routeMarketableToBbo = 120;
            if (cached_has_bits & 0x10000000u) {
              total_size += 3;
            }
            // optional bool professionalCustomer = 133;
            if (cached_has_bits & 0x20000000u) {
              total_size += 3;
            }
            // optional bool includeOvernight = 135;
            if (cached_has_bits & 0x40000000u) {
              total_size += 3;
            }
            // optional int32 minTradeQty = 127;
            if (cached_has_bits & 0x80000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_mintradeqty());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[4];
          if (cached_has_bits & 0x0000001fu) {
            // optional int32 minCompeteSize = 128;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_mincompetesize());
            }
            // optional double competeAgainstBestOffset = 129;
            if (cached_has_bits & 0x00000002u) {
              total_size += 10;
            }
            // optional double midOffsetAtWhole = 130;
            if (cached_has_bits & 0x00000004u) {
              total_size += 10;
            }
            // optional double midOffsetAtHalf = 131;
            if (cached_has_bits & 0x00000008u) {
              total_size += 10;
            }
            // optional int32 manualOrderIndicator = 136;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_manualorderindicator());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Order::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.algoparams_.MergeFrom(from._impl_.algoparams_);
  _this->_impl_.smartcomboroutingparams_.MergeFrom(from._impl_.smartcomboroutingparams_);
  _this->_impl_.ordermiscoptions_.MergeFrom(from._impl_.ordermiscoptions_);
  _this->_internal_mutable_conditions()->MergeFrom(
      from._internal_conditions());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_totalquantity(from._internal_totalquantity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ordertype(from._internal_ordertype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_tif(from._internal_tif());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_account(from._internal_account());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_settlingfirm(from._internal_settlingfirm());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_clearingaccount(from._internal_clearingaccount());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_clearingintent(from._internal_clearingintent());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_goodaftertime(from._internal_goodaftertime());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_goodtilldate(from._internal_goodtilldate());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_ocagroup(from._internal_ocagroup());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_orderref(from._internal_orderref());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_rule80a(from._internal_rule80a());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_activestarttime(from._internal_activestarttime());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_activestoptime(from._internal_activestoptime());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_fagroup(from._internal_fagroup());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_set_famethod(from._internal_famethod());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_set_fapercentage(from._internal_fapercentage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_set_deltaneutralordertype(from._internal_deltaneutralordertype());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_set_deltaneutralopenclose(from._internal_deltaneutralopenclose());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_set_deltaneutraldesignatedlocation(from._internal_deltaneutraldesignatedlocation());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_set_scaletable(from._internal_scaletable());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_set_hedgetype(from._internal_hedgetype());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_set_hedgeparam(from._internal_hedgeparam());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_set_algostrategy(from._internal_algostrategy());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_set_algoid(from._internal_algoid());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_set_openclose(from._internal_openclose());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_set_designatedlocation(from._internal_designatedlocation());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_set_deltaneutralsettlingfirm(from._internal_deltaneutralsettlingfirm());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_set_deltaneutralclearingaccount(from._internal_deltaneutralclearingaccount());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_set_deltaneutralclearingintent(from._internal_deltaneutralclearingintent());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_set_referenceexchangeid(from._internal_referenceexchangeid());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_adjustedordertype(from._internal_adjustedordertype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_modelcode(from._internal_modelcode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_extoperator(from._internal_extoperator());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mifid2decisionmaker(from._internal_mifid2decisionmaker());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mifid2decisionalgo(from._internal_mifid2decisionalgo());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_mifid2executiontrader(from._internal_mifid2executiontrader());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_mifid2executionalgo(from._internal_mifid2executionalgo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_autocanceldate(from._internal_autocanceldate());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_filledquantity(from._internal_filledquantity());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_shareholder(from._internal_shareholder());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_advancederroroverride(from._internal_advancederroroverride());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_manualordertime(from._internal_manualordertime());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_customeraccount(from._internal_customeraccount());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_bondaccruedinterest(from._internal_bondaccruedinterest());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_submitter(from._internal_submitter());
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(from._impl_.softdollartier_ != nullptr);
      if (_this->_impl_.softdollartier_ == nullptr) {
        _this->_impl_.softdollartier_ =
            ::google::protobuf::Message::CopyConstruct<::protobuf::SoftDollarTier>(arena, *from._impl_.softdollartier_);
      } else {
        _this->_impl_.softdollartier_->MergeFrom(*from._impl_.softdollartier_);
      }
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.clientid_ = from._impl_.clientid_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.orderid_ = from._impl_.orderid_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.permid_ = from._impl_.permid_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.parentid_ = from._impl_.parentid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.displaysize_ = from._impl_.displaysize_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.lmtprice_ = from._impl_.lmtprice_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.auxprice_ = from._impl_.auxprice_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.allornone_ = from._impl_.allornone_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.blockorder_ = from._impl_.blockorder_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.outsiderth_ = from._impl_.outsiderth_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.minqty_ = from._impl_.minqty_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.percentoffset_ = from._impl_.percentoffset_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.trailingpercent_ = from._impl_.trailingpercent_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.trailstopprice_ = from._impl_.trailstopprice_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.ocatype_ = from._impl_.ocatype_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.triggermethod_ = from._impl_.triggermethod_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.volatility_ = from._impl_.volatility_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.volatilitytype_ = from._impl_.volatilitytype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sweeptofill_ = from._impl_.sweeptofill_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.continuousupdate_ = from._impl_.continuousupdate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.deltaneutralshortsale_ = from._impl_.deltaneutralshortsale_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scaleautoreset_ = from._impl_.scaleautoreset_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.referencepricetype_ = from._impl_.referencepricetype_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.deltaneutralconid_ = from._impl_.deltaneutralconid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.deltaneutralauxprice_ = from._impl_.deltaneutralauxprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.deltaneutralshortsaleslot_ = from._impl_.deltaneutralshortsaleslot_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.scaleinitlevelsize_ = from._impl_.scaleinitlevelsize_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.scalepriceincrement_ = from._impl_.scalepriceincrement_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.scalesubslevelsize_ = from._impl_.scalesubslevelsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.scalepriceadjustinterval_ = from._impl_.scalepriceadjustinterval_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.scalepriceadjustvalue_ = from._impl_.scalepriceadjustvalue_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.scaleprofitoffset_ = from._impl_.scaleprofitoffset_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.scaleinitposition_ = from._impl_.scaleinitposition_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.scaleinitfillqty_ = from._impl_.scaleinitfillqty_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.scalerandompercent_ = from._impl_.scalerandompercent_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.whatif_ = from._impl_.whatif_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.transmit_ = from._impl_.transmit_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.overridepercentageconstraints_ = from._impl_.overridepercentageconstraints_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.shortsaleslot_ = from._impl_.shortsaleslot_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.exemptcode_ = from._impl_.exemptcode_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.discretionaryamt_ = from._impl_.discretionaryamt_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.startingprice_ = from._impl_.startingprice_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.stockrefprice_ = from._impl_.stockrefprice_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.stockrangelower_ = from._impl_.stockrangelower_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.stockrangeupper_ = from._impl_.stockrangeupper_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.optoutsmartrouting_ = from._impl_.optoutsmartrouting_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.notheld_ = from._impl_.notheld_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.solicited_ = from._impl_.solicited_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.randomizesize_ = from._impl_.randomizesize_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.referencecontractid_ = from._impl_.referencecontractid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.peggedchangeamount_ = from._impl_.peggedchangeamount_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.referencechangeamount_ = from._impl_.referencechangeamount_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.triggerprice_ = from._impl_.triggerprice_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.adjustedstopprice_ = from._impl_.adjustedstopprice_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.randomizeprice_ = from._impl_.randomizeprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ispeggedchangeamountdecrease_ = from._impl_.ispeggedchangeamountdecrease_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.conditionscancelorder_ = from._impl_.conditionscancelorder_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.conditionsignorerth_ = from._impl_.conditionsignorerth_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.adjustabletrailingunit_ = from._impl_.adjustabletrailingunit_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.adjustedstoplimitprice_ = from._impl_.adjustedstoplimitprice_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.adjustedtrailingamount_ = from._impl_.adjustedtrailingamount_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.lmtpriceoffset_ = from._impl_.lmtpriceoffset_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.cashqty_ = from._impl_.cashqty_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.dontuseautopriceforhedge_ = from._impl_.dontuseautopriceforhedge_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.isomscontainer_ = from._impl_.isomscontainer_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.discretionaryuptolimitprice_ = from._impl_.discretionaryuptolimitprice_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.autocancelparent_ = from._impl_.autocancelparent_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.reffuturesconid_ = from._impl_.reffuturesconid_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.parentpermid_ = from._impl_.parentpermid_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.usepricemgmtalgo_ = from._impl_.usepricemgmtalgo_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.posttoats_ = from._impl_.posttoats_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.imbalanceonly_ = from._impl_.imbalanceonly_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.routemarketabletobbo_ = from._impl_.routemarketabletobbo_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.professionalcustomer_ = from._impl_.professionalcustomer_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.includeovernight_ = from._impl_.includeovernight_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.mintradeqty_ = from._impl_.mintradeqty_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[4];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mincompetesize_ = from._impl_.mincompetesize_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.competeagainstbestoffset_ = from._impl_.competeagainstbestoffset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.midoffsetatwhole_ = from._impl_.midoffsetatwhole_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.midoffsetathalf_ = from._impl_.midoffsetathalf_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.manualorderindicator_ = from._impl_.manualorderindicator_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Order::InternalSwap(Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  swap(_impl_._has_bits_[4], other->_impl_._has_bits_[4]);
  _impl_.algoparams_.InternalSwap(&other->_impl_.algoparams_);
  _impl_.smartcomboroutingparams_.InternalSwap(&other->_impl_.smartcomboroutingparams_);
  _impl_.ordermiscoptions_.InternalSwap(&other->_impl_.ordermiscoptions_);
  _impl_.conditions_.InternalSwap(&other->_impl_.conditions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_, &other->_impl_.action_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.totalquantity_, &other->_impl_.totalquantity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ordertype_, &other->_impl_.ordertype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tif_, &other->_impl_.tif_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, &other->_impl_.account_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlingfirm_, &other->_impl_.settlingfirm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clearingaccount_, &other->_impl_.clearingaccount_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clearingintent_, &other->_impl_.clearingintent_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.goodaftertime_, &other->_impl_.goodaftertime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.goodtilldate_, &other->_impl_.goodtilldate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ocagroup_, &other->_impl_.ocagroup_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orderref_, &other->_impl_.orderref_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule80a_, &other->_impl_.rule80a_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activestarttime_, &other->_impl_.activestarttime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activestoptime_, &other->_impl_.activestoptime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fagroup_, &other->_impl_.fagroup_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.famethod_, &other->_impl_.famethod_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fapercentage_, &other->_impl_.fapercentage_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutralordertype_, &other->_impl_.deltaneutralordertype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutralopenclose_, &other->_impl_.deltaneutralopenclose_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutraldesignatedlocation_, &other->_impl_.deltaneutraldesignatedlocation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scaletable_, &other->_impl_.scaletable_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hedgetype_, &other->_impl_.hedgetype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hedgeparam_, &other->_impl_.hedgeparam_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algostrategy_, &other->_impl_.algostrategy_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algoid_, &other->_impl_.algoid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openclose_, &other->_impl_.openclose_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.designatedlocation_, &other->_impl_.designatedlocation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutralsettlingfirm_, &other->_impl_.deltaneutralsettlingfirm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutralclearingaccount_, &other->_impl_.deltaneutralclearingaccount_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deltaneutralclearingintent_, &other->_impl_.deltaneutralclearingintent_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.referenceexchangeid_, &other->_impl_.referenceexchangeid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.adjustedordertype_, &other->_impl_.adjustedordertype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modelcode_, &other->_impl_.modelcode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extoperator_, &other->_impl_.extoperator_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mifid2decisionmaker_, &other->_impl_.mifid2decisionmaker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mifid2decisionalgo_, &other->_impl_.mifid2decisionalgo_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mifid2executiontrader_, &other->_impl_.mifid2executiontrader_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mifid2executionalgo_, &other->_impl_.mifid2executionalgo_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.autocanceldate_, &other->_impl_.autocanceldate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filledquantity_, &other->_impl_.filledquantity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shareholder_, &other->_impl_.shareholder_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.advancederroroverride_, &other->_impl_.advancederroroverride_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.manualordertime_, &other->_impl_.manualordertime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customeraccount_, &other->_impl_.customeraccount_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bondaccruedinterest_, &other->_impl_.bondaccruedinterest_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.submitter_, &other->_impl_.submitter_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.manualorderindicator_)
      + sizeof(Order::_impl_.manualorderindicator_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.softdollartier_)>(
          reinterpret_cast<char*>(&_impl_.softdollartier_),
          reinterpret_cast<char*>(&other->_impl_.softdollartier_));
}

::google::protobuf::Metadata Order::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Order_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
