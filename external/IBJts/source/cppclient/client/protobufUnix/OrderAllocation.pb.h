// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: OrderAllocation.proto
// Protobuf C++ Version: 5.29.3

#ifndef OrderAllocation_2eproto_2epb_2eh
#define OrderAllocation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_OrderAllocation_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_OrderAllocation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_OrderAllocation_2eproto;
namespace protobuf {
class OrderAllocation;
struct OrderAllocationDefaultTypeInternal;
extern OrderAllocationDefaultTypeInternal _OrderAllocation_default_instance_;
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class OrderAllocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.OrderAllocation) */ {
 public:
  inline OrderAllocation() : OrderAllocation(nullptr) {}
  ~OrderAllocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderAllocation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderAllocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderAllocation(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderAllocation(const OrderAllocation& from) : OrderAllocation(nullptr, from) {}
  inline OrderAllocation(OrderAllocation&& from) noexcept
      : OrderAllocation(nullptr, std::move(from)) {}
  inline OrderAllocation& operator=(const OrderAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAllocation& operator=(OrderAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderAllocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderAllocation* internal_default_instance() {
    return reinterpret_cast<const OrderAllocation*>(
        &_OrderAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OrderAllocation& a, OrderAllocation& b) { a.Swap(&b); }
  inline void Swap(OrderAllocation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAllocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderAllocation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderAllocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderAllocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderAllocation& from) { OrderAllocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderAllocation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.OrderAllocation"; }

 protected:
  explicit OrderAllocation(::google::protobuf::Arena* arena);
  OrderAllocation(::google::protobuf::Arena* arena, const OrderAllocation& from);
  OrderAllocation(::google::protobuf::Arena* arena, OrderAllocation&& from) noexcept
      : OrderAllocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccountFieldNumber = 1,
    kPositionFieldNumber = 2,
    kPositionDesiredFieldNumber = 3,
    kPositionAfterFieldNumber = 4,
    kDesiredAllocQtyFieldNumber = 5,
    kAllowedAllocQtyFieldNumber = 6,
    kIsMonetaryFieldNumber = 7,
  };
  // optional string account = 1;
  bool has_account() const;
  void clear_account() ;
  const std::string& account() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* value);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // optional string position = 2;
  bool has_position() const;
  void clear_position() ;
  const std::string& position() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position(Arg_&& arg, Args_... args);
  std::string* mutable_position();
  PROTOBUF_NODISCARD std::string* release_position();
  void set_allocated_position(std::string* value);

  private:
  const std::string& _internal_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position(
      const std::string& value);
  std::string* _internal_mutable_position();

  public:
  // optional string positionDesired = 3;
  bool has_positiondesired() const;
  void clear_positiondesired() ;
  const std::string& positiondesired() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positiondesired(Arg_&& arg, Args_... args);
  std::string* mutable_positiondesired();
  PROTOBUF_NODISCARD std::string* release_positiondesired();
  void set_allocated_positiondesired(std::string* value);

  private:
  const std::string& _internal_positiondesired() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positiondesired(
      const std::string& value);
  std::string* _internal_mutable_positiondesired();

  public:
  // optional string positionAfter = 4;
  bool has_positionafter() const;
  void clear_positionafter() ;
  const std::string& positionafter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positionafter(Arg_&& arg, Args_... args);
  std::string* mutable_positionafter();
  PROTOBUF_NODISCARD std::string* release_positionafter();
  void set_allocated_positionafter(std::string* value);

  private:
  const std::string& _internal_positionafter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positionafter(
      const std::string& value);
  std::string* _internal_mutable_positionafter();

  public:
  // optional string desiredAllocQty = 5;
  bool has_desiredallocqty() const;
  void clear_desiredallocqty() ;
  const std::string& desiredallocqty() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desiredallocqty(Arg_&& arg, Args_... args);
  std::string* mutable_desiredallocqty();
  PROTOBUF_NODISCARD std::string* release_desiredallocqty();
  void set_allocated_desiredallocqty(std::string* value);

  private:
  const std::string& _internal_desiredallocqty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desiredallocqty(
      const std::string& value);
  std::string* _internal_mutable_desiredallocqty();

  public:
  // optional string allowedAllocQty = 6;
  bool has_allowedallocqty() const;
  void clear_allowedallocqty() ;
  const std::string& allowedallocqty() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allowedallocqty(Arg_&& arg, Args_... args);
  std::string* mutable_allowedallocqty();
  PROTOBUF_NODISCARD std::string* release_allowedallocqty();
  void set_allocated_allowedallocqty(std::string* value);

  private:
  const std::string& _internal_allowedallocqty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allowedallocqty(
      const std::string& value);
  std::string* _internal_mutable_allowedallocqty();

  public:
  // optional bool isMonetary = 7;
  bool has_ismonetary() const;
  void clear_ismonetary() ;
  bool ismonetary() const;
  void set_ismonetary(bool value);

  private:
  bool _internal_ismonetary() const;
  void _internal_set_ismonetary(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.OrderAllocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      106, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderAllocation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr account_;
    ::google::protobuf::internal::ArenaStringPtr position_;
    ::google::protobuf::internal::ArenaStringPtr positiondesired_;
    ::google::protobuf::internal::ArenaStringPtr positionafter_;
    ::google::protobuf::internal::ArenaStringPtr desiredallocqty_;
    ::google::protobuf::internal::ArenaStringPtr allowedallocqty_;
    bool ismonetary_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OrderAllocation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderAllocation

// optional string account = 1;
inline bool OrderAllocation::has_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderAllocation::clear_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderAllocation::account() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_account(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.account)
}
inline std::string* OrderAllocation::mutable_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.account)
  return _s;
}
inline const std::string& OrderAllocation::_internal_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_.Get();
}
inline void OrderAllocation::_internal_set_account(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.account_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.account)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.account_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.account_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_account(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.account_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.account)
}

// optional string position = 2;
inline bool OrderAllocation::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OrderAllocation::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderAllocation::position() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.position)
  return _internal_position();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_position(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.position_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.position)
}
inline std::string* OrderAllocation::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.position)
  return _s;
}
inline const std::string& OrderAllocation::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_.Get();
}
inline void OrderAllocation::_internal_set_position(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.position_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.position_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.position)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.position_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.position_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_position(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.position_.IsDefault()) {
    _impl_.position_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.position)
}

// optional string positionDesired = 3;
inline bool OrderAllocation::has_positiondesired() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OrderAllocation::clear_positiondesired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positiondesired_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderAllocation::positiondesired() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.positionDesired)
  return _internal_positiondesired();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_positiondesired(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.positiondesired_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.positionDesired)
}
inline std::string* OrderAllocation::mutable_positiondesired() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positiondesired();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.positionDesired)
  return _s;
}
inline const std::string& OrderAllocation::_internal_positiondesired() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positiondesired_.Get();
}
inline void OrderAllocation::_internal_set_positiondesired(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.positiondesired_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_positiondesired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.positiondesired_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_positiondesired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.positionDesired)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.positiondesired_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.positiondesired_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_positiondesired(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.positiondesired_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.positiondesired_.IsDefault()) {
    _impl_.positiondesired_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.positionDesired)
}

// optional string positionAfter = 4;
inline bool OrderAllocation::has_positionafter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void OrderAllocation::clear_positionafter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionafter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderAllocation::positionafter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.positionAfter)
  return _internal_positionafter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_positionafter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.positionafter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.positionAfter)
}
inline std::string* OrderAllocation::mutable_positionafter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positionafter();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.positionAfter)
  return _s;
}
inline const std::string& OrderAllocation::_internal_positionafter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionafter_.Get();
}
inline void OrderAllocation::_internal_set_positionafter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.positionafter_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_positionafter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.positionafter_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_positionafter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.positionAfter)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.positionafter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.positionafter_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_positionafter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.positionafter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.positionafter_.IsDefault()) {
    _impl_.positionafter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.positionAfter)
}

// optional string desiredAllocQty = 5;
inline bool OrderAllocation::has_desiredallocqty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void OrderAllocation::clear_desiredallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desiredallocqty_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OrderAllocation::desiredallocqty() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.desiredAllocQty)
  return _internal_desiredallocqty();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_desiredallocqty(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.desiredallocqty_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.desiredAllocQty)
}
inline std::string* OrderAllocation::mutable_desiredallocqty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_desiredallocqty();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.desiredAllocQty)
  return _s;
}
inline const std::string& OrderAllocation::_internal_desiredallocqty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desiredallocqty_.Get();
}
inline void OrderAllocation::_internal_set_desiredallocqty(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.desiredallocqty_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_desiredallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.desiredallocqty_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_desiredallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.desiredAllocQty)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.desiredallocqty_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.desiredallocqty_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_desiredallocqty(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.desiredallocqty_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.desiredallocqty_.IsDefault()) {
    _impl_.desiredallocqty_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.desiredAllocQty)
}

// optional string allowedAllocQty = 6;
inline bool OrderAllocation::has_allowedallocqty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void OrderAllocation::clear_allowedallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowedallocqty_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& OrderAllocation::allowedallocqty() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.allowedAllocQty)
  return _internal_allowedallocqty();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderAllocation::set_allowedallocqty(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.allowedallocqty_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.allowedAllocQty)
}
inline std::string* OrderAllocation::mutable_allowedallocqty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_allowedallocqty();
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.allowedAllocQty)
  return _s;
}
inline const std::string& OrderAllocation::_internal_allowedallocqty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowedallocqty_.Get();
}
inline void OrderAllocation::_internal_set_allowedallocqty(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.allowedallocqty_.Set(value, GetArena());
}
inline std::string* OrderAllocation::_internal_mutable_allowedallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.allowedallocqty_.Mutable( GetArena());
}
inline std::string* OrderAllocation::release_allowedallocqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.allowedAllocQty)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.allowedallocqty_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allowedallocqty_.Set("", GetArena());
  }
  return released;
}
inline void OrderAllocation::set_allocated_allowedallocqty(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.allowedallocqty_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allowedallocqty_.IsDefault()) {
    _impl_.allowedallocqty_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.allowedAllocQty)
}

// optional bool isMonetary = 7;
inline bool OrderAllocation::has_ismonetary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OrderAllocation::clear_ismonetary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ismonetary_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool OrderAllocation::ismonetary() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.isMonetary)
  return _internal_ismonetary();
}
inline void OrderAllocation::set_ismonetary(bool value) {
  _internal_set_ismonetary(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.isMonetary)
}
inline bool OrderAllocation::_internal_ismonetary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ismonetary_;
}
inline void OrderAllocation::_internal_set_ismonetary(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ismonetary_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // OrderAllocation_2eproto_2epb_2eh
