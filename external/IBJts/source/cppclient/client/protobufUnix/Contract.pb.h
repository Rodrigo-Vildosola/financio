// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Contract.proto
// Protobuf C++ Version: 5.29.3

#ifndef Contract_2eproto_2epb_2eh
#define Contract_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "ComboLeg.pb.h"
#include "DeltaNeutralContract.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Contract_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Contract_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Contract_2eproto;
namespace protobuf {
class Contract;
struct ContractDefaultTypeInternal;
extern ContractDefaultTypeInternal _Contract_default_instance_;
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class Contract final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.Contract) */ {
 public:
  inline Contract() : Contract(nullptr) {}
  ~Contract() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Contract* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Contract));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Contract(
      ::google::protobuf::internal::ConstantInitialized);

  inline Contract(const Contract& from) : Contract(nullptr, from) {}
  inline Contract(Contract&& from) noexcept
      : Contract(nullptr, std::move(from)) {}
  inline Contract& operator=(const Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contract& operator=(Contract&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contract& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contract* internal_default_instance() {
    return reinterpret_cast<const Contract*>(
        &_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Contract& a, Contract& b) { a.Swap(&b); }
  inline void Swap(Contract* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contract* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contract* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Contract>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Contract& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Contract& from) { Contract::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Contract* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.Contract"; }

 protected:
  explicit Contract(::google::protobuf::Arena* arena);
  Contract(::google::protobuf::Arena* arena, const Contract& from);
  Contract(::google::protobuf::Arena* arena, Contract&& from) noexcept
      : Contract(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kComboLegsFieldNumber = 20,
    kSymbolFieldNumber = 2,
    kSecTypeFieldNumber = 3,
    kLastTradeDateOrContractMonthFieldNumber = 4,
    kRightFieldNumber = 6,
    kExchangeFieldNumber = 8,
    kPrimaryExchFieldNumber = 9,
    kCurrencyFieldNumber = 10,
    kLocalSymbolFieldNumber = 11,
    kTradingClassFieldNumber = 12,
    kSecIdTypeFieldNumber = 13,
    kSecIdFieldNumber = 14,
    kDescriptionFieldNumber = 15,
    kIssuerIdFieldNumber = 16,
    kComboLegsDescripFieldNumber = 19,
    kDeltaNeutralContractFieldNumber = 17,
    kStrikeFieldNumber = 5,
    kMultiplierFieldNumber = 7,
    kConIdFieldNumber = 1,
    kIncludeExpiredFieldNumber = 18,
  };
  // repeated .protobuf.ComboLeg comboLegs = 20;
  int combolegs_size() const;
  private:
  int _internal_combolegs_size() const;

  public:
  void clear_combolegs() ;
  ::protobuf::ComboLeg* mutable_combolegs(int index);
  ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>* mutable_combolegs();

  private:
  const ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>& _internal_combolegs() const;
  ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>* _internal_mutable_combolegs();
  public:
  const ::protobuf::ComboLeg& combolegs(int index) const;
  ::protobuf::ComboLeg* add_combolegs();
  const ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>& combolegs() const;
  // optional string symbol = 2;
  bool has_symbol() const;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // optional string secType = 3;
  bool has_sectype() const;
  void clear_sectype() ;
  const std::string& sectype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sectype(Arg_&& arg, Args_... args);
  std::string* mutable_sectype();
  PROTOBUF_NODISCARD std::string* release_sectype();
  void set_allocated_sectype(std::string* value);

  private:
  const std::string& _internal_sectype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sectype(
      const std::string& value);
  std::string* _internal_mutable_sectype();

  public:
  // optional string lastTradeDateOrContractMonth = 4;
  bool has_lasttradedateorcontractmonth() const;
  void clear_lasttradedateorcontractmonth() ;
  const std::string& lasttradedateorcontractmonth() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lasttradedateorcontractmonth(Arg_&& arg, Args_... args);
  std::string* mutable_lasttradedateorcontractmonth();
  PROTOBUF_NODISCARD std::string* release_lasttradedateorcontractmonth();
  void set_allocated_lasttradedateorcontractmonth(std::string* value);

  private:
  const std::string& _internal_lasttradedateorcontractmonth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lasttradedateorcontractmonth(
      const std::string& value);
  std::string* _internal_mutable_lasttradedateorcontractmonth();

  public:
  // optional string right = 6;
  bool has_right() const;
  void clear_right() ;
  const std::string& right() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_right(Arg_&& arg, Args_... args);
  std::string* mutable_right();
  PROTOBUF_NODISCARD std::string* release_right();
  void set_allocated_right(std::string* value);

  private:
  const std::string& _internal_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right(
      const std::string& value);
  std::string* _internal_mutable_right();

  public:
  // optional string exchange = 8;
  bool has_exchange() const;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // optional string primaryExch = 9;
  bool has_primaryexch() const;
  void clear_primaryexch() ;
  const std::string& primaryexch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primaryexch(Arg_&& arg, Args_... args);
  std::string* mutable_primaryexch();
  PROTOBUF_NODISCARD std::string* release_primaryexch();
  void set_allocated_primaryexch(std::string* value);

  private:
  const std::string& _internal_primaryexch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primaryexch(
      const std::string& value);
  std::string* _internal_mutable_primaryexch();

  public:
  // optional string currency = 10;
  bool has_currency() const;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // optional string localSymbol = 11;
  bool has_localsymbol() const;
  void clear_localsymbol() ;
  const std::string& localsymbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_localsymbol(Arg_&& arg, Args_... args);
  std::string* mutable_localsymbol();
  PROTOBUF_NODISCARD std::string* release_localsymbol();
  void set_allocated_localsymbol(std::string* value);

  private:
  const std::string& _internal_localsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localsymbol(
      const std::string& value);
  std::string* _internal_mutable_localsymbol();

  public:
  // optional string tradingClass = 12;
  bool has_tradingclass() const;
  void clear_tradingclass() ;
  const std::string& tradingclass() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tradingclass(Arg_&& arg, Args_... args);
  std::string* mutable_tradingclass();
  PROTOBUF_NODISCARD std::string* release_tradingclass();
  void set_allocated_tradingclass(std::string* value);

  private:
  const std::string& _internal_tradingclass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingclass(
      const std::string& value);
  std::string* _internal_mutable_tradingclass();

  public:
  // optional string secIdType = 13;
  bool has_secidtype() const;
  void clear_secidtype() ;
  const std::string& secidtype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secidtype(Arg_&& arg, Args_... args);
  std::string* mutable_secidtype();
  PROTOBUF_NODISCARD std::string* release_secidtype();
  void set_allocated_secidtype(std::string* value);

  private:
  const std::string& _internal_secidtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secidtype(
      const std::string& value);
  std::string* _internal_mutable_secidtype();

  public:
  // optional string secId = 14;
  bool has_secid() const;
  void clear_secid() ;
  const std::string& secid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secid(Arg_&& arg, Args_... args);
  std::string* mutable_secid();
  PROTOBUF_NODISCARD std::string* release_secid();
  void set_allocated_secid(std::string* value);

  private:
  const std::string& _internal_secid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secid(
      const std::string& value);
  std::string* _internal_mutable_secid();

  public:
  // optional string description = 15;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string issuerId = 16;
  bool has_issuerid() const;
  void clear_issuerid() ;
  const std::string& issuerid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issuerid(Arg_&& arg, Args_... args);
  std::string* mutable_issuerid();
  PROTOBUF_NODISCARD std::string* release_issuerid();
  void set_allocated_issuerid(std::string* value);

  private:
  const std::string& _internal_issuerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuerid(
      const std::string& value);
  std::string* _internal_mutable_issuerid();

  public:
  // optional string comboLegsDescrip = 19;
  bool has_combolegsdescrip() const;
  void clear_combolegsdescrip() ;
  const std::string& combolegsdescrip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_combolegsdescrip(Arg_&& arg, Args_... args);
  std::string* mutable_combolegsdescrip();
  PROTOBUF_NODISCARD std::string* release_combolegsdescrip();
  void set_allocated_combolegsdescrip(std::string* value);

  private:
  const std::string& _internal_combolegsdescrip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combolegsdescrip(
      const std::string& value);
  std::string* _internal_mutable_combolegsdescrip();

  public:
  // optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
  bool has_deltaneutralcontract() const;
  void clear_deltaneutralcontract() ;
  const ::protobuf::DeltaNeutralContract& deltaneutralcontract() const;
  PROTOBUF_NODISCARD ::protobuf::DeltaNeutralContract* release_deltaneutralcontract();
  ::protobuf::DeltaNeutralContract* mutable_deltaneutralcontract();
  void set_allocated_deltaneutralcontract(::protobuf::DeltaNeutralContract* value);
  void unsafe_arena_set_allocated_deltaneutralcontract(::protobuf::DeltaNeutralContract* value);
  ::protobuf::DeltaNeutralContract* unsafe_arena_release_deltaneutralcontract();

  private:
  const ::protobuf::DeltaNeutralContract& _internal_deltaneutralcontract() const;
  ::protobuf::DeltaNeutralContract* _internal_mutable_deltaneutralcontract();

  public:
  // optional double strike = 5;
  bool has_strike() const;
  void clear_strike() ;
  double strike() const;
  void set_strike(double value);

  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);

  public:
  // optional double multiplier = 7;
  bool has_multiplier() const;
  void clear_multiplier() ;
  double multiplier() const;
  void set_multiplier(double value);

  private:
  double _internal_multiplier() const;
  void _internal_set_multiplier(double value);

  public:
  // optional int32 conId = 1;
  bool has_conid() const;
  void clear_conid() ;
  ::int32_t conid() const;
  void set_conid(::int32_t value);

  private:
  ::int32_t _internal_conid() const;
  void _internal_set_conid(::int32_t value);

  public:
  // optional bool includeExpired = 18;
  bool has_includeexpired() const;
  void clear_includeexpired() ;
  bool includeexpired() const;
  void set_includeexpired(bool value);

  private:
  bool _internal_includeexpired() const;
  void _internal_set_includeexpired(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.Contract)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 20, 2,
      187, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Contract& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::protobuf::ComboLeg > combolegs_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr sectype_;
    ::google::protobuf::internal::ArenaStringPtr lasttradedateorcontractmonth_;
    ::google::protobuf::internal::ArenaStringPtr right_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr primaryexch_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr localsymbol_;
    ::google::protobuf::internal::ArenaStringPtr tradingclass_;
    ::google::protobuf::internal::ArenaStringPtr secidtype_;
    ::google::protobuf::internal::ArenaStringPtr secid_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr issuerid_;
    ::google::protobuf::internal::ArenaStringPtr combolegsdescrip_;
    ::protobuf::DeltaNeutralContract* deltaneutralcontract_;
    double strike_;
    double multiplier_;
    ::int32_t conid_;
    bool includeexpired_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Contract_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Contract

// optional int32 conId = 1;
inline bool Contract::has_conid() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Contract::clear_conid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conid_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t Contract::conid() const {
  // @@protoc_insertion_point(field_get:protobuf.Contract.conId)
  return _internal_conid();
}
inline void Contract::set_conid(::int32_t value) {
  _internal_set_conid(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:protobuf.Contract.conId)
}
inline ::int32_t Contract::_internal_conid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conid_;
}
inline void Contract::_internal_set_conid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conid_ = value;
}

// optional string symbol = 2;
inline bool Contract::has_symbol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Contract::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Contract::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.symbol)
}
inline std::string* Contract::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.symbol)
  return _s;
}
inline const std::string& Contract::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Contract::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Contract::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.symbol)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.symbol_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.symbol_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.symbol)
}

// optional string secType = 3;
inline bool Contract::has_sectype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Contract::clear_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sectype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Contract::sectype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.secType)
  return _internal_sectype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_sectype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sectype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.secType)
}
inline std::string* Contract::mutable_sectype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sectype();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.secType)
  return _s;
}
inline const std::string& Contract::_internal_sectype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sectype_.Get();
}
inline void Contract::_internal_set_sectype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sectype_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sectype_.Mutable( GetArena());
}
inline std::string* Contract::release_sectype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.secType)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.sectype_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sectype_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_sectype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sectype_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sectype_.IsDefault()) {
    _impl_.sectype_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.secType)
}

// optional string lastTradeDateOrContractMonth = 4;
inline bool Contract::has_lasttradedateorcontractmonth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Contract::clear_lasttradedateorcontractmonth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lasttradedateorcontractmonth_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Contract::lasttradedateorcontractmonth() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.lastTradeDateOrContractMonth)
  return _internal_lasttradedateorcontractmonth();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_lasttradedateorcontractmonth(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lasttradedateorcontractmonth_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.lastTradeDateOrContractMonth)
}
inline std::string* Contract::mutable_lasttradedateorcontractmonth() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lasttradedateorcontractmonth();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.lastTradeDateOrContractMonth)
  return _s;
}
inline const std::string& Contract::_internal_lasttradedateorcontractmonth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lasttradedateorcontractmonth_.Get();
}
inline void Contract::_internal_set_lasttradedateorcontractmonth(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lasttradedateorcontractmonth_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_lasttradedateorcontractmonth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.lasttradedateorcontractmonth_.Mutable( GetArena());
}
inline std::string* Contract::release_lasttradedateorcontractmonth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.lastTradeDateOrContractMonth)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.lasttradedateorcontractmonth_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.lasttradedateorcontractmonth_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_lasttradedateorcontractmonth(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lasttradedateorcontractmonth_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.lasttradedateorcontractmonth_.IsDefault()) {
    _impl_.lasttradedateorcontractmonth_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.lastTradeDateOrContractMonth)
}

// optional double strike = 5;
inline bool Contract::has_strike() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Contract::clear_strike() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strike_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double Contract::strike() const {
  // @@protoc_insertion_point(field_get:protobuf.Contract.strike)
  return _internal_strike();
}
inline void Contract::set_strike(double value) {
  _internal_set_strike(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:protobuf.Contract.strike)
}
inline double Contract::_internal_strike() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strike_;
}
inline void Contract::_internal_set_strike(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strike_ = value;
}

// optional string right = 6;
inline bool Contract::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Contract::clear_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Contract::right() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.right)
  return _internal_right();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_right(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.right_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.right)
}
inline std::string* Contract::mutable_right() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.right)
  return _s;
}
inline const std::string& Contract::_internal_right() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_.Get();
}
inline void Contract::_internal_set_right(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.right_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.right_.Mutable( GetArena());
}
inline std::string* Contract::release_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.right)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.right_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.right_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_right(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.right_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.right_.IsDefault()) {
    _impl_.right_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.right)
}

// optional double multiplier = 7;
inline bool Contract::has_multiplier() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Contract::clear_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.multiplier_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double Contract::multiplier() const {
  // @@protoc_insertion_point(field_get:protobuf.Contract.multiplier)
  return _internal_multiplier();
}
inline void Contract::set_multiplier(double value) {
  _internal_set_multiplier(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:protobuf.Contract.multiplier)
}
inline double Contract::_internal_multiplier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.multiplier_;
}
inline void Contract::_internal_set_multiplier(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.multiplier_ = value;
}

// optional string exchange = 8;
inline bool Contract::has_exchange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Contract::clear_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Contract::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.exchange)
}
inline std::string* Contract::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.exchange)
  return _s;
}
inline const std::string& Contract::_internal_exchange() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_.Get();
}
inline void Contract::_internal_set_exchange(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Contract::release_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.exchange)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.exchange_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.exchange_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_exchange(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.exchange_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.exchange)
}

// optional string primaryExch = 9;
inline bool Contract::has_primaryexch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Contract::clear_primaryexch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primaryexch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Contract::primaryexch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.primaryExch)
  return _internal_primaryexch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_primaryexch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.primaryexch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.primaryExch)
}
inline std::string* Contract::mutable_primaryexch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primaryexch();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.primaryExch)
  return _s;
}
inline const std::string& Contract::_internal_primaryexch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primaryexch_.Get();
}
inline void Contract::_internal_set_primaryexch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.primaryexch_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_primaryexch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.primaryexch_.Mutable( GetArena());
}
inline std::string* Contract::release_primaryexch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.primaryExch)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.primaryexch_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.primaryexch_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_primaryexch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.primaryexch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primaryexch_.IsDefault()) {
    _impl_.primaryexch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.primaryExch)
}

// optional string currency = 10;
inline bool Contract::has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Contract::clear_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Contract::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_currency(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.currency)
}
inline std::string* Contract::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.currency)
  return _s;
}
inline const std::string& Contract::_internal_currency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currency_.Get();
}
inline void Contract::_internal_set_currency(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Contract::release_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.currency)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.currency_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.currency_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_currency(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.currency_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.currency)
}

// optional string localSymbol = 11;
inline bool Contract::has_localsymbol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Contract::clear_localsymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.localsymbol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Contract::localsymbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.localSymbol)
  return _internal_localsymbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_localsymbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.localsymbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.localSymbol)
}
inline std::string* Contract::mutable_localsymbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_localsymbol();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.localSymbol)
  return _s;
}
inline const std::string& Contract::_internal_localsymbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.localsymbol_.Get();
}
inline void Contract::_internal_set_localsymbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.localsymbol_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_localsymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.localsymbol_.Mutable( GetArena());
}
inline std::string* Contract::release_localsymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.localSymbol)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.localsymbol_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.localsymbol_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_localsymbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.localsymbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.localsymbol_.IsDefault()) {
    _impl_.localsymbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.localSymbol)
}

// optional string tradingClass = 12;
inline bool Contract::has_tradingclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Contract::clear_tradingclass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tradingclass_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Contract::tradingclass() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.tradingClass)
  return _internal_tradingclass();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_tradingclass(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tradingclass_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.tradingClass)
}
inline std::string* Contract::mutable_tradingclass() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tradingclass();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.tradingClass)
  return _s;
}
inline const std::string& Contract::_internal_tradingclass() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tradingclass_.Get();
}
inline void Contract::_internal_set_tradingclass(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tradingclass_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_tradingclass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.tradingclass_.Mutable( GetArena());
}
inline std::string* Contract::release_tradingclass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.tradingClass)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.tradingclass_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.tradingclass_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_tradingclass(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.tradingclass_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tradingclass_.IsDefault()) {
    _impl_.tradingclass_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.tradingClass)
}

// optional string secIdType = 13;
inline bool Contract::has_secidtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Contract::clear_secidtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secidtype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Contract::secidtype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.secIdType)
  return _internal_secidtype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_secidtype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.secidtype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.secIdType)
}
inline std::string* Contract::mutable_secidtype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secidtype();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.secIdType)
  return _s;
}
inline const std::string& Contract::_internal_secidtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secidtype_.Get();
}
inline void Contract::_internal_set_secidtype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.secidtype_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_secidtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.secidtype_.Mutable( GetArena());
}
inline std::string* Contract::release_secidtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.secIdType)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.secidtype_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.secidtype_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_secidtype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.secidtype_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secidtype_.IsDefault()) {
    _impl_.secidtype_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.secIdType)
}

// optional string secId = 14;
inline bool Contract::has_secid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Contract::clear_secid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Contract::secid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.secId)
  return _internal_secid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_secid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.secid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.secId)
}
inline std::string* Contract::mutable_secid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secid();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.secId)
  return _s;
}
inline const std::string& Contract::_internal_secid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secid_.Get();
}
inline void Contract::_internal_set_secid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.secid_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_secid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.secid_.Mutable( GetArena());
}
inline std::string* Contract::release_secid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.secId)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.secid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.secid_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_secid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.secid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secid_.IsDefault()) {
    _impl_.secid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.secId)
}

// optional string description = 15;
inline bool Contract::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Contract::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Contract::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.description)
}
inline std::string* Contract::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.description)
  return _s;
}
inline const std::string& Contract::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Contract::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Contract::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.description)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.description_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.description_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.description)
}

// optional string issuerId = 16;
inline bool Contract::has_issuerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Contract::clear_issuerid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issuerid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Contract::issuerid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.issuerId)
  return _internal_issuerid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_issuerid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.issuerid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.issuerId)
}
inline std::string* Contract::mutable_issuerid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issuerid();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.issuerId)
  return _s;
}
inline const std::string& Contract::_internal_issuerid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.issuerid_.Get();
}
inline void Contract::_internal_set_issuerid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.issuerid_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_issuerid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.issuerid_.Mutable( GetArena());
}
inline std::string* Contract::release_issuerid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.issuerId)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.issuerid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.issuerid_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_issuerid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.issuerid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.issuerid_.IsDefault()) {
    _impl_.issuerid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.issuerId)
}

// optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
inline bool Contract::has_deltaneutralcontract() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deltaneutralcontract_ != nullptr);
  return value;
}
inline const ::protobuf::DeltaNeutralContract& Contract::_internal_deltaneutralcontract() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf::DeltaNeutralContract* p = _impl_.deltaneutralcontract_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::DeltaNeutralContract&>(::protobuf::_DeltaNeutralContract_default_instance_);
}
inline const ::protobuf::DeltaNeutralContract& Contract::deltaneutralcontract() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.deltaNeutralContract)
  return _internal_deltaneutralcontract();
}
inline void Contract::unsafe_arena_set_allocated_deltaneutralcontract(::protobuf::DeltaNeutralContract* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deltaneutralcontract_);
  }
  _impl_.deltaneutralcontract_ = reinterpret_cast<::protobuf::DeltaNeutralContract*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.Contract.deltaNeutralContract)
}
inline ::protobuf::DeltaNeutralContract* Contract::release_deltaneutralcontract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::protobuf::DeltaNeutralContract* released = _impl_.deltaneutralcontract_;
  _impl_.deltaneutralcontract_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::protobuf::DeltaNeutralContract* Contract::unsafe_arena_release_deltaneutralcontract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.deltaNeutralContract)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::protobuf::DeltaNeutralContract* temp = _impl_.deltaneutralcontract_;
  _impl_.deltaneutralcontract_ = nullptr;
  return temp;
}
inline ::protobuf::DeltaNeutralContract* Contract::_internal_mutable_deltaneutralcontract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deltaneutralcontract_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf::DeltaNeutralContract>(GetArena());
    _impl_.deltaneutralcontract_ = reinterpret_cast<::protobuf::DeltaNeutralContract*>(p);
  }
  return _impl_.deltaneutralcontract_;
}
inline ::protobuf::DeltaNeutralContract* Contract::mutable_deltaneutralcontract() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00004000u;
  ::protobuf::DeltaNeutralContract* _msg = _internal_mutable_deltaneutralcontract();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.deltaNeutralContract)
  return _msg;
}
inline void Contract::set_allocated_deltaneutralcontract(::protobuf::DeltaNeutralContract* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deltaneutralcontract_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.deltaneutralcontract_ = reinterpret_cast<::protobuf::DeltaNeutralContract*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.deltaNeutralContract)
}

// optional bool includeExpired = 18;
inline bool Contract::has_includeexpired() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Contract::clear_includeexpired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.includeexpired_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool Contract::includeexpired() const {
  // @@protoc_insertion_point(field_get:protobuf.Contract.includeExpired)
  return _internal_includeexpired();
}
inline void Contract::set_includeexpired(bool value) {
  _internal_set_includeexpired(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:protobuf.Contract.includeExpired)
}
inline bool Contract::_internal_includeexpired() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.includeexpired_;
}
inline void Contract::_internal_set_includeexpired(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.includeexpired_ = value;
}

// optional string comboLegsDescrip = 19;
inline bool Contract::has_combolegsdescrip() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Contract::clear_combolegsdescrip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.combolegsdescrip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Contract::combolegsdescrip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.comboLegsDescrip)
  return _internal_combolegsdescrip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_combolegsdescrip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.combolegsdescrip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Contract.comboLegsDescrip)
}
inline std::string* Contract::mutable_combolegsdescrip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_combolegsdescrip();
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.comboLegsDescrip)
  return _s;
}
inline const std::string& Contract::_internal_combolegsdescrip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.combolegsdescrip_.Get();
}
inline void Contract::_internal_set_combolegsdescrip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.combolegsdescrip_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_combolegsdescrip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.combolegsdescrip_.Mutable( GetArena());
}
inline std::string* Contract::release_combolegsdescrip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Contract.comboLegsDescrip)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.combolegsdescrip_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.combolegsdescrip_.Set("", GetArena());
  }
  return released;
}
inline void Contract::set_allocated_combolegsdescrip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.combolegsdescrip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.combolegsdescrip_.IsDefault()) {
    _impl_.combolegsdescrip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Contract.comboLegsDescrip)
}

// repeated .protobuf.ComboLeg comboLegs = 20;
inline int Contract::_internal_combolegs_size() const {
  return _internal_combolegs().size();
}
inline int Contract::combolegs_size() const {
  return _internal_combolegs_size();
}
inline ::protobuf::ComboLeg* Contract::mutable_combolegs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf.Contract.comboLegs)
  return _internal_mutable_combolegs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>* Contract::mutable_combolegs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Contract.comboLegs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_combolegs();
}
inline const ::protobuf::ComboLeg& Contract::combolegs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Contract.comboLegs)
  return _internal_combolegs().Get(index);
}
inline ::protobuf::ComboLeg* Contract::add_combolegs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::protobuf::ComboLeg* _add = _internal_mutable_combolegs()->Add();
  // @@protoc_insertion_point(field_add:protobuf.Contract.comboLegs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>& Contract::combolegs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf.Contract.comboLegs)
  return _internal_combolegs();
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>&
Contract::_internal_combolegs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.combolegs_;
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::ComboLeg>*
Contract::_internal_mutable_combolegs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.combolegs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Contract_2eproto_2epb_2eh
