// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: OrderState.proto
// Protobuf C++ Version: 5.29.3

#include "OrderState.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {

inline constexpr OrderState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orderallocations_{},
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commissionandfeescurrency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        margincurrency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        suggestedsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rejectreason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        warningtext_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        completedtime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        completedstatus_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initmarginbefore_{0},
        maintmarginbefore_{0},
        equitywithloanbefore_{0},
        initmarginchange_{0},
        maintmarginchange_{0},
        equitywithloanchange_{0},
        initmarginafter_{0},
        maintmarginafter_{0},
        equitywithloanafter_{0},
        commissionandfees_{0},
        mincommissionandfees_{0},
        maxcommissionandfees_{0},
        initmarginbeforeoutsiderth_{0},
        maintmarginbeforeoutsiderth_{0},
        equitywithloanbeforeoutsiderth_{0},
        initmarginchangeoutsiderth_{0},
        maintmarginchangeoutsiderth_{0},
        equitywithloanchangeoutsiderth_{0},
        initmarginafteroutsiderth_{0},
        maintmarginafteroutsiderth_{0},
        equitywithloanafteroutsiderth_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrderState::OrderState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderStateDefaultTypeInternal() {}
  union {
    OrderState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderStateDefaultTypeInternal _OrderState_default_instance_;
}  // namespace protobuf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_OrderState_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_OrderState_2eproto = nullptr;
const ::uint32_t
    TableStruct_OrderState_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginbefore_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginbefore_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanbefore_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginchange_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginchange_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanchange_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginafter_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginafter_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanafter_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.commissionandfees_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.mincommissionandfees_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maxcommissionandfees_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.commissionandfeescurrency_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.margincurrency_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginbeforeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginbeforeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanbeforeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginchangeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginchangeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanchangeoutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.initmarginafteroutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.maintmarginafteroutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.equitywithloanafteroutsiderth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.suggestedsize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.rejectreason_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.orderallocations_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.warningtext_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.completedtime_),
        PROTOBUF_FIELD_OFFSET(::protobuf::OrderState, _impl_.completedstatus_),
        0,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        1,
        2,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        3,
        4,
        ~0u,
        5,
        6,
        7,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 38, -1, sizeof(::protobuf::OrderState)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_OrderState_default_instance_._instance,
};
const char descriptor_table_protodef_OrderState_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020OrderState.proto\022\010protobuf\032\025OrderAlloc"
    "ation.proto\"\365\r\n\nOrderState\022\023\n\006status\030\001 \001"
    "(\tH\000\210\001\001\022\035\n\020initMarginBefore\030\002 \001(\001H\001\210\001\001\022\036"
    "\n\021maintMarginBefore\030\003 \001(\001H\002\210\001\001\022!\n\024equity"
    "WithLoanBefore\030\004 \001(\001H\003\210\001\001\022\035\n\020initMarginC"
    "hange\030\005 \001(\001H\004\210\001\001\022\036\n\021maintMarginChange\030\006 "
    "\001(\001H\005\210\001\001\022!\n\024equityWithLoanChange\030\007 \001(\001H\006"
    "\210\001\001\022\034\n\017initMarginAfter\030\010 \001(\001H\007\210\001\001\022\035\n\020mai"
    "ntMarginAfter\030\t \001(\001H\010\210\001\001\022 \n\023equityWithLo"
    "anAfter\030\n \001(\001H\t\210\001\001\022\036\n\021commissionAndFees\030"
    "\013 \001(\001H\n\210\001\001\022!\n\024minCommissionAndFees\030\014 \001(\001"
    "H\013\210\001\001\022!\n\024maxCommissionAndFees\030\r \001(\001H\014\210\001\001"
    "\022&\n\031commissionAndFeesCurrency\030\016 \001(\tH\r\210\001\001"
    "\022\033\n\016marginCurrency\030\017 \001(\tH\016\210\001\001\022\'\n\032initMar"
    "ginBeforeOutsideRTH\030\020 \001(\001H\017\210\001\001\022(\n\033maintM"
    "arginBeforeOutsideRTH\030\021 \001(\001H\020\210\001\001\022+\n\036equi"
    "tyWithLoanBeforeOutsideRTH\030\022 \001(\001H\021\210\001\001\022\'\n"
    "\032initMarginChangeOutsideRTH\030\023 \001(\001H\022\210\001\001\022("
    "\n\033maintMarginChangeOutsideRTH\030\024 \001(\001H\023\210\001\001"
    "\022+\n\036equityWithLoanChangeOutsideRTH\030\025 \001(\001"
    "H\024\210\001\001\022&\n\031initMarginAfterOutsideRTH\030\026 \001(\001"
    "H\025\210\001\001\022\'\n\032maintMarginAfterOutsideRTH\030\027 \001("
    "\001H\026\210\001\001\022*\n\035equityWithLoanAfterOutsideRTH\030"
    "\030 \001(\001H\027\210\001\001\022\032\n\rsuggestedSize\030\031 \001(\tH\030\210\001\001\022\031"
    "\n\014rejectReason\030\032 \001(\tH\031\210\001\001\0223\n\020orderAlloca"
    "tions\030\033 \003(\0132\031.protobuf.OrderAllocation\022\030"
    "\n\013warningText\030\034 \001(\tH\032\210\001\001\022\032\n\rcompletedTim"
    "e\030\035 \001(\tH\033\210\001\001\022\034\n\017completedStatus\030\036 \001(\tH\034\210"
    "\001\001B\t\n\007_statusB\023\n\021_initMarginBeforeB\024\n\022_m"
    "aintMarginBeforeB\027\n\025_equityWithLoanBefor"
    "eB\023\n\021_initMarginChangeB\024\n\022_maintMarginCh"
    "angeB\027\n\025_equityWithLoanChangeB\022\n\020_initMa"
    "rginAfterB\023\n\021_maintMarginAfterB\026\n\024_equit"
    "yWithLoanAfterB\024\n\022_commissionAndFeesB\027\n\025"
    "_minCommissionAndFeesB\027\n\025_maxCommissionA"
    "ndFeesB\034\n\032_commissionAndFeesCurrencyB\021\n\017"
    "_marginCurrencyB\035\n\033_initMarginBeforeOuts"
    "ideRTHB\036\n\034_maintMarginBeforeOutsideRTHB!"
    "\n\037_equityWithLoanBeforeOutsideRTHB\035\n\033_in"
    "itMarginChangeOutsideRTHB\036\n\034_maintMargin"
    "ChangeOutsideRTHB!\n\037_equityWithLoanChang"
    "eOutsideRTHB\034\n\032_initMarginAfterOutsideRT"
    "HB\035\n\033_maintMarginAfterOutsideRTHB \n\036_equ"
    "ityWithLoanAfterOutsideRTHB\020\n\016_suggested"
    "SizeB\017\n\r_rejectReasonB\016\n\014_warningTextB\020\n"
    "\016_completedTimeB\022\n\020_completedStatusB:\n\026c"
    "om.ib.client.protobufB\017OrderStateProto\252\002"
    "\016IBApi.protobufb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_OrderState_2eproto_deps[1] =
    {
        &::descriptor_table_OrderAllocation_2eproto,
};
static ::absl::once_flag descriptor_table_OrderState_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_OrderState_2eproto = {
    false,
    false,
    1903,
    descriptor_table_protodef_OrderState_2eproto,
    "OrderState.proto",
    &descriptor_table_OrderState_2eproto_once,
    descriptor_table_OrderState_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_OrderState_2eproto::offsets,
    file_level_enum_descriptors_OrderState_2eproto,
    file_level_service_descriptors_OrderState_2eproto,
};
namespace protobuf {
// ===================================================================

class OrderState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<OrderState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OrderState, _impl_._has_bits_);
};

void OrderState::clear_orderallocations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderallocations_.Clear();
}
OrderState::OrderState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.OrderState)
}
inline PROTOBUF_NDEBUG_INLINE OrderState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf::OrderState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        orderallocations_{visibility, arena, from.orderallocations_},
        status_(arena, from.status_),
        commissionandfeescurrency_(arena, from.commissionandfeescurrency_),
        margincurrency_(arena, from.margincurrency_),
        suggestedsize_(arena, from.suggestedsize_),
        rejectreason_(arena, from.rejectreason_),
        warningtext_(arena, from.warningtext_),
        completedtime_(arena, from.completedtime_),
        completedstatus_(arena, from.completedstatus_) {}

OrderState::OrderState(
    ::google::protobuf::Arena* arena,
    const OrderState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OrderState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initmarginbefore_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, initmarginbefore_),
           offsetof(Impl_, equitywithloanafteroutsiderth_) -
               offsetof(Impl_, initmarginbefore_) +
               sizeof(Impl_::equitywithloanafteroutsiderth_));

  // @@protoc_insertion_point(copy_constructor:protobuf.OrderState)
}
inline PROTOBUF_NDEBUG_INLINE OrderState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        orderallocations_{visibility, arena},
        status_(arena),
        commissionandfeescurrency_(arena),
        margincurrency_(arena),
        suggestedsize_(arena),
        rejectreason_(arena),
        warningtext_(arena),
        completedtime_(arena),
        completedstatus_(arena) {}

inline void OrderState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initmarginbefore_),
           0,
           offsetof(Impl_, equitywithloanafteroutsiderth_) -
               offsetof(Impl_, initmarginbefore_) +
               sizeof(Impl_::equitywithloanafteroutsiderth_));
}
OrderState::~OrderState() {
  // @@protoc_insertion_point(destructor:protobuf.OrderState)
  SharedDtor(*this);
}
inline void OrderState::SharedDtor(MessageLite& self) {
  OrderState& this_ = static_cast<OrderState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.status_.Destroy();
  this_._impl_.commissionandfeescurrency_.Destroy();
  this_._impl_.margincurrency_.Destroy();
  this_._impl_.suggestedsize_.Destroy();
  this_._impl_.rejectreason_.Destroy();
  this_._impl_.warningtext_.Destroy();
  this_._impl_.completedtime_.Destroy();
  this_._impl_.completedstatus_.Destroy();
  this_._impl_.~Impl_();
}

inline void* OrderState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OrderState(arena);
}
constexpr auto OrderState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(OrderState, _impl_.orderallocations_) +
          decltype(OrderState::_impl_.orderallocations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(OrderState), alignof(OrderState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&OrderState::PlacementNew_,
                                 sizeof(OrderState),
                                 alignof(OrderState));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OrderState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OrderState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OrderState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OrderState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OrderState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OrderState>(), &OrderState::ByteSizeLong,
            &OrderState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OrderState, _impl_._cached_size_),
        false,
    },
    &OrderState::kDescriptorMethods,
    &descriptor_table_OrderState_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OrderState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 30, 1, 161, 2> OrderState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OrderState, _impl_._has_bits_),
    0, // no _extensions_
    30, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3221225472,  // skipmap
    offsetof(decltype(_table_), field_entries),
    30,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::OrderState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string status = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.status_)}},
    // optional double initMarginBefore = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 8, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginbefore_)}},
    // optional double maintMarginBefore = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 9, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginbefore_)}},
    // optional double equityWithLoanBefore = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 10, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanbefore_)}},
    // optional double initMarginChange = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 11, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginchange_)}},
    // optional double maintMarginChange = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 12, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginchange_)}},
    // optional double equityWithLoanChange = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 13, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanchange_)}},
    // optional double initMarginAfter = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 14, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginafter_)}},
    // optional double maintMarginAfter = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 15, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginafter_)}},
    // optional double equityWithLoanAfter = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 16, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanafter_)}},
    // optional double commissionAndFees = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 17, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.commissionandfees_)}},
    // optional double minCommissionAndFees = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 18, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.mincommissionandfees_)}},
    // optional double maxCommissionAndFees = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 19, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maxcommissionandfees_)}},
    // optional string commissionAndFeesCurrency = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 1, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.commissionandfeescurrency_)}},
    // optional string marginCurrency = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 2, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.margincurrency_)}},
    // optional double initMarginBeforeOutsideRTH = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 20, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginbeforeoutsiderth_)}},
    // optional double maintMarginBeforeOutsideRTH = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 21, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginbeforeoutsiderth_)}},
    // optional double equityWithLoanBeforeOutsideRTH = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 22, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanbeforeoutsiderth_)}},
    // optional double initMarginChangeOutsideRTH = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 23, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginchangeoutsiderth_)}},
    // optional double maintMarginChangeOutsideRTH = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 24, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginchangeoutsiderth_)}},
    // optional double equityWithLoanChangeOutsideRTH = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 25, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanchangeoutsiderth_)}},
    // optional double initMarginAfterOutsideRTH = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 26, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginafteroutsiderth_)}},
    // optional double maintMarginAfterOutsideRTH = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 27, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginafteroutsiderth_)}},
    // optional double equityWithLoanAfterOutsideRTH = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 28, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanafteroutsiderth_)}},
    // optional string suggestedSize = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 3, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.suggestedsize_)}},
    // optional string rejectReason = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 4, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.rejectreason_)}},
    // repeated .protobuf.OrderAllocation orderAllocations = 27;
    {::_pbi::TcParser::FastMtR2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.orderallocations_)}},
    // optional string warningText = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 5, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.warningtext_)}},
    // optional string completedTime = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 6, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.completedtime_)}},
    // optional string completedStatus = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 7, 0, PROTOBUF_FIELD_OFFSET(OrderState, _impl_.completedstatus_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string status = 1;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double initMarginBefore = 2;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginbefore_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginBefore = 3;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginbefore_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanBefore = 4;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanbefore_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double initMarginChange = 5;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginchange_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginChange = 6;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginchange_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanChange = 7;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanchange_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double initMarginAfter = 8;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginafter_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginAfter = 9;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginafter_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanAfter = 10;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanafter_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double commissionAndFees = 11;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.commissionandfees_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double minCommissionAndFees = 12;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.mincommissionandfees_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maxCommissionAndFees = 13;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maxcommissionandfees_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string commissionAndFeesCurrency = 14;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.commissionandfeescurrency_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string marginCurrency = 15;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.margincurrency_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double initMarginBeforeOutsideRTH = 16;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginbeforeoutsiderth_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginBeforeOutsideRTH = 17;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginbeforeoutsiderth_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanBeforeOutsideRTH = 18;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanbeforeoutsiderth_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double initMarginChangeOutsideRTH = 19;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginchangeoutsiderth_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginChangeOutsideRTH = 20;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginchangeoutsiderth_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanChangeOutsideRTH = 21;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanchangeoutsiderth_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double initMarginAfterOutsideRTH = 22;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginafteroutsiderth_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double maintMarginAfterOutsideRTH = 23;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.maintmarginafteroutsiderth_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double equityWithLoanAfterOutsideRTH = 24;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanafteroutsiderth_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string suggestedSize = 25;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.suggestedsize_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string rejectReason = 26;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.rejectreason_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .protobuf.OrderAllocation orderAllocations = 27;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.orderallocations_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string warningText = 28;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.warningtext_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string completedTime = 29;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.completedtime_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string completedStatus = 30;
    {PROTOBUF_FIELD_OFFSET(OrderState, _impl_.completedstatus_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::OrderAllocation>()},
  }}, {{
    "\23\6\0\0\0\0\0\0\0\0\0\0\0\0\31\16\0\0\0\0\0\0\0\0\0\15\14\0\13\15\17\0"
    "protobuf.OrderState"
    "status"
    "commissionAndFeesCurrency"
    "marginCurrency"
    "suggestedSize"
    "rejectReason"
    "warningText"
    "completedTime"
    "completedStatus"
  }},
};

PROTOBUF_NOINLINE void OrderState::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.OrderState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orderallocations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commissionandfeescurrency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.margincurrency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.suggestedsize_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rejectreason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.warningtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.completedtime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.completedstatus_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.initmarginbefore_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.maintmarginafter_) -
        reinterpret_cast<char*>(&_impl_.initmarginbefore_)) + sizeof(_impl_.maintmarginafter_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.equitywithloanafter_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initmarginchangeoutsiderth_) -
        reinterpret_cast<char*>(&_impl_.equitywithloanafter_)) + sizeof(_impl_.initmarginchangeoutsiderth_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&_impl_.maintmarginchangeoutsiderth_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.equitywithloanafteroutsiderth_) -
        reinterpret_cast<char*>(&_impl_.maintmarginchangeoutsiderth_)) + sizeof(_impl_.equitywithloanafteroutsiderth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OrderState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OrderState& this_ = static_cast<const OrderState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OrderState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OrderState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf.OrderState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string status = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.status");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional double initMarginBefore = 2;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_initmarginbefore(), target);
          }

          // optional double maintMarginBefore = 3;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_maintmarginbefore(), target);
          }

          // optional double equityWithLoanBefore = 4;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_equitywithloanbefore(), target);
          }

          // optional double initMarginChange = 5;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_initmarginchange(), target);
          }

          // optional double maintMarginChange = 6;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_maintmarginchange(), target);
          }

          // optional double equityWithLoanChange = 7;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_equitywithloanchange(), target);
          }

          // optional double initMarginAfter = 8;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_initmarginafter(), target);
          }

          // optional double maintMarginAfter = 9;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_maintmarginafter(), target);
          }

          // optional double equityWithLoanAfter = 10;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_equitywithloanafter(), target);
          }

          // optional double commissionAndFees = 11;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_commissionandfees(), target);
          }

          // optional double minCommissionAndFees = 12;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_mincommissionandfees(), target);
          }

          // optional double maxCommissionAndFees = 13;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_maxcommissionandfees(), target);
          }

          // optional string commissionAndFeesCurrency = 14;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_commissionandfeescurrency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.commissionAndFeesCurrency");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // optional string marginCurrency = 15;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_margincurrency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.marginCurrency");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // optional double initMarginBeforeOutsideRTH = 16;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_initmarginbeforeoutsiderth(), target);
          }

          // optional double maintMarginBeforeOutsideRTH = 17;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                17, this_._internal_maintmarginbeforeoutsiderth(), target);
          }

          // optional double equityWithLoanBeforeOutsideRTH = 18;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                18, this_._internal_equitywithloanbeforeoutsiderth(), target);
          }

          // optional double initMarginChangeOutsideRTH = 19;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                19, this_._internal_initmarginchangeoutsiderth(), target);
          }

          // optional double maintMarginChangeOutsideRTH = 20;
          if (cached_has_bits & 0x01000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                20, this_._internal_maintmarginchangeoutsiderth(), target);
          }

          // optional double equityWithLoanChangeOutsideRTH = 21;
          if (cached_has_bits & 0x02000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                21, this_._internal_equitywithloanchangeoutsiderth(), target);
          }

          // optional double initMarginAfterOutsideRTH = 22;
          if (cached_has_bits & 0x04000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                22, this_._internal_initmarginafteroutsiderth(), target);
          }

          // optional double maintMarginAfterOutsideRTH = 23;
          if (cached_has_bits & 0x08000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                23, this_._internal_maintmarginafteroutsiderth(), target);
          }

          // optional double equityWithLoanAfterOutsideRTH = 24;
          if (cached_has_bits & 0x10000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                24, this_._internal_equitywithloanafteroutsiderth(), target);
          }

          // optional string suggestedSize = 25;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_suggestedsize();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.suggestedSize");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // optional string rejectReason = 26;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_rejectreason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.rejectReason");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // repeated .protobuf.OrderAllocation orderAllocations = 27;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_orderallocations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_orderallocations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    27, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // optional string warningText = 28;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_warningtext();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.warningText");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // optional string completedTime = 29;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_completedtime();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.completedTime");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // optional string completedStatus = 30;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_completedstatus();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.OrderState.completedStatus");
            target = stream->WriteStringMaybeAliased(30, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf.OrderState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OrderState::ByteSizeLong(const MessageLite& base) {
          const OrderState& this_ = static_cast<const OrderState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OrderState::ByteSizeLong() const {
          const OrderState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf.OrderState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protobuf.OrderAllocation orderAllocations = 27;
            {
              total_size += 2UL * this_._internal_orderallocations_size();
              for (const auto& msg : this_._internal_orderallocations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string status = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // optional string commissionAndFeesCurrency = 14;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_commissionandfeescurrency());
            }
            // optional string marginCurrency = 15;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_margincurrency());
            }
            // optional string suggestedSize = 25;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_suggestedsize());
            }
            // optional string rejectReason = 26;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rejectreason());
            }
            // optional string warningText = 28;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_warningtext());
            }
            // optional string completedTime = 29;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_completedtime());
            }
            // optional string completedStatus = 30;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_completedstatus());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional double initMarginBefore = 2;
            if (cached_has_bits & 0x00000100u) {
              total_size += 9;
            }
            // optional double maintMarginBefore = 3;
            if (cached_has_bits & 0x00000200u) {
              total_size += 9;
            }
            // optional double equityWithLoanBefore = 4;
            if (cached_has_bits & 0x00000400u) {
              total_size += 9;
            }
            // optional double initMarginChange = 5;
            if (cached_has_bits & 0x00000800u) {
              total_size += 9;
            }
            // optional double maintMarginChange = 6;
            if (cached_has_bits & 0x00001000u) {
              total_size += 9;
            }
            // optional double equityWithLoanChange = 7;
            if (cached_has_bits & 0x00002000u) {
              total_size += 9;
            }
            // optional double initMarginAfter = 8;
            if (cached_has_bits & 0x00004000u) {
              total_size += 9;
            }
            // optional double maintMarginAfter = 9;
            if (cached_has_bits & 0x00008000u) {
              total_size += 9;
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional double equityWithLoanAfter = 10;
            if (cached_has_bits & 0x00010000u) {
              total_size += 9;
            }
            // optional double commissionAndFees = 11;
            if (cached_has_bits & 0x00020000u) {
              total_size += 9;
            }
            // optional double minCommissionAndFees = 12;
            if (cached_has_bits & 0x00040000u) {
              total_size += 9;
            }
            // optional double maxCommissionAndFees = 13;
            if (cached_has_bits & 0x00080000u) {
              total_size += 9;
            }
            // optional double initMarginBeforeOutsideRTH = 16;
            if (cached_has_bits & 0x00100000u) {
              total_size += 10;
            }
            // optional double maintMarginBeforeOutsideRTH = 17;
            if (cached_has_bits & 0x00200000u) {
              total_size += 10;
            }
            // optional double equityWithLoanBeforeOutsideRTH = 18;
            if (cached_has_bits & 0x00400000u) {
              total_size += 10;
            }
            // optional double initMarginChangeOutsideRTH = 19;
            if (cached_has_bits & 0x00800000u) {
              total_size += 10;
            }
          }
          if (cached_has_bits & 0x1f000000u) {
            // optional double maintMarginChangeOutsideRTH = 20;
            if (cached_has_bits & 0x01000000u) {
              total_size += 10;
            }
            // optional double equityWithLoanChangeOutsideRTH = 21;
            if (cached_has_bits & 0x02000000u) {
              total_size += 10;
            }
            // optional double initMarginAfterOutsideRTH = 22;
            if (cached_has_bits & 0x04000000u) {
              total_size += 10;
            }
            // optional double maintMarginAfterOutsideRTH = 23;
            if (cached_has_bits & 0x08000000u) {
              total_size += 10;
            }
            // optional double equityWithLoanAfterOutsideRTH = 24;
            if (cached_has_bits & 0x10000000u) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OrderState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OrderState*>(&to_msg);
  auto& from = static_cast<const OrderState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.OrderState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orderallocations()->MergeFrom(
      from._internal_orderallocations());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_commissionandfeescurrency(from._internal_commissionandfeescurrency());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_margincurrency(from._internal_margincurrency());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_suggestedsize(from._internal_suggestedsize());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_rejectreason(from._internal_rejectreason());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_warningtext(from._internal_warningtext());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_completedtime(from._internal_completedtime());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_completedstatus(from._internal_completedstatus());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.initmarginbefore_ = from._impl_.initmarginbefore_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.maintmarginbefore_ = from._impl_.maintmarginbefore_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.equitywithloanbefore_ = from._impl_.equitywithloanbefore_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.initmarginchange_ = from._impl_.initmarginchange_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.maintmarginchange_ = from._impl_.maintmarginchange_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.equitywithloanchange_ = from._impl_.equitywithloanchange_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.initmarginafter_ = from._impl_.initmarginafter_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.maintmarginafter_ = from._impl_.maintmarginafter_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.equitywithloanafter_ = from._impl_.equitywithloanafter_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.commissionandfees_ = from._impl_.commissionandfees_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.mincommissionandfees_ = from._impl_.mincommissionandfees_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.maxcommissionandfees_ = from._impl_.maxcommissionandfees_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.initmarginbeforeoutsiderth_ = from._impl_.initmarginbeforeoutsiderth_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.maintmarginbeforeoutsiderth_ = from._impl_.maintmarginbeforeoutsiderth_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.equitywithloanbeforeoutsiderth_ = from._impl_.equitywithloanbeforeoutsiderth_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.initmarginchangeoutsiderth_ = from._impl_.initmarginchangeoutsiderth_;
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.maintmarginchangeoutsiderth_ = from._impl_.maintmarginchangeoutsiderth_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.equitywithloanchangeoutsiderth_ = from._impl_.equitywithloanchangeoutsiderth_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.initmarginafteroutsiderth_ = from._impl_.initmarginafteroutsiderth_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.maintmarginafteroutsiderth_ = from._impl_.maintmarginafteroutsiderth_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.equitywithloanafteroutsiderth_ = from._impl_.equitywithloanafteroutsiderth_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderState::CopyFrom(const OrderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.OrderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OrderState::InternalSwap(OrderState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.orderallocations_.InternalSwap(&other->_impl_.orderallocations_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commissionandfeescurrency_, &other->_impl_.commissionandfeescurrency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margincurrency_, &other->_impl_.margincurrency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.suggestedsize_, &other->_impl_.suggestedsize_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rejectreason_, &other->_impl_.rejectreason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.warningtext_, &other->_impl_.warningtext_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.completedtime_, &other->_impl_.completedtime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.completedstatus_, &other->_impl_.completedstatus_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderState, _impl_.equitywithloanafteroutsiderth_)
      + sizeof(OrderState::_impl_.equitywithloanafteroutsiderth_)
      - PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initmarginbefore_)>(
          reinterpret_cast<char*>(&_impl_.initmarginbefore_),
          reinterpret_cast<char*>(&other->_impl_.initmarginbefore_));
}

::google::protobuf::Metadata OrderState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_OrderState_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
