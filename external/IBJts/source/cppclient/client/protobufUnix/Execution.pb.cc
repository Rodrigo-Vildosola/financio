// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Execution.proto
// Protobuf C++ Version: 5.29.3

#include "Execution.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {

inline constexpr Execution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        execid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        acctnumber_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shares_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cumqty_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        orderref_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        evrule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        modelcode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        submitter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        orderid_{0},
        clientid_{0},
        price_{0},
        permid_{::int64_t{0}},
        avgprice_{0},
        evmultiplier_{0},
        isliquidation_{false},
        ispricerevisionpending_{false},
        lastliquidity_{0},
        optexerciseorlapsetype_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Execution::Execution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExecutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionDefaultTypeInternal() {}
  union {
    Execution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionDefaultTypeInternal _Execution_default_instance_;
}  // namespace protobuf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Execution_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Execution_2eproto = nullptr;
const ::uint32_t
    TableStruct_Execution_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.orderid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.execid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.acctnumber_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.shares_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.permid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.clientid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.isliquidation_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.cumqty_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.avgprice_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.orderref_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.evrule_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.evmultiplier_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.modelcode_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.lastliquidity_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.ispricerevisionpending_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.submitter_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _impl_.optexerciseorlapsetype_),
        11,
        0,
        1,
        2,
        3,
        4,
        5,
        13,
        14,
        12,
        17,
        6,
        15,
        7,
        8,
        16,
        9,
        19,
        18,
        10,
        20,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 29, -1, sizeof(::protobuf::Execution)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_Execution_default_instance_._instance,
};
const char descriptor_table_protodef_Execution_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017Execution.proto\022\010protobuf\"\257\006\n\tExecutio"
    "n\022\024\n\007orderId\030\001 \001(\005H\000\210\001\001\022\023\n\006execId\030\002 \001(\tH"
    "\001\210\001\001\022\021\n\004time\030\003 \001(\tH\002\210\001\001\022\027\n\nacctNumber\030\004 "
    "\001(\tH\003\210\001\001\022\025\n\010exchange\030\005 \001(\tH\004\210\001\001\022\021\n\004side\030"
    "\006 \001(\tH\005\210\001\001\022\023\n\006shares\030\007 \001(\tH\006\210\001\001\022\022\n\005price"
    "\030\010 \001(\001H\007\210\001\001\022\023\n\006permId\030\t \001(\003H\010\210\001\001\022\025\n\010clie"
    "ntId\030\n \001(\005H\t\210\001\001\022\032\n\risLiquidation\030\013 \001(\010H\n"
    "\210\001\001\022\023\n\006cumQty\030\014 \001(\tH\013\210\001\001\022\025\n\010avgPrice\030\r \001"
    "(\001H\014\210\001\001\022\025\n\010orderRef\030\016 \001(\tH\r\210\001\001\022\023\n\006evRule"
    "\030\017 \001(\tH\016\210\001\001\022\031\n\014evMultiplier\030\020 \001(\001H\017\210\001\001\022\026"
    "\n\tmodelCode\030\021 \001(\tH\020\210\001\001\022\032\n\rlastLiquidity\030"
    "\022 \001(\005H\021\210\001\001\022#\n\026isPriceRevisionPending\030\023 \001"
    "(\010H\022\210\001\001\022\026\n\tsubmitter\030\024 \001(\tH\023\210\001\001\022#\n\026optEx"
    "erciseOrLapseType\030\025 \001(\005H\024\210\001\001B\n\n\010_orderId"
    "B\t\n\007_execIdB\007\n\005_timeB\r\n\013_acctNumberB\013\n\t_"
    "exchangeB\007\n\005_sideB\t\n\007_sharesB\010\n\006_priceB\t"
    "\n\007_permIdB\013\n\t_clientIdB\020\n\016_isLiquidation"
    "B\t\n\007_cumQtyB\013\n\t_avgPriceB\013\n\t_orderRefB\t\n"
    "\007_evRuleB\017\n\r_evMultiplierB\014\n\n_modelCodeB"
    "\020\n\016_lastLiquidityB\031\n\027_isPriceRevisionPen"
    "dingB\014\n\n_submitterB\031\n\027_optExerciseOrLaps"
    "eTypeB9\n\026com.ib.client.protobufB\016Executi"
    "onProto\252\002\016IBApi.protobufb\006proto3"
};
static ::absl::once_flag descriptor_table_Execution_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Execution_2eproto = {
    false,
    false,
    912,
    descriptor_table_protodef_Execution_2eproto,
    "Execution.proto",
    &descriptor_table_Execution_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_Execution_2eproto::offsets,
    file_level_enum_descriptors_Execution_2eproto,
    file_level_service_descriptors_Execution_2eproto,
};
namespace protobuf {
// ===================================================================

class Execution::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Execution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Execution, _impl_._has_bits_);
};

Execution::Execution(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Execution)
}
inline PROTOBUF_NDEBUG_INLINE Execution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf::Execution& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        execid_(arena, from.execid_),
        time_(arena, from.time_),
        acctnumber_(arena, from.acctnumber_),
        exchange_(arena, from.exchange_),
        side_(arena, from.side_),
        shares_(arena, from.shares_),
        cumqty_(arena, from.cumqty_),
        orderref_(arena, from.orderref_),
        evrule_(arena, from.evrule_),
        modelcode_(arena, from.modelcode_),
        submitter_(arena, from.submitter_) {}

Execution::Execution(
    ::google::protobuf::Arena* arena,
    const Execution& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Execution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, orderid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, orderid_),
           offsetof(Impl_, optexerciseorlapsetype_) -
               offsetof(Impl_, orderid_) +
               sizeof(Impl_::optexerciseorlapsetype_));

  // @@protoc_insertion_point(copy_constructor:protobuf.Execution)
}
inline PROTOBUF_NDEBUG_INLINE Execution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        execid_(arena),
        time_(arena),
        acctnumber_(arena),
        exchange_(arena),
        side_(arena),
        shares_(arena),
        cumqty_(arena),
        orderref_(arena),
        evrule_(arena),
        modelcode_(arena),
        submitter_(arena) {}

inline void Execution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, orderid_),
           0,
           offsetof(Impl_, optexerciseorlapsetype_) -
               offsetof(Impl_, orderid_) +
               sizeof(Impl_::optexerciseorlapsetype_));
}
Execution::~Execution() {
  // @@protoc_insertion_point(destructor:protobuf.Execution)
  SharedDtor(*this);
}
inline void Execution::SharedDtor(MessageLite& self) {
  Execution& this_ = static_cast<Execution&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.execid_.Destroy();
  this_._impl_.time_.Destroy();
  this_._impl_.acctnumber_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.side_.Destroy();
  this_._impl_.shares_.Destroy();
  this_._impl_.cumqty_.Destroy();
  this_._impl_.orderref_.Destroy();
  this_._impl_.evrule_.Destroy();
  this_._impl_.modelcode_.Destroy();
  this_._impl_.submitter_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Execution::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Execution(arena);
}
constexpr auto Execution::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Execution),
                                            alignof(Execution));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Execution::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Execution_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Execution::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Execution>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Execution::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Execution>(), &Execution::ByteSizeLong,
            &Execution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Execution, _impl_._cached_size_),
        false,
    },
    &Execution::kDescriptorMethods,
    &descriptor_table_Execution_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Execution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 0, 119, 2> Execution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Execution, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Execution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 orderId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Execution, _impl_.orderid_), 11>(),
     {8, 11, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.orderid_)}},
    // optional string execId = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.execid_)}},
    // optional string time = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.time_)}},
    // optional string acctNumber = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.acctnumber_)}},
    // optional string exchange = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.exchange_)}},
    // optional string side = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 4, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.side_)}},
    // optional string shares = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 5, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.shares_)}},
    // optional double price = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 13, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.price_)}},
    // optional int64 permId = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Execution, _impl_.permid_), 14>(),
     {72, 14, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.permid_)}},
    // optional int32 clientId = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Execution, _impl_.clientid_), 12>(),
     {80, 12, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.clientid_)}},
    // optional bool isLiquidation = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Execution, _impl_.isliquidation_), 17>(),
     {88, 17, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.isliquidation_)}},
    // optional string cumQty = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 6, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.cumqty_)}},
    // optional double avgPrice = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 15, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.avgprice_)}},
    // optional string orderRef = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 7, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.orderref_)}},
    // optional string evRule = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 8, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.evrule_)}},
    // optional double evMultiplier = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 16, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.evmultiplier_)}},
    // optional string modelCode = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 9, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.modelcode_)}},
    // optional int32 lastLiquidity = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 19, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.lastliquidity_)}},
    // optional bool isPriceRevisionPending = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.ispricerevisionpending_)}},
    // optional string submitter = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 10, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.submitter_)}},
    // optional int32 optExerciseOrLapseType = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 20, 0, PROTOBUF_FIELD_OFFSET(Execution, _impl_.optexerciseorlapsetype_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 orderId = 1;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.orderid_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string execId = 2;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.execid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string time = 3;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string acctNumber = 4;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.acctnumber_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string exchange = 5;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.exchange_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string side = 6;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.side_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string shares = 7;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.shares_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double price = 8;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.price_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int64 permId = 9;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.permid_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 clientId = 10;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.clientid_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool isLiquidation = 11;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.isliquidation_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string cumQty = 12;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.cumqty_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double avgPrice = 13;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.avgprice_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string orderRef = 14;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.orderref_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string evRule = 15;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.evrule_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double evMultiplier = 16;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.evmultiplier_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string modelCode = 17;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.modelcode_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 lastLiquidity = 18;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.lastliquidity_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool isPriceRevisionPending = 19;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.ispricerevisionpending_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string submitter = 20;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.submitter_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 optExerciseOrLapseType = 21;
    {PROTOBUF_FIELD_OFFSET(Execution, _impl_.optexerciseorlapsetype_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\6\4\12\10\4\6\0\0\0\0\6\0\10\6\0\11\0\0\11\0\0\0"
    "protobuf.Execution"
    "execId"
    "time"
    "acctNumber"
    "exchange"
    "side"
    "shares"
    "cumQty"
    "orderRef"
    "evRule"
    "modelCode"
    "submitter"
  }},
};

PROTOBUF_NOINLINE void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Execution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.execid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.acctnumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.shares_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.cumqty_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.orderref_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.evrule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.modelcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.submitter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.orderid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.avgprice_) -
        reinterpret_cast<char*>(&_impl_.orderid_)) + sizeof(_impl_.avgprice_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.evmultiplier_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.optexerciseorlapsetype_) -
        reinterpret_cast<char*>(&_impl_.evmultiplier_)) + sizeof(_impl_.optexerciseorlapsetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Execution::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Execution& this_ = static_cast<const Execution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Execution::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Execution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf.Execution)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 orderId = 1;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_orderid(), target);
          }

          // optional string execId = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_execid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.execId");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // optional string time = 3;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.time");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional string acctNumber = 4;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_acctnumber();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.acctNumber");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // optional string exchange = 5;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.exchange");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional string side = 6;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_side();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.side");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // optional string shares = 7;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_shares();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.shares");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // optional double price = 8;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_price(), target);
          }

          // optional int64 permId = 9;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<9>(
                    stream, this_._internal_permid(), target);
          }

          // optional int32 clientId = 10;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_clientid(), target);
          }

          // optional bool isLiquidation = 11;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_isliquidation(), target);
          }

          // optional string cumQty = 12;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_cumqty();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.cumQty");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // optional double avgPrice = 13;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_avgprice(), target);
          }

          // optional string orderRef = 14;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_orderref();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.orderRef");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // optional string evRule = 15;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_evrule();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.evRule");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // optional double evMultiplier = 16;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_evmultiplier(), target);
          }

          // optional string modelCode = 17;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_modelcode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.modelCode");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // optional int32 lastLiquidity = 18;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                18, this_._internal_lastliquidity(), target);
          }

          // optional bool isPriceRevisionPending = 19;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                19, this_._internal_ispricerevisionpending(), target);
          }

          // optional string submitter = 20;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_submitter();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Execution.submitter");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // optional int32 optExerciseOrLapseType = 21;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                21, this_._internal_optexerciseorlapsetype(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf.Execution)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Execution::ByteSizeLong(const MessageLite& base) {
          const Execution& this_ = static_cast<const Execution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Execution::ByteSizeLong() const {
          const Execution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf.Execution)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string execId = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_execid());
            }
            // optional string time = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_time());
            }
            // optional string acctNumber = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_acctnumber());
            }
            // optional string exchange = 5;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // optional string side = 6;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_side());
            }
            // optional string shares = 7;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_shares());
            }
            // optional string cumQty = 12;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cumqty());
            }
            // optional string orderRef = 14;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_orderref());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string evRule = 15;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_evrule());
            }
            // optional string modelCode = 17;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_modelcode());
            }
            // optional string submitter = 20;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_submitter());
            }
            // optional int32 orderId = 1;
            if (cached_has_bits & 0x00000800u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_orderid());
            }
            // optional int32 clientId = 10;
            if (cached_has_bits & 0x00001000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_clientid());
            }
            // optional double price = 8;
            if (cached_has_bits & 0x00002000u) {
              total_size += 9;
            }
            // optional int64 permId = 9;
            if (cached_has_bits & 0x00004000u) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_permid());
            }
            // optional double avgPrice = 13;
            if (cached_has_bits & 0x00008000u) {
              total_size += 9;
            }
          }
          if (cached_has_bits & 0x001f0000u) {
            // optional double evMultiplier = 16;
            if (cached_has_bits & 0x00010000u) {
              total_size += 10;
            }
            // optional bool isLiquidation = 11;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2;
            }
            // optional bool isPriceRevisionPending = 19;
            if (cached_has_bits & 0x00040000u) {
              total_size += 3;
            }
            // optional int32 lastLiquidity = 18;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_lastliquidity());
            }
            // optional int32 optExerciseOrLapseType = 21;
            if (cached_has_bits & 0x00100000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_optexerciseorlapsetype());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Execution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Execution*>(&to_msg);
  auto& from = static_cast<const Execution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Execution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_execid(from._internal_execid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_acctnumber(from._internal_acctnumber());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_shares(from._internal_shares());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_cumqty(from._internal_cumqty());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_orderref(from._internal_orderref());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_evrule(from._internal_evrule());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_modelcode(from._internal_modelcode());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_submitter(from._internal_submitter());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.orderid_ = from._impl_.orderid_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.clientid_ = from._impl_.clientid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.permid_ = from._impl_.permid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.avgprice_ = from._impl_.avgprice_;
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.evmultiplier_ = from._impl_.evmultiplier_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.isliquidation_ = from._impl_.isliquidation_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.ispricerevisionpending_ = from._impl_.ispricerevisionpending_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.lastliquidity_ = from._impl_.lastliquidity_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.optexerciseorlapsetype_ = from._impl_.optexerciseorlapsetype_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Execution::InternalSwap(Execution* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execid_, &other->_impl_.execid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acctnumber_, &other->_impl_.acctnumber_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.side_, &other->_impl_.side_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shares_, &other->_impl_.shares_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cumqty_, &other->_impl_.cumqty_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orderref_, &other->_impl_.orderref_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evrule_, &other->_impl_.evrule_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modelcode_, &other->_impl_.modelcode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.submitter_, &other->_impl_.submitter_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execution, _impl_.optexerciseorlapsetype_)
      + sizeof(Execution::_impl_.optexerciseorlapsetype_)
      - PROTOBUF_FIELD_OFFSET(Execution, _impl_.orderid_)>(
          reinterpret_cast<char*>(&_impl_.orderid_),
          reinterpret_cast<char*>(&other->_impl_.orderid_));
}

::google::protobuf::Metadata Execution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Execution_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
