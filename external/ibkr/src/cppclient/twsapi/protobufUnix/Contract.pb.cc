// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Contract.proto
// Protobuf C++ Version: 5.29.3

#include "Contract.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {

inline constexpr Contract::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        combolegs_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sectype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lasttradedateorcontractmonth_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        right_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primaryexch_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        localsymbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tradingclass_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        secidtype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        secid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issuerid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        combolegsdescrip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deltaneutralcontract_{nullptr},
        strike_{0},
        multiplier_{0},
        conid_{0},
        includeexpired_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Contract::Contract(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractDefaultTypeInternal() {}
  union {
    Contract _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractDefaultTypeInternal _Contract_default_instance_;
}  // namespace protobuf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Contract_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Contract_2eproto = nullptr;
const ::uint32_t
    TableStruct_Contract_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.conid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.sectype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.lasttradedateorcontractmonth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.strike_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.right_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.multiplier_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.primaryexch_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.localsymbol_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.tradingclass_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.secidtype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.secid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.issuerid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.deltaneutralcontract_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.includeexpired_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.combolegsdescrip_),
        PROTOBUF_FIELD_OFFSET(::protobuf::Contract, _impl_.combolegs_),
        17,
        0,
        1,
        2,
        15,
        3,
        16,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        18,
        13,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 28, -1, sizeof(::protobuf::Contract)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_Contract_default_instance_._instance,
};
const char descriptor_table_protodef_Contract_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016Contract.proto\022\010protobuf\032\016ComboLeg.pro"
    "to\032\032DeltaNeutralContract.proto\"\335\006\n\010Contr"
    "act\022\022\n\005conId\030\001 \001(\005H\000\210\001\001\022\023\n\006symbol\030\002 \001(\tH"
    "\001\210\001\001\022\024\n\007secType\030\003 \001(\tH\002\210\001\001\022)\n\034lastTradeD"
    "ateOrContractMonth\030\004 \001(\tH\003\210\001\001\022\023\n\006strike\030"
    "\005 \001(\001H\004\210\001\001\022\022\n\005right\030\006 \001(\tH\005\210\001\001\022\027\n\nmultip"
    "lier\030\007 \001(\001H\006\210\001\001\022\025\n\010exchange\030\010 \001(\tH\007\210\001\001\022\030"
    "\n\013primaryExch\030\t \001(\tH\010\210\001\001\022\025\n\010currency\030\n \001"
    "(\tH\t\210\001\001\022\030\n\013localSymbol\030\013 \001(\tH\n\210\001\001\022\031\n\014tra"
    "dingClass\030\014 \001(\tH\013\210\001\001\022\026\n\tsecIdType\030\r \001(\tH"
    "\014\210\001\001\022\022\n\005secId\030\016 \001(\tH\r\210\001\001\022\030\n\013description\030"
    "\017 \001(\tH\016\210\001\001\022\025\n\010issuerId\030\020 \001(\tH\017\210\001\001\022A\n\024del"
    "taNeutralContract\030\021 \001(\0132\036.protobuf.Delta"
    "NeutralContractH\020\210\001\001\022\033\n\016includeExpired\030\022"
    " \001(\010H\021\210\001\001\022\035\n\020comboLegsDescrip\030\023 \001(\tH\022\210\001\001"
    "\022%\n\tcomboLegs\030\024 \003(\0132\022.protobuf.ComboLegB"
    "\010\n\006_conIdB\t\n\007_symbolB\n\n\010_secTypeB\037\n\035_las"
    "tTradeDateOrContractMonthB\t\n\007_strikeB\010\n\006"
    "_rightB\r\n\013_multiplierB\013\n\t_exchangeB\016\n\014_p"
    "rimaryExchB\013\n\t_currencyB\016\n\014_localSymbolB"
    "\017\n\r_tradingClassB\014\n\n_secIdTypeB\010\n\006_secId"
    "B\016\n\014_descriptionB\013\n\t_issuerIdB\027\n\025_deltaN"
    "eutralContractB\021\n\017_includeExpiredB\023\n\021_co"
    "mboLegsDescripB8\n\026com.ib.client.protobuf"
    "B\rContractProto\252\002\016IBApi.protobufb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Contract_2eproto_deps[2] =
    {
        &::descriptor_table_ComboLeg_2eproto,
        &::descriptor_table_DeltaNeutralContract_2eproto,
};
static ::absl::once_flag descriptor_table_Contract_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Contract_2eproto = {
    false,
    false,
    1000,
    descriptor_table_protodef_Contract_2eproto,
    "Contract.proto",
    &descriptor_table_Contract_2eproto_once,
    descriptor_table_Contract_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_Contract_2eproto::offsets,
    file_level_enum_descriptors_Contract_2eproto,
    file_level_service_descriptors_Contract_2eproto,
};
namespace protobuf {
// ===================================================================

class Contract::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Contract>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Contract, _impl_._has_bits_);
};

void Contract::clear_deltaneutralcontract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deltaneutralcontract_ != nullptr) _impl_.deltaneutralcontract_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Contract::clear_combolegs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.combolegs_.Clear();
}
Contract::Contract(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Contract)
}
inline PROTOBUF_NDEBUG_INLINE Contract::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf::Contract& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        combolegs_{visibility, arena, from.combolegs_},
        symbol_(arena, from.symbol_),
        sectype_(arena, from.sectype_),
        lasttradedateorcontractmonth_(arena, from.lasttradedateorcontractmonth_),
        right_(arena, from.right_),
        exchange_(arena, from.exchange_),
        primaryexch_(arena, from.primaryexch_),
        currency_(arena, from.currency_),
        localsymbol_(arena, from.localsymbol_),
        tradingclass_(arena, from.tradingclass_),
        secidtype_(arena, from.secidtype_),
        secid_(arena, from.secid_),
        description_(arena, from.description_),
        issuerid_(arena, from.issuerid_),
        combolegsdescrip_(arena, from.combolegsdescrip_) {}

Contract::Contract(
    ::google::protobuf::Arena* arena,
    const Contract& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Contract* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.deltaneutralcontract_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::protobuf::DeltaNeutralContract>(
                              arena, *from._impl_.deltaneutralcontract_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, strike_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, strike_),
           offsetof(Impl_, includeexpired_) -
               offsetof(Impl_, strike_) +
               sizeof(Impl_::includeexpired_));

  // @@protoc_insertion_point(copy_constructor:protobuf.Contract)
}
inline PROTOBUF_NDEBUG_INLINE Contract::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        combolegs_{visibility, arena},
        symbol_(arena),
        sectype_(arena),
        lasttradedateorcontractmonth_(arena),
        right_(arena),
        exchange_(arena),
        primaryexch_(arena),
        currency_(arena),
        localsymbol_(arena),
        tradingclass_(arena),
        secidtype_(arena),
        secid_(arena),
        description_(arena),
        issuerid_(arena),
        combolegsdescrip_(arena) {}

inline void Contract::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, deltaneutralcontract_),
           0,
           offsetof(Impl_, includeexpired_) -
               offsetof(Impl_, deltaneutralcontract_) +
               sizeof(Impl_::includeexpired_));
}
Contract::~Contract() {
  // @@protoc_insertion_point(destructor:protobuf.Contract)
  SharedDtor(*this);
}
inline void Contract::SharedDtor(MessageLite& self) {
  Contract& this_ = static_cast<Contract&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.sectype_.Destroy();
  this_._impl_.lasttradedateorcontractmonth_.Destroy();
  this_._impl_.right_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.primaryexch_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.localsymbol_.Destroy();
  this_._impl_.tradingclass_.Destroy();
  this_._impl_.secidtype_.Destroy();
  this_._impl_.secid_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.issuerid_.Destroy();
  this_._impl_.combolegsdescrip_.Destroy();
  delete this_._impl_.deltaneutralcontract_;
  this_._impl_.~Impl_();
}

inline void* Contract::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Contract(arena);
}
constexpr auto Contract::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Contract, _impl_.combolegs_) +
          decltype(Contract::_impl_.combolegs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Contract), alignof(Contract), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Contract::PlacementNew_,
                                 sizeof(Contract),
                                 alignof(Contract));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Contract::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Contract_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Contract::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Contract>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Contract::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Contract>(), &Contract::ByteSizeLong,
            &Contract::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Contract, _impl_._cached_size_),
        false,
    },
    &Contract::kDescriptorMethods,
    &descriptor_table_Contract_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Contract::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 2, 187, 2> Contract::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Contract, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::Contract>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 conId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Contract, _impl_.conid_), 17>(),
     {8, 17, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.conid_)}},
    // optional string symbol = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.symbol_)}},
    // optional string secType = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.sectype_)}},
    // optional string lastTradeDateOrContractMonth = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.lasttradedateorcontractmonth_)}},
    // optional double strike = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 15, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.strike_)}},
    // optional string right = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.right_)}},
    // optional double multiplier = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 16, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.multiplier_)}},
    // optional string exchange = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.exchange_)}},
    // optional string primaryExch = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 5, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.primaryexch_)}},
    // optional string currency = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 6, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.currency_)}},
    // optional string localSymbol = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 7, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.localsymbol_)}},
    // optional string tradingClass = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 8, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.tradingclass_)}},
    // optional string secIdType = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 9, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.secidtype_)}},
    // optional string secId = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 10, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.secid_)}},
    // optional string description = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 11, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.description_)}},
    // optional string issuerId = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 12, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.issuerid_)}},
    // optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 14, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.deltaneutralcontract_)}},
    // optional bool includeExpired = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 18, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.includeexpired_)}},
    // optional string comboLegsDescrip = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 13, 0, PROTOBUF_FIELD_OFFSET(Contract, _impl_.combolegsdescrip_)}},
    // repeated .protobuf.ComboLeg comboLegs = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 1, PROTOBUF_FIELD_OFFSET(Contract, _impl_.combolegs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 conId = 1;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.conid_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string symbol = 2;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string secType = 3;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.sectype_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string lastTradeDateOrContractMonth = 4;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.lasttradedateorcontractmonth_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double strike = 5;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.strike_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string right = 6;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.right_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double multiplier = 7;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.multiplier_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string exchange = 8;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.exchange_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string primaryExch = 9;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.primaryexch_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string currency = 10;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.currency_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string localSymbol = 11;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.localsymbol_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string tradingClass = 12;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.tradingclass_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string secIdType = 13;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.secidtype_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string secId = 14;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.secid_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string description = 15;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.description_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string issuerId = 16;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.issuerid_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.deltaneutralcontract_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool includeExpired = 18;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.includeexpired_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string comboLegsDescrip = 19;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.combolegsdescrip_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .protobuf.ComboLeg comboLegs = 20;
    {PROTOBUF_FIELD_OFFSET(Contract, _impl_.combolegs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::DeltaNeutralContract>()},
    {::_pbi::TcParser::GetTable<::protobuf::ComboLeg>()},
  }}, {{
    "\21\0\6\7\34\0\5\0\10\13\10\13\14\11\5\13\10\0\0\20\0\0\0\0"
    "protobuf.Contract"
    "symbol"
    "secType"
    "lastTradeDateOrContractMonth"
    "right"
    "exchange"
    "primaryExch"
    "currency"
    "localSymbol"
    "tradingClass"
    "secIdType"
    "secId"
    "description"
    "issuerId"
    "comboLegsDescrip"
  }},
};

PROTOBUF_NOINLINE void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Contract)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.combolegs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lasttradedateorcontractmonth_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.right_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.primaryexch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.localsymbol_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.tradingclass_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.secidtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.secid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.issuerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.combolegsdescrip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.deltaneutralcontract_ != nullptr);
      _impl_.deltaneutralcontract_->Clear();
    }
  }
  _impl_.strike_ = 0;
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.multiplier_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.includeexpired_) -
        reinterpret_cast<char*>(&_impl_.multiplier_)) + sizeof(_impl_.includeexpired_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Contract::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Contract& this_ = static_cast<const Contract&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Contract::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Contract& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf.Contract)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 conId = 1;
          if (cached_has_bits & 0x00020000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_conid(), target);
          }

          // optional string symbol = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.symbol");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // optional string secType = 3;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_sectype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.secType");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional string lastTradeDateOrContractMonth = 4;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_lasttradedateorcontractmonth();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.lastTradeDateOrContractMonth");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // optional double strike = 5;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_strike(), target);
          }

          // optional string right = 6;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_right();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.right");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // optional double multiplier = 7;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_multiplier(), target);
          }

          // optional string exchange = 8;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.exchange");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // optional string primaryExch = 9;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_primaryexch();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.primaryExch");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // optional string currency = 10;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.currency");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // optional string localSymbol = 11;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_localsymbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.localSymbol");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // optional string tradingClass = 12;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_tradingclass();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.tradingClass");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // optional string secIdType = 13;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_secidtype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.secIdType");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // optional string secId = 14;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_secid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.secId");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // optional string description = 15;
          if (cached_has_bits & 0x00000800u) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.description");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // optional string issuerId = 16;
          if (cached_has_bits & 0x00001000u) {
            const std::string& _s = this_._internal_issuerid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.issuerId");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.deltaneutralcontract_, this_._impl_.deltaneutralcontract_->GetCachedSize(), target,
                stream);
          }

          // optional bool includeExpired = 18;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_includeexpired(), target);
          }

          // optional string comboLegsDescrip = 19;
          if (cached_has_bits & 0x00002000u) {
            const std::string& _s = this_._internal_combolegsdescrip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Contract.comboLegsDescrip");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // repeated .protobuf.ComboLeg comboLegs = 20;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_combolegs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_combolegs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    20, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf.Contract)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Contract::ByteSizeLong(const MessageLite& base) {
          const Contract& this_ = static_cast<const Contract&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Contract::ByteSizeLong() const {
          const Contract& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf.Contract)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protobuf.ComboLeg comboLegs = 20;
            {
              total_size += 2UL * this_._internal_combolegs_size();
              for (const auto& msg : this_._internal_combolegs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string symbol = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // optional string secType = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sectype());
            }
            // optional string lastTradeDateOrContractMonth = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_lasttradedateorcontractmonth());
            }
            // optional string right = 6;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_right());
            }
            // optional string exchange = 8;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // optional string primaryExch = 9;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_primaryexch());
            }
            // optional string currency = 10;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // optional string localSymbol = 11;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_localsymbol());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string tradingClass = 12;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tradingclass());
            }
            // optional string secIdType = 13;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_secidtype());
            }
            // optional string secId = 14;
            if (cached_has_bits & 0x00000400u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_secid());
            }
            // optional string description = 15;
            if (cached_has_bits & 0x00000800u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // optional string issuerId = 16;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issuerid());
            }
            // optional string comboLegsDescrip = 19;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_combolegsdescrip());
            }
            // optional .protobuf.DeltaNeutralContract deltaNeutralContract = 17;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.deltaneutralcontract_);
            }
            // optional double strike = 5;
            if (cached_has_bits & 0x00008000u) {
              total_size += 9;
            }
          }
          if (cached_has_bits & 0x00070000u) {
            // optional double multiplier = 7;
            if (cached_has_bits & 0x00010000u) {
              total_size += 9;
            }
            // optional int32 conId = 1;
            if (cached_has_bits & 0x00020000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_conid());
            }
            // optional bool includeExpired = 18;
            if (cached_has_bits & 0x00040000u) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Contract::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Contract*>(&to_msg);
  auto& from = static_cast<const Contract&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Contract)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_combolegs()->MergeFrom(
      from._internal_combolegs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sectype(from._internal_sectype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_lasttradedateorcontractmonth(from._internal_lasttradedateorcontractmonth());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_right(from._internal_right());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_primaryexch(from._internal_primaryexch());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_localsymbol(from._internal_localsymbol());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_tradingclass(from._internal_tradingclass());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_secidtype(from._internal_secidtype());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_secid(from._internal_secid());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_issuerid(from._internal_issuerid());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_combolegsdescrip(from._internal_combolegsdescrip());
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.deltaneutralcontract_ != nullptr);
      if (_this->_impl_.deltaneutralcontract_ == nullptr) {
        _this->_impl_.deltaneutralcontract_ =
            ::google::protobuf::Message::CopyConstruct<::protobuf::DeltaNeutralContract>(arena, *from._impl_.deltaneutralcontract_);
      } else {
        _this->_impl_.deltaneutralcontract_->MergeFrom(*from._impl_.deltaneutralcontract_);
      }
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.strike_ = from._impl_.strike_;
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.multiplier_ = from._impl_.multiplier_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.conid_ = from._impl_.conid_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.includeexpired_ = from._impl_.includeexpired_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Contract::InternalSwap(Contract* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.combolegs_.InternalSwap(&other->_impl_.combolegs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sectype_, &other->_impl_.sectype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.lasttradedateorcontractmonth_, &other->_impl_.lasttradedateorcontractmonth_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.right_, &other->_impl_.right_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primaryexch_, &other->_impl_.primaryexch_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.localsymbol_, &other->_impl_.localsymbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tradingclass_, &other->_impl_.tradingclass_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secidtype_, &other->_impl_.secidtype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secid_, &other->_impl_.secid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issuerid_, &other->_impl_.issuerid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.combolegsdescrip_, &other->_impl_.combolegsdescrip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contract, _impl_.includeexpired_)
      + sizeof(Contract::_impl_.includeexpired_)
      - PROTOBUF_FIELD_OFFSET(Contract, _impl_.deltaneutralcontract_)>(
          reinterpret_cast<char*>(&_impl_.deltaneutralcontract_),
          reinterpret_cast<char*>(&other->_impl_.deltaneutralcontract_));
}

::google::protobuf::Metadata Contract::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Contract_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
