// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Execution.proto
// Protobuf C++ Version: 6.32.1

#ifndef Execution_2eproto_2epb_2eh
#define Execution_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Execution_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Execution_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_Execution_2eproto;
}  // extern "C"
namespace protobuf {
class Execution;
struct ExecutionDefaultTypeInternal;
extern ExecutionDefaultTypeInternal _Execution_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Execution_class_data_;
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class Execution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.Execution) */ {
 public:
  inline Execution() : Execution(nullptr) {}
  ~Execution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Execution* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Execution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Execution(::google::protobuf::internal::ConstantInitialized);

  inline Execution(const Execution& from) : Execution(nullptr, from) {}
  inline Execution(Execution&& from) noexcept
      : Execution(nullptr, ::std::move(from)) {}
  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Execution& operator=(Execution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Execution& default_instance() {
    return *reinterpret_cast<const Execution*>(
        &_Execution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Execution& a, Execution& b) { a.Swap(&b); }
  inline void Swap(Execution* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Execution* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Execution* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Execution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Execution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Execution& from) { Execution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Execution* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.Execution"; }

 protected:
  explicit Execution(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Execution(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Execution& from);
  Execution(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Execution&& from) noexcept
      : Execution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExecIdFieldNumber = 2,
    kTimeFieldNumber = 3,
    kAcctNumberFieldNumber = 4,
    kExchangeFieldNumber = 5,
    kSideFieldNumber = 6,
    kSharesFieldNumber = 7,
    kCumQtyFieldNumber = 12,
    kOrderRefFieldNumber = 14,
    kEvRuleFieldNumber = 15,
    kModelCodeFieldNumber = 17,
    kSubmitterFieldNumber = 20,
    kOrderIdFieldNumber = 1,
    kClientIdFieldNumber = 10,
    kPriceFieldNumber = 8,
    kPermIdFieldNumber = 9,
    kAvgPriceFieldNumber = 13,
    kEvMultiplierFieldNumber = 16,
    kIsLiquidationFieldNumber = 11,
    kIsPriceRevisionPendingFieldNumber = 19,
    kLastLiquidityFieldNumber = 18,
    kOptExerciseOrLapseTypeFieldNumber = 21,
  };
  // optional string execId = 2;
  bool has_execid() const;
  void clear_execid() ;
  const ::std::string& execid() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_execid(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_execid();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_execid();
  void set_allocated_execid(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_execid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_execid(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_execid();

  public:
  // optional string time = 3;
  bool has_time() const;
  void clear_time() ;
  const ::std::string& time() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_time();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_time();
  void set_allocated_time(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_time() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_time(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_time();

  public:
  // optional string acctNumber = 4;
  bool has_acctnumber() const;
  void clear_acctnumber() ;
  const ::std::string& acctnumber() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_acctnumber(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_acctnumber();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_acctnumber();
  void set_allocated_acctnumber(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_acctnumber() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_acctnumber(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_acctnumber();

  public:
  // optional string exchange = 5;
  bool has_exchange() const;
  void clear_exchange() ;
  const ::std::string& exchange() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_exchange();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_exchange();
  void set_allocated_exchange(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_exchange() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_exchange();

  public:
  // optional string side = 6;
  bool has_side() const;
  void clear_side() ;
  const ::std::string& side() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_side(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_side();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_side();
  void set_allocated_side(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_side() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_side(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_side();

  public:
  // optional string shares = 7;
  bool has_shares() const;
  void clear_shares() ;
  const ::std::string& shares() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_shares(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_shares();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_shares();
  void set_allocated_shares(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_shares() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_shares(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_shares();

  public:
  // optional string cumQty = 12;
  bool has_cumqty() const;
  void clear_cumqty() ;
  const ::std::string& cumqty() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_cumqty(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_cumqty();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_cumqty();
  void set_allocated_cumqty(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_cumqty() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cumqty(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_cumqty();

  public:
  // optional string orderRef = 14;
  bool has_orderref() const;
  void clear_orderref() ;
  const ::std::string& orderref() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_orderref(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_orderref();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_orderref();
  void set_allocated_orderref(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_orderref() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_orderref(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_orderref();

  public:
  // optional string evRule = 15;
  bool has_evrule() const;
  void clear_evrule() ;
  const ::std::string& evrule() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_evrule(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_evrule();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_evrule();
  void set_allocated_evrule(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_evrule() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_evrule(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_evrule();

  public:
  // optional string modelCode = 17;
  bool has_modelcode() const;
  void clear_modelcode() ;
  const ::std::string& modelcode() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_modelcode(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_modelcode();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_modelcode();
  void set_allocated_modelcode(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_modelcode() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_modelcode(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_modelcode();

  public:
  // optional string submitter = 20;
  bool has_submitter() const;
  void clear_submitter() ;
  const ::std::string& submitter() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_submitter(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_submitter();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_submitter();
  void set_allocated_submitter(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_submitter() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_submitter(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_submitter();

  public:
  // optional int32 orderId = 1;
  bool has_orderid() const;
  void clear_orderid() ;
  ::int32_t orderid() const;
  void set_orderid(::int32_t value);

  private:
  ::int32_t _internal_orderid() const;
  void _internal_set_orderid(::int32_t value);

  public:
  // optional int32 clientId = 10;
  bool has_clientid() const;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // optional double price = 8;
  bool has_price() const;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // optional int64 permId = 9;
  bool has_permid() const;
  void clear_permid() ;
  ::int64_t permid() const;
  void set_permid(::int64_t value);

  private:
  ::int64_t _internal_permid() const;
  void _internal_set_permid(::int64_t value);

  public:
  // optional double avgPrice = 13;
  bool has_avgprice() const;
  void clear_avgprice() ;
  double avgprice() const;
  void set_avgprice(double value);

  private:
  double _internal_avgprice() const;
  void _internal_set_avgprice(double value);

  public:
  // optional double evMultiplier = 16;
  bool has_evmultiplier() const;
  void clear_evmultiplier() ;
  double evmultiplier() const;
  void set_evmultiplier(double value);

  private:
  double _internal_evmultiplier() const;
  void _internal_set_evmultiplier(double value);

  public:
  // optional bool isLiquidation = 11;
  bool has_isliquidation() const;
  void clear_isliquidation() ;
  bool isliquidation() const;
  void set_isliquidation(bool value);

  private:
  bool _internal_isliquidation() const;
  void _internal_set_isliquidation(bool value);

  public:
  // optional bool isPriceRevisionPending = 19;
  bool has_ispricerevisionpending() const;
  void clear_ispricerevisionpending() ;
  bool ispricerevisionpending() const;
  void set_ispricerevisionpending(bool value);

  private:
  bool _internal_ispricerevisionpending() const;
  void _internal_set_ispricerevisionpending(bool value);

  public:
  // optional int32 lastLiquidity = 18;
  bool has_lastliquidity() const;
  void clear_lastliquidity() ;
  ::int32_t lastliquidity() const;
  void set_lastliquidity(::int32_t value);

  private:
  ::int32_t _internal_lastliquidity() const;
  void _internal_set_lastliquidity(::int32_t value);

  public:
  // optional int32 optExerciseOrLapseType = 21;
  bool has_optexerciseorlapsetype() const;
  void clear_optexerciseorlapsetype() ;
  ::int32_t optexerciseorlapsetype() const;
  void set_optexerciseorlapsetype(::int32_t value);

  private:
  ::int32_t _internal_optexerciseorlapsetype() const;
  void _internal_set_optexerciseorlapsetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.Execution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 21,
                                   0, 119,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Execution& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr execid_;
    ::google::protobuf::internal::ArenaStringPtr time_;
    ::google::protobuf::internal::ArenaStringPtr acctnumber_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr side_;
    ::google::protobuf::internal::ArenaStringPtr shares_;
    ::google::protobuf::internal::ArenaStringPtr cumqty_;
    ::google::protobuf::internal::ArenaStringPtr orderref_;
    ::google::protobuf::internal::ArenaStringPtr evrule_;
    ::google::protobuf::internal::ArenaStringPtr modelcode_;
    ::google::protobuf::internal::ArenaStringPtr submitter_;
    ::int32_t orderid_;
    ::int32_t clientid_;
    double price_;
    ::int64_t permid_;
    double avgprice_;
    double evmultiplier_;
    bool isliquidation_;
    bool ispricerevisionpending_;
    ::int32_t lastliquidity_;
    ::int32_t optexerciseorlapsetype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Execution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Execution_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Execution

// optional int32 orderId = 1;
inline bool Execution::has_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800U) != 0;
  return value;
}
inline void Execution::clear_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800U;
}
inline ::int32_t Execution::orderid() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.orderId)
  return _internal_orderid();
}
inline void Execution::set_orderid(::int32_t value) {
  _internal_set_orderid(value);
  _impl_._has_bits_[0] |= 0x00000800U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.orderId)
}
inline ::int32_t Execution::_internal_orderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderid_;
}
inline void Execution::_internal_set_orderid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_ = value;
}

// optional string execId = 2;
inline bool Execution::has_execid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  return value;
}
inline void Execution::clear_execid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& Execution::execid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.execId)
  return _internal_execid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_execid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.execid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.execId)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_execid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_execid();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.execId)
  return _s;
}
inline const ::std::string& Execution::_internal_execid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.execid_.Get();
}
inline void Execution::_internal_set_execid(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.execid_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_execid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.execid_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_execid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.execId)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.execid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.execid_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_execid(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.execid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.execid_.IsDefault()) {
    _impl_.execid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.execId)
}

// optional string time = 3;
inline bool Execution::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void Execution::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& Execution::time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_time(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.time)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.time)
  return _s;
}
inline const ::std::string& Execution::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_.Get();
}
inline void Execution::_internal_set_time(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.time_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.time_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.time)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.time_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.time_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_time(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.time)
}

// optional string acctNumber = 4;
inline bool Execution::has_acctnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void Execution::clear_acctnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acctnumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::std::string& Execution::acctnumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.acctNumber)
  return _internal_acctnumber();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_acctnumber(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.acctnumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.acctNumber)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_acctnumber()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_acctnumber();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.acctNumber)
  return _s;
}
inline const ::std::string& Execution::_internal_acctnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acctnumber_.Get();
}
inline void Execution::_internal_set_acctnumber(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.acctnumber_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_acctnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  return _impl_.acctnumber_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_acctnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.acctNumber)
  if ((_impl_._has_bits_[0] & 0x00000004U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004U;
  auto* released = _impl_.acctnumber_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.acctnumber_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_acctnumber(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  _impl_.acctnumber_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.acctnumber_.IsDefault()) {
    _impl_.acctnumber_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.acctNumber)
}

// optional string exchange = 5;
inline bool Execution::has_exchange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  return value;
}
inline void Execution::clear_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline const ::std::string& Execution::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_exchange(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.exchange)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_exchange()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.exchange)
  return _s;
}
inline const ::std::string& Execution::_internal_exchange() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_.Get();
}
inline void Execution::_internal_set_exchange(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.exchange_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  return _impl_.exchange_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.exchange)
  if ((_impl_._has_bits_[0] & 0x00000008U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008U;
  auto* released = _impl_.exchange_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.exchange_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_exchange(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  _impl_.exchange_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.exchange)
}

// optional string side = 6;
inline bool Execution::has_side() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  return value;
}
inline void Execution::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline const ::std::string& Execution::side() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.side)
  return _internal_side();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_side(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.side_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.side)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_side()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_side();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.side)
  return _s;
}
inline const ::std::string& Execution::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_.Get();
}
inline void Execution::_internal_set_side(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.side_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  return _impl_.side_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.side)
  if ((_impl_._has_bits_[0] & 0x00000010U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010U;
  auto* released = _impl_.side_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.side_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_side(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  _impl_.side_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.side_.IsDefault()) {
    _impl_.side_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.side)
}

// optional string shares = 7;
inline bool Execution::has_shares() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  return value;
}
inline void Execution::clear_shares() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shares_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline const ::std::string& Execution::shares() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.shares)
  return _internal_shares();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_shares(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020U;
  _impl_.shares_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.shares)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_shares()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_shares();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.shares)
  return _s;
}
inline const ::std::string& Execution::_internal_shares() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shares_.Get();
}
inline void Execution::_internal_set_shares(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020U;
  _impl_.shares_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_shares() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020U;
  return _impl_.shares_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_shares() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.shares)
  if ((_impl_._has_bits_[0] & 0x00000020U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020U;
  auto* released = _impl_.shares_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.shares_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_shares(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }
  _impl_.shares_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.shares_.IsDefault()) {
    _impl_.shares_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.shares)
}

// optional double price = 8;
inline bool Execution::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000U) != 0;
  return value;
}
inline void Execution::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000U;
}
inline double Execution::price() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.price)
  return _internal_price();
}
inline void Execution::set_price(double value) {
  _internal_set_price(value);
  _impl_._has_bits_[0] |= 0x00002000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.price)
}
inline double Execution::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Execution::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// optional int64 permId = 9;
inline bool Execution::has_permid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000U) != 0;
  return value;
}
inline void Execution::clear_permid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000U;
}
inline ::int64_t Execution::permid() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.permId)
  return _internal_permid();
}
inline void Execution::set_permid(::int64_t value) {
  _internal_set_permid(value);
  _impl_._has_bits_[0] |= 0x00004000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.permId)
}
inline ::int64_t Execution::_internal_permid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permid_;
}
inline void Execution::_internal_set_permid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permid_ = value;
}

// optional int32 clientId = 10;
inline bool Execution::has_clientid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000U) != 0;
  return value;
}
inline void Execution::clear_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000U;
}
inline ::int32_t Execution::clientid() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.clientId)
  return _internal_clientid();
}
inline void Execution::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  _impl_._has_bits_[0] |= 0x00001000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.clientId)
}
inline ::int32_t Execution::_internal_clientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clientid_;
}
inline void Execution::_internal_set_clientid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_ = value;
}

// optional bool isLiquidation = 11;
inline bool Execution::has_isliquidation() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000U) != 0;
  return value;
}
inline void Execution::clear_isliquidation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isliquidation_ = false;
  _impl_._has_bits_[0] &= ~0x00020000U;
}
inline bool Execution::isliquidation() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.isLiquidation)
  return _internal_isliquidation();
}
inline void Execution::set_isliquidation(bool value) {
  _internal_set_isliquidation(value);
  _impl_._has_bits_[0] |= 0x00020000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.isLiquidation)
}
inline bool Execution::_internal_isliquidation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isliquidation_;
}
inline void Execution::_internal_set_isliquidation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isliquidation_ = value;
}

// optional string cumQty = 12;
inline bool Execution::has_cumqty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040U) != 0;
  return value;
}
inline void Execution::clear_cumqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cumqty_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline const ::std::string& Execution::cumqty() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.cumQty)
  return _internal_cumqty();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_cumqty(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040U;
  _impl_.cumqty_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.cumQty)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_cumqty()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_cumqty();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.cumQty)
  return _s;
}
inline const ::std::string& Execution::_internal_cumqty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cumqty_.Get();
}
inline void Execution::_internal_set_cumqty(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040U;
  _impl_.cumqty_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_cumqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040U;
  return _impl_.cumqty_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_cumqty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.cumQty)
  if ((_impl_._has_bits_[0] & 0x00000040U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040U;
  auto* released = _impl_.cumqty_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cumqty_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_cumqty(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040U;
  }
  _impl_.cumqty_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cumqty_.IsDefault()) {
    _impl_.cumqty_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.cumQty)
}

// optional double avgPrice = 13;
inline bool Execution::has_avgprice() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000U) != 0;
  return value;
}
inline void Execution::clear_avgprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avgprice_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000U;
}
inline double Execution::avgprice() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.avgPrice)
  return _internal_avgprice();
}
inline void Execution::set_avgprice(double value) {
  _internal_set_avgprice(value);
  _impl_._has_bits_[0] |= 0x00008000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.avgPrice)
}
inline double Execution::_internal_avgprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avgprice_;
}
inline void Execution::_internal_set_avgprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avgprice_ = value;
}

// optional string orderRef = 14;
inline bool Execution::has_orderref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080U) != 0;
  return value;
}
inline void Execution::clear_orderref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderref_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080U;
}
inline const ::std::string& Execution::orderref() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.orderRef)
  return _internal_orderref();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_orderref(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080U;
  _impl_.orderref_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.orderRef)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_orderref()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_orderref();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.orderRef)
  return _s;
}
inline const ::std::string& Execution::_internal_orderref() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderref_.Get();
}
inline void Execution::_internal_set_orderref(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080U;
  _impl_.orderref_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_orderref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080U;
  return _impl_.orderref_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_orderref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.orderRef)
  if ((_impl_._has_bits_[0] & 0x00000080U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080U;
  auto* released = _impl_.orderref_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.orderref_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_orderref(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080U;
  }
  _impl_.orderref_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.orderref_.IsDefault()) {
    _impl_.orderref_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.orderRef)
}

// optional string evRule = 15;
inline bool Execution::has_evrule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100U) != 0;
  return value;
}
inline void Execution::clear_evrule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evrule_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100U;
}
inline const ::std::string& Execution::evrule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.evRule)
  return _internal_evrule();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_evrule(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100U;
  _impl_.evrule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.evRule)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_evrule()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_evrule();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.evRule)
  return _s;
}
inline const ::std::string& Execution::_internal_evrule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evrule_.Get();
}
inline void Execution::_internal_set_evrule(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100U;
  _impl_.evrule_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_evrule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100U;
  return _impl_.evrule_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_evrule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.evRule)
  if ((_impl_._has_bits_[0] & 0x00000100U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100U;
  auto* released = _impl_.evrule_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.evrule_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_evrule(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100U;
  }
  _impl_.evrule_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.evrule_.IsDefault()) {
    _impl_.evrule_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.evRule)
}

// optional double evMultiplier = 16;
inline bool Execution::has_evmultiplier() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000U) != 0;
  return value;
}
inline void Execution::clear_evmultiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evmultiplier_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000U;
}
inline double Execution::evmultiplier() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.evMultiplier)
  return _internal_evmultiplier();
}
inline void Execution::set_evmultiplier(double value) {
  _internal_set_evmultiplier(value);
  _impl_._has_bits_[0] |= 0x00010000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.evMultiplier)
}
inline double Execution::_internal_evmultiplier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evmultiplier_;
}
inline void Execution::_internal_set_evmultiplier(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evmultiplier_ = value;
}

// optional string modelCode = 17;
inline bool Execution::has_modelcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200U) != 0;
  return value;
}
inline void Execution::clear_modelcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200U;
}
inline const ::std::string& Execution::modelcode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.modelCode)
  return _internal_modelcode();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_modelcode(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200U;
  _impl_.modelcode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.modelCode)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_modelcode()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_modelcode();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.modelCode)
  return _s;
}
inline const ::std::string& Execution::_internal_modelcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modelcode_.Get();
}
inline void Execution::_internal_set_modelcode(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200U;
  _impl_.modelcode_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_modelcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200U;
  return _impl_.modelcode_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_modelcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.modelCode)
  if ((_impl_._has_bits_[0] & 0x00000200U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200U;
  auto* released = _impl_.modelcode_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.modelcode_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_modelcode(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200U;
  }
  _impl_.modelcode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.modelcode_.IsDefault()) {
    _impl_.modelcode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.modelCode)
}

// optional int32 lastLiquidity = 18;
inline bool Execution::has_lastliquidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000U) != 0;
  return value;
}
inline void Execution::clear_lastliquidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastliquidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000U;
}
inline ::int32_t Execution::lastliquidity() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.lastLiquidity)
  return _internal_lastliquidity();
}
inline void Execution::set_lastliquidity(::int32_t value) {
  _internal_set_lastliquidity(value);
  _impl_._has_bits_[0] |= 0x00080000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.lastLiquidity)
}
inline ::int32_t Execution::_internal_lastliquidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lastliquidity_;
}
inline void Execution::_internal_set_lastliquidity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastliquidity_ = value;
}

// optional bool isPriceRevisionPending = 19;
inline bool Execution::has_ispricerevisionpending() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000U) != 0;
  return value;
}
inline void Execution::clear_ispricerevisionpending() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispricerevisionpending_ = false;
  _impl_._has_bits_[0] &= ~0x00040000U;
}
inline bool Execution::ispricerevisionpending() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.isPriceRevisionPending)
  return _internal_ispricerevisionpending();
}
inline void Execution::set_ispricerevisionpending(bool value) {
  _internal_set_ispricerevisionpending(value);
  _impl_._has_bits_[0] |= 0x00040000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.isPriceRevisionPending)
}
inline bool Execution::_internal_ispricerevisionpending() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ispricerevisionpending_;
}
inline void Execution::_internal_set_ispricerevisionpending(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispricerevisionpending_ = value;
}

// optional string submitter = 20;
inline bool Execution::has_submitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400U) != 0;
  return value;
}
inline void Execution::clear_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submitter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400U;
}
inline const ::std::string& Execution::submitter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Execution.submitter)
  return _internal_submitter();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Execution::set_submitter(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400U;
  _impl_.submitter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Execution.submitter)
}
inline ::std::string* PROTOBUF_NONNULL Execution::mutable_submitter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_submitter();
  // @@protoc_insertion_point(field_mutable:protobuf.Execution.submitter)
  return _s;
}
inline const ::std::string& Execution::_internal_submitter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.submitter_.Get();
}
inline void Execution::_internal_set_submitter(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400U;
  _impl_.submitter_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Execution::_internal_mutable_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400U;
  return _impl_.submitter_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Execution::release_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Execution.submitter)
  if ((_impl_._has_bits_[0] & 0x00000400U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400U;
  auto* released = _impl_.submitter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.submitter_.Set("", GetArena());
  }
  return released;
}
inline void Execution::set_allocated_submitter(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400U;
  }
  _impl_.submitter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.submitter_.IsDefault()) {
    _impl_.submitter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Execution.submitter)
}

// optional int32 optExerciseOrLapseType = 21;
inline bool Execution::has_optexerciseorlapsetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000U) != 0;
  return value;
}
inline void Execution::clear_optexerciseorlapsetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optexerciseorlapsetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000U;
}
inline ::int32_t Execution::optexerciseorlapsetype() const {
  // @@protoc_insertion_point(field_get:protobuf.Execution.optExerciseOrLapseType)
  return _internal_optexerciseorlapsetype();
}
inline void Execution::set_optexerciseorlapsetype(::int32_t value) {
  _internal_set_optexerciseorlapsetype(value);
  _impl_._has_bits_[0] |= 0x00100000U;
  // @@protoc_insertion_point(field_set:protobuf.Execution.optExerciseOrLapseType)
}
inline ::int32_t Execution::_internal_optexerciseorlapsetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optexerciseorlapsetype_;
}
inline void Execution::_internal_set_optexerciseorlapsetype(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optexerciseorlapsetype_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Execution_2eproto_2epb_2eh
